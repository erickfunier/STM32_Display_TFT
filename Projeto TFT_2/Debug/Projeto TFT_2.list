
Projeto TFT_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a4cc  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d4f8  0800d4f8  0001d4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d4fc  0800d4fc  0001d4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  0800d500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  20000088  0800d588  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000174  0800d588  00020174  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f75b  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021be  00000000  00000000  0002f80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000042b8  00000000  00000000  000319ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006e0  00000000  00000000  00035c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d50  00000000  00000000  00036368  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000442c  00000000  00000000  000370b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000025fb  00000000  00000000  0003b4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003dadf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000015d4  00000000  00000000  0003db5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003014 	.word	0x08003014

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003014 	.word	0x08003014

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 fba4 	bl	80008c0 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 fb5a 	bl	8000840 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000020 	.word	0x20000020
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 fb33 	bl	800081c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 f9c2 	bl	8002544 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000c0 	.word	0x200000c0

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000210:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000212:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000216:	f012 0f50 	tst.w	r2, #80	; 0x50
 800021a:	d11b      	bne.n	8000254 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800021c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800021e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000222:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	6892      	ldr	r2, [r2, #8]
 8000228:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800022c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000230:	d10c      	bne.n	800024c <ADC_DMAConvCplt+0x3c>
 8000232:	68da      	ldr	r2, [r3, #12]
 8000234:	b952      	cbnz	r2, 800024c <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800023c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800023e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000240:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000242:	bf5e      	ittt	pl
 8000244:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000246:	f042 0201 	orrpl.w	r2, r2, #1
 800024a:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800024c:	4618      	mov	r0, r3
 800024e:	f002 f86d 	bl	800232c <HAL_ADC_ConvCpltCallback>
 8000252:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000254:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800025a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025c:	4718      	bx	r3

0800025e <HAL_ADC_ConvHalfCpltCallback>:
 800025e:	4770      	bx	lr

08000260 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000260:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000262:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000264:	f7ff fffb 	bl	800025e <HAL_ADC_ConvHalfCpltCallback>
 8000268:	bd08      	pop	{r3, pc}

0800026a <HAL_ADC_LevelOutOfWindowCallback>:
 800026a:	4770      	bx	lr

0800026c <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800026c:	6803      	ldr	r3, [r0, #0]
{
 800026e:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000270:	685a      	ldr	r2, [r3, #4]
{
 8000272:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000274:	0690      	lsls	r0, r2, #26
 8000276:	d527      	bpl.n	80002c8 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	0791      	lsls	r1, r2, #30
 800027c:	d524      	bpl.n	80002c8 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800027e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000280:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000282:	bf5e      	ittt	pl
 8000284:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000286:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800028a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800028c:	689a      	ldr	r2, [r3, #8]
 800028e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000292:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000296:	d110      	bne.n	80002ba <HAL_ADC_IRQHandler+0x4e>
 8000298:	68e2      	ldr	r2, [r4, #12]
 800029a:	b972      	cbnz	r2, 80002ba <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800029c:	685a      	ldr	r2, [r3, #4]
 800029e:	f022 0220 	bic.w	r2, r2, #32
 80002a2:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80002a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002aa:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80002ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002ae:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002b0:	bf5e      	ittt	pl
 80002b2:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80002b4:	f043 0301 	orrpl.w	r3, r3, #1
 80002b8:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 80002ba:	4620      	mov	r0, r4
 80002bc:	f002 f836 	bl	800232c <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80002c0:	f06f 0212 	mvn.w	r2, #18
 80002c4:	6823      	ldr	r3, [r4, #0]
 80002c6:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80002c8:	6823      	ldr	r3, [r4, #0]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	0610      	lsls	r0, r2, #24
 80002ce:	d530      	bpl.n	8000332 <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	0751      	lsls	r1, r2, #29
 80002d4:	d52d      	bpl.n	8000332 <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002d8:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80002da:	bf5e      	ittt	pl
 80002dc:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80002de:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80002e2:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002e4:	689a      	ldr	r2, [r3, #8]
 80002e6:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80002ea:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80002ee:	d00a      	beq.n	8000306 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002f0:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002f2:	0550      	lsls	r0, r2, #21
 80002f4:	d416      	bmi.n	8000324 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002f6:	689a      	ldr	r2, [r3, #8]
 80002f8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002fc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000300:	d110      	bne.n	8000324 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000302:	68e2      	ldr	r2, [r4, #12]
 8000304:	b972      	cbnz	r2, 8000324 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000306:	685a      	ldr	r2, [r3, #4]
 8000308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800030c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800030e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000314:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000316:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000318:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800031a:	bf5e      	ittt	pl
 800031c:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800031e:	f043 0301 	orrpl.w	r3, r3, #1
 8000322:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000324:	4620      	mov	r0, r4
 8000326:	f000 fa77 	bl	8000818 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800032a:	f06f 020c 	mvn.w	r2, #12
 800032e:	6823      	ldr	r3, [r4, #0]
 8000330:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000332:	6823      	ldr	r3, [r4, #0]
 8000334:	685a      	ldr	r2, [r3, #4]
 8000336:	0652      	lsls	r2, r2, #25
 8000338:	d50d      	bpl.n	8000356 <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	07db      	lsls	r3, r3, #31
 800033e:	d50a      	bpl.n	8000356 <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000342:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000348:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800034a:	f7ff ff8e 	bl	800026a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800034e:	f06f 0201 	mvn.w	r2, #1
 8000352:	6823      	ldr	r3, [r4, #0]
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	bd10      	pop	{r4, pc}

08000358 <HAL_ADC_ErrorCallback>:
{
 8000358:	4770      	bx	lr

0800035a <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800035a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800035c:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800035e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000364:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000366:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000368:	f043 0304 	orr.w	r3, r3, #4
 800036c:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800036e:	f7ff fff3 	bl	8000358 <HAL_ADC_ErrorCallback>
 8000372:	bd08      	pop	{r3, pc}

08000374 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000374:	2300      	movs	r3, #0
{ 
 8000376:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000378:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800037a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800037e:	2b01      	cmp	r3, #1
 8000380:	d074      	beq.n	800046c <HAL_ADC_ConfigChannel+0xf8>
 8000382:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000384:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000386:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800038a:	2d06      	cmp	r5, #6
 800038c:	6802      	ldr	r2, [r0, #0]
 800038e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000392:	680c      	ldr	r4, [r1, #0]
 8000394:	d825      	bhi.n	80003e2 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000396:	442b      	add	r3, r5
 8000398:	251f      	movs	r5, #31
 800039a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800039c:	3b05      	subs	r3, #5
 800039e:	409d      	lsls	r5, r3
 80003a0:	ea26 0505 	bic.w	r5, r6, r5
 80003a4:	fa04 f303 	lsl.w	r3, r4, r3
 80003a8:	432b      	orrs	r3, r5
 80003aa:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80003ac:	2c09      	cmp	r4, #9
 80003ae:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80003b2:	688d      	ldr	r5, [r1, #8]
 80003b4:	d92f      	bls.n	8000416 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80003b6:	2607      	movs	r6, #7
 80003b8:	4423      	add	r3, r4
 80003ba:	68d1      	ldr	r1, [r2, #12]
 80003bc:	3b1e      	subs	r3, #30
 80003be:	409e      	lsls	r6, r3
 80003c0:	ea21 0106 	bic.w	r1, r1, r6
 80003c4:	fa05 f303 	lsl.w	r3, r5, r3
 80003c8:	430b      	orrs	r3, r1
 80003ca:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003cc:	f1a4 0310 	sub.w	r3, r4, #16
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d92b      	bls.n	800042c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003d4:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80003dc:	4618      	mov	r0, r3
 80003de:	b002      	add	sp, #8
 80003e0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80003e2:	2d0c      	cmp	r5, #12
 80003e4:	d80b      	bhi.n	80003fe <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80003e6:	442b      	add	r3, r5
 80003e8:	251f      	movs	r5, #31
 80003ea:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80003ec:	3b23      	subs	r3, #35	; 0x23
 80003ee:	409d      	lsls	r5, r3
 80003f0:	ea26 0505 	bic.w	r5, r6, r5
 80003f4:	fa04 f303 	lsl.w	r3, r4, r3
 80003f8:	432b      	orrs	r3, r5
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
 80003fc:	e7d6      	b.n	80003ac <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003fe:	442b      	add	r3, r5
 8000400:	251f      	movs	r5, #31
 8000402:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000404:	3b41      	subs	r3, #65	; 0x41
 8000406:	409d      	lsls	r5, r3
 8000408:	ea26 0505 	bic.w	r5, r6, r5
 800040c:	fa04 f303 	lsl.w	r3, r4, r3
 8000410:	432b      	orrs	r3, r5
 8000412:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000414:	e7ca      	b.n	80003ac <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000416:	2607      	movs	r6, #7
 8000418:	6911      	ldr	r1, [r2, #16]
 800041a:	4423      	add	r3, r4
 800041c:	409e      	lsls	r6, r3
 800041e:	ea21 0106 	bic.w	r1, r1, r6
 8000422:	fa05 f303 	lsl.w	r3, r5, r3
 8000426:	430b      	orrs	r3, r1
 8000428:	6113      	str	r3, [r2, #16]
 800042a:	e7cf      	b.n	80003cc <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <HAL_ADC_ConfigChannel+0xfc>)
 800042e:	429a      	cmp	r2, r3
 8000430:	d116      	bne.n	8000460 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000432:	6893      	ldr	r3, [r2, #8]
 8000434:	021b      	lsls	r3, r3, #8
 8000436:	d4cd      	bmi.n	80003d4 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000438:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800043a:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800043c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000440:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000442:	d1c7      	bne.n	80003d4 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_ADC_ConfigChannel+0x100>)
 8000446:	4a0c      	ldr	r2, [pc, #48]	; (8000478 <HAL_ADC_ConfigChannel+0x104>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	fbb3 f2f2 	udiv	r2, r3, r2
 800044e:	230a      	movs	r3, #10
 8000450:	4353      	muls	r3, r2
            wait_loop_index--;
 8000452:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000454:	9b01      	ldr	r3, [sp, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0bc      	beq.n	80003d4 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800045a:	9b01      	ldr	r3, [sp, #4]
 800045c:	3b01      	subs	r3, #1
 800045e:	e7f8      	b.n	8000452 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000460:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000468:	2301      	movs	r3, #1
 800046a:	e7b4      	b.n	80003d6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800046c:	2302      	movs	r3, #2
 800046e:	e7b5      	b.n	80003dc <HAL_ADC_ConfigChannel+0x68>
 8000470:	40012400 	.word	0x40012400
 8000474:	20000020 	.word	0x20000020
 8000478:	000f4240 	.word	0x000f4240

0800047c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800047c:	2300      	movs	r3, #0
{
 800047e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000480:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000482:	6803      	ldr	r3, [r0, #0]
{
 8000484:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000486:	689a      	ldr	r2, [r3, #8]
 8000488:	07d2      	lsls	r2, r2, #31
 800048a:	d502      	bpl.n	8000492 <ADC_Enable+0x16>
  return HAL_OK;
 800048c:	2000      	movs	r0, #0
}
 800048e:	b002      	add	sp, #8
 8000490:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	f042 0201 	orr.w	r2, r2, #1
 8000498:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <ADC_Enable+0x68>)
 800049c:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <ADC_Enable+0x6c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80004a4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80004a6:	9b01      	ldr	r3, [sp, #4]
 80004a8:	b9c3      	cbnz	r3, 80004dc <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80004aa:	f7ff fe99 	bl	80001e0 <HAL_GetTick>
 80004ae:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80004b0:	6823      	ldr	r3, [r4, #0]
 80004b2:	689d      	ldr	r5, [r3, #8]
 80004b4:	f015 0501 	ands.w	r5, r5, #1
 80004b8:	d1e8      	bne.n	800048c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80004ba:	f7ff fe91 	bl	80001e0 <HAL_GetTick>
 80004be:	1b80      	subs	r0, r0, r6
 80004c0:	2802      	cmp	r0, #2
 80004c2:	d9f5      	bls.n	80004b0 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80004c6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004ca:	f043 0310 	orr.w	r3, r3, #16
 80004ce:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80004d2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004da:	e7d8      	b.n	800048e <ADC_Enable+0x12>
      wait_loop_index--;
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	3b01      	subs	r3, #1
 80004e0:	e7e0      	b.n	80004a4 <ADC_Enable+0x28>
 80004e2:	bf00      	nop
 80004e4:	20000020 	.word	0x20000020
 80004e8:	000f4240 	.word	0x000f4240

080004ec <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 80004ec:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80004f0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80004f2:	2b01      	cmp	r3, #1
{
 80004f4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80004f6:	d058      	beq.n	80005aa <HAL_ADC_Start_IT+0xbe>
 80004f8:	2301      	movs	r3, #1
 80004fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80004fe:	f7ff ffbd 	bl	800047c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000502:	2800      	cmp	r0, #0
 8000504:	d14d      	bne.n	80005a2 <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 8000506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000508:	4a29      	ldr	r2, [pc, #164]	; (80005b0 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800050a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800050e:	f023 0301 	bic.w	r3, r3, #1
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000518:	6823      	ldr	r3, [r4, #0]
 800051a:	4293      	cmp	r3, r2
 800051c:	d104      	bne.n	8000528 <HAL_ADC_Start_IT+0x3c>
 800051e:	4925      	ldr	r1, [pc, #148]	; (80005b4 <HAL_ADC_Start_IT+0xc8>)
 8000520:	684a      	ldr	r2, [r1, #4]
 8000522:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000526:	d132      	bne.n	800058e <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000528:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800052a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800052e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000530:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000532:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000534:	bf41      	itttt	mi
 8000536:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000538:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800053c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000540:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000542:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000548:	bf1c      	itt	ne
 800054a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 800054c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000550:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000552:	2200      	movs	r2, #0
 8000554:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000558:	f06f 0202 	mvn.w	r2, #2
 800055c:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	f042 0220 	orr.w	r2, r2, #32
 8000564:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000566:	689a      	ldr	r2, [r3, #8]
 8000568:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800056c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000570:	d113      	bne.n	800059a <HAL_ADC_Start_IT+0xae>
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <HAL_ADC_Start_IT+0xc4>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d105      	bne.n	8000584 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000578:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800057c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800057e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000582:	d10a      	bne.n	800059a <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800058e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000590:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000594:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000596:	684a      	ldr	r2, [r1, #4]
 8000598:	e7cb      	b.n	8000532 <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800059a:	689a      	ldr	r2, [r3, #8]
 800059c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80005a0:	e7f3      	b.n	800058a <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 80005a2:	2300      	movs	r3, #0
 80005a4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80005a8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80005aa:	2002      	movs	r0, #2
}
 80005ac:	bd10      	pop	{r4, pc}
 80005ae:	bf00      	nop
 80005b0:	40012800 	.word	0x40012800
 80005b4:	40012400 	.word	0x40012400

080005b8 <HAL_ADC_Start_DMA>:
{
 80005b8:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80005bc:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80005be:	4b40      	ldr	r3, [pc, #256]	; (80006c0 <HAL_ADC_Start_DMA+0x108>)
 80005c0:	6802      	ldr	r2, [r0, #0]
{
 80005c2:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80005c4:	429a      	cmp	r2, r3
{
 80005c6:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80005c8:	d002      	beq.n	80005d0 <HAL_ADC_Start_DMA+0x18>
 80005ca:	493e      	ldr	r1, [pc, #248]	; (80006c4 <HAL_ADC_Start_DMA+0x10c>)
 80005cc:	428a      	cmp	r2, r1
 80005ce:	d103      	bne.n	80005d8 <HAL_ADC_Start_DMA+0x20>
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80005d6:	d16e      	bne.n	80006b6 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80005d8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d06c      	beq.n	80006ba <HAL_ADC_Start_DMA+0x102>
 80005e0:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80005e2:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80005e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80005e8:	f7ff ff48 	bl	800047c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80005ec:	4606      	mov	r6, r0
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d15d      	bne.n	80006ae <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80005f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005f4:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80005f6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005fa:	4b32      	ldr	r3, [pc, #200]	; (80006c4 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80005fc:	f020 0001 	bic.w	r0, r0, #1
 8000600:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000604:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000606:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000608:	d104      	bne.n	8000614 <HAL_ADC_Start_DMA+0x5c>
 800060a:	4a2d      	ldr	r2, [pc, #180]	; (80006c0 <HAL_ADC_Start_DMA+0x108>)
 800060c:	6853      	ldr	r3, [r2, #4]
 800060e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000612:	d13e      	bne.n	8000692 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000614:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000616:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800061a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800061c:	684b      	ldr	r3, [r1, #4]
 800061e:	055a      	lsls	r2, r3, #21
 8000620:	d505      	bpl.n	800062e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000624:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800062c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800062e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000630:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000632:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000636:	bf18      	it	ne
 8000638:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800063a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800063c:	bf18      	it	ne
 800063e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000642:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000644:	2300      	movs	r3, #0
 8000646:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800064c:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800064e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <HAL_ADC_Start_DMA+0x114>)
 8000652:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <HAL_ADC_Start_DMA+0x118>)
 8000656:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000658:	f06f 0302 	mvn.w	r3, #2
 800065c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000660:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800066c:	4643      	mov	r3, r8
 800066e:	f000 f983 	bl	8000978 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000672:	6823      	ldr	r3, [r4, #0]
 8000674:	689a      	ldr	r2, [r3, #8]
 8000676:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800067a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	bf0c      	ite	eq
 8000682:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000686:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800068a:	609a      	str	r2, [r3, #8]
}
 800068c:	4630      	mov	r0, r6
 800068e:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800069a:	6853      	ldr	r3, [r2, #4]
 800069c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800069e:	bf41      	itttt	mi
 80006a0:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80006a2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80006a6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80006aa:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80006ac:	e7bf      	b.n	800062e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80006ae:	2300      	movs	r3, #0
 80006b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80006b4:	e7ea      	b.n	800068c <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80006b6:	2601      	movs	r6, #1
 80006b8:	e7e8      	b.n	800068c <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80006ba:	2602      	movs	r6, #2
 80006bc:	e7e6      	b.n	800068c <HAL_ADC_Start_DMA+0xd4>
 80006be:	bf00      	nop
 80006c0:	40012400 	.word	0x40012400
 80006c4:	40012800 	.word	0x40012800
 80006c8:	08000211 	.word	0x08000211
 80006cc:	08000261 	.word	0x08000261
 80006d0:	0800035b 	.word	0x0800035b

080006d4 <ADC_ConversionStop_Disable>:
{
 80006d4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006d6:	6803      	ldr	r3, [r0, #0]
{
 80006d8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	07d2      	lsls	r2, r2, #31
 80006de:	d401      	bmi.n	80006e4 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80006e0:	2000      	movs	r0, #0
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	f022 0201 	bic.w	r2, r2, #1
 80006ea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80006ec:	f7ff fd78 	bl	80001e0 <HAL_GetTick>
 80006f0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	07db      	lsls	r3, r3, #31
 80006f8:	d5f2      	bpl.n	80006e0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80006fa:	f7ff fd71 	bl	80001e0 <HAL_GetTick>
 80006fe:	1b40      	subs	r0, r0, r5
 8000700:	2802      	cmp	r0, #2
 8000702:	d9f6      	bls.n	80006f2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000704:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000706:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800070e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000716:	bd38      	pop	{r3, r4, r5, pc}

08000718 <HAL_ADC_Init>:
{
 8000718:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800071a:	4604      	mov	r4, r0
 800071c:	2800      	cmp	r0, #0
 800071e:	d071      	beq.n	8000804 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000720:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000722:	b923      	cbnz	r3, 800072e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000724:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000726:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800072a:	f001 ff5b 	bl	80025e4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800072e:	4620      	mov	r0, r4
 8000730:	f7ff ffd0 	bl	80006d4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000736:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800073a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800073c:	d164      	bne.n	8000808 <HAL_ADC_Init+0xf0>
 800073e:	2800      	cmp	r0, #0
 8000740:	d162      	bne.n	8000808 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000742:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000744:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000748:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800074a:	f023 0302 	bic.w	r3, r3, #2
 800074e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000752:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000754:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000756:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000758:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800075a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800075e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000762:	d038      	beq.n	80007d6 <HAL_ADC_Init+0xbe>
 8000764:	2901      	cmp	r1, #1
 8000766:	bf14      	ite	ne
 8000768:	4606      	movne	r6, r0
 800076a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800076e:	6965      	ldr	r5, [r4, #20]
 8000770:	2d01      	cmp	r5, #1
 8000772:	d107      	bne.n	8000784 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000774:	2b00      	cmp	r3, #0
 8000776:	d130      	bne.n	80007da <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000778:	69a3      	ldr	r3, [r4, #24]
 800077a:	3b01      	subs	r3, #1
 800077c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000780:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000784:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000786:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800078a:	685d      	ldr	r5, [r3, #4]
 800078c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000790:	ea45 0506 	orr.w	r5, r5, r6
 8000794:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000796:	689e      	ldr	r6, [r3, #8]
 8000798:	4d1d      	ldr	r5, [pc, #116]	; (8000810 <HAL_ADC_Init+0xf8>)
 800079a:	ea05 0506 	and.w	r5, r5, r6
 800079e:	ea45 0502 	orr.w	r5, r5, r2
 80007a2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007a4:	d001      	beq.n	80007aa <HAL_ADC_Init+0x92>
 80007a6:	2901      	cmp	r1, #1
 80007a8:	d120      	bne.n	80007ec <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007aa:	6921      	ldr	r1, [r4, #16]
 80007ac:	3901      	subs	r1, #1
 80007ae:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80007b0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80007b2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80007b6:	4329      	orrs	r1, r5
 80007b8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007ba:	6899      	ldr	r1, [r3, #8]
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_ADC_Init+0xfc>)
 80007be:	400b      	ands	r3, r1
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d115      	bne.n	80007f0 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80007c4:	2300      	movs	r3, #0
 80007c6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80007c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007ca:	f023 0303 	bic.w	r3, r3, #3
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007d6:	460e      	mov	r6, r1
 80007d8:	e7c9      	b.n	800076e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007ea:	e7cb      	b.n	8000784 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80007ec:	2100      	movs	r1, #0
 80007ee:	e7df      	b.n	80007b0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80007f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007f2:	f023 0312 	bic.w	r3, r3, #18
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000804:	2001      	movs	r0, #1
}
 8000806:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	62a3      	str	r3, [r4, #40]	; 0x28
 800080e:	e7f9      	b.n	8000804 <HAL_ADC_Init+0xec>
 8000810:	ffe1f7fd 	.word	0xffe1f7fd
 8000814:	ff1f0efe 	.word	0xff1f0efe

08000818 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000818:	4770      	bx	lr
	...

0800081c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800081e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000822:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800082a:	041b      	lsls	r3, r3, #16
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000836:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000838:	60d3      	str	r3, [r2, #12]
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000842:	b530      	push	{r4, r5, lr}
 8000844:	68dc      	ldr	r4, [r3, #12]
 8000846:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800084a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000850:	2b04      	cmp	r3, #4
 8000852:	bf28      	it	cs
 8000854:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085c:	bf98      	it	ls
 800085e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	fa05 f303 	lsl.w	r3, r5, r3
 8000864:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000868:	bf88      	it	hi
 800086a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	4019      	ands	r1, r3
 800086e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	fa05 f404 	lsl.w	r4, r5, r4
 8000874:	3c01      	subs	r4, #1
 8000876:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000878:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087a:	ea42 0201 	orr.w	r2, r2, r1
 800087e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000882:	bfaf      	iteee	ge
 8000884:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	4b06      	ldrlt	r3, [pc, #24]	; (80008a4 <HAL_NVIC_SetPriority+0x64>)
 800088a:	f000 000f 	andlt.w	r0, r0, #15
 800088e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	bfa5      	ittet	ge
 8000892:	b2d2      	uxtbge	r2, r2
 8000894:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800089e:	bd30      	pop	{r4, r5, pc}
 80008a0:	e000ed00 	.word	0xe000ed00
 80008a4:	e000ed14 	.word	0xe000ed14

080008a8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008a8:	2301      	movs	r3, #1
 80008aa:	0942      	lsrs	r2, r0, #5
 80008ac:	f000 001f 	and.w	r0, r0, #31
 80008b0:	fa03 f000 	lsl.w	r0, r3, r0
 80008b4:	4b01      	ldr	r3, [pc, #4]	; (80008bc <HAL_NVIC_EnableIRQ+0x14>)
 80008b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c0:	3801      	subs	r0, #1
 80008c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008c6:	d20a      	bcs.n	80008de <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e010 	.word	0xe000e010
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008ee:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	bf0c      	ite	eq
 80008f4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008f8:	f022 0204 	bicne.w	r2, r2, #4
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	4770      	bx	lr
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000904:	4770      	bx	lr

08000906 <HAL_SYSTICK_IRQHandler>:
{
 8000906:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000908:	f7ff fffc 	bl	8000904 <HAL_SYSTICK_Callback>
 800090c:	bd08      	pop	{r3, pc}
	...

08000910 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000910:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000912:	b350      	cbz	r0, 800096a <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000914:	2214      	movs	r2, #20
 8000916:	6801      	ldr	r1, [r0, #0]
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800091a:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800091c:	440b      	add	r3, r1
 800091e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000928:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800092a:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 800092c:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800092e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000932:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000934:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000936:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800093a:	4323      	orrs	r3, r4
 800093c:	6904      	ldr	r4, [r0, #16]
 800093e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000940:	6944      	ldr	r4, [r0, #20]
 8000942:	4323      	orrs	r3, r4
 8000944:	6984      	ldr	r4, [r0, #24]
 8000946:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000948:	69c4      	ldr	r4, [r0, #28]
 800094a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800094c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800094e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000950:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000952:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000954:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8000958:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800095a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800095c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800095e:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000960:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000962:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8000966:	4618      	mov	r0, r3
 8000968:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800096a:	2001      	movs	r0, #1
}
 800096c:	bd10      	pop	{r4, pc}
 800096e:	bf00      	nop
 8000970:	bffdfff8 	.word	0xbffdfff8
 8000974:	40020000 	.word	0x40020000

08000978 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800097a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800097e:	2c01      	cmp	r4, #1
 8000980:	d035      	beq.n	80009ee <HAL_DMA_Start_IT+0x76>
 8000982:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000984:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000988:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800098c:	42a5      	cmp	r5, r4
 800098e:	f04f 0600 	mov.w	r6, #0
 8000992:	f04f 0402 	mov.w	r4, #2
 8000996:	d128      	bne.n	80009ea <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000998:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800099c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800099e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80009a0:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009a2:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80009a4:	f026 0601 	bic.w	r6, r6, #1
 80009a8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009aa:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80009ac:	40bd      	lsls	r5, r7
 80009ae:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80009b0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80009b2:	6843      	ldr	r3, [r0, #4]
 80009b4:	6805      	ldr	r5, [r0, #0]
 80009b6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80009b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80009ba:	bf0b      	itete	eq
 80009bc:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80009be:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80009c0:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80009c2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80009c4:	b14b      	cbz	r3, 80009da <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009cc:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80009ce:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009d0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	602b      	str	r3, [r5, #0]
 80009d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	f023 0304 	bic.w	r3, r3, #4
 80009e0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	f043 030a 	orr.w	r3, r3, #10
 80009e8:	e7f0      	b.n	80009cc <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80009ea:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80009ee:	2002      	movs	r0, #2
}
 80009f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080009f4 <HAL_DMA_IRQHandler>:
{
 80009f4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80009f6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80009f8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80009fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80009fc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80009fe:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a00:	4095      	lsls	r5, r2
 8000a02:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000a04:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a06:	d032      	beq.n	8000a6e <HAL_DMA_IRQHandler+0x7a>
 8000a08:	074d      	lsls	r5, r1, #29
 8000a0a:	d530      	bpl.n	8000a6e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a10:	bf5e      	ittt	pl
 8000a12:	681a      	ldrpl	r2, [r3, #0]
 8000a14:	f022 0204 	bicpl.w	r2, r2, #4
 8000a18:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <HAL_DMA_IRQHandler+0x120>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d019      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x60>
 8000a20:	3214      	adds	r2, #20
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d018      	beq.n	8000a58 <HAL_DMA_IRQHandler+0x64>
 8000a26:	3214      	adds	r2, #20
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d017      	beq.n	8000a5c <HAL_DMA_IRQHandler+0x68>
 8000a2c:	3214      	adds	r2, #20
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d017      	beq.n	8000a62 <HAL_DMA_IRQHandler+0x6e>
 8000a32:	3214      	adds	r2, #20
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d017      	beq.n	8000a68 <HAL_DMA_IRQHandler+0x74>
 8000a38:	3214      	adds	r2, #20
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	bf0c      	ite	eq
 8000a3e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000a42:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000a46:	4a34      	ldr	r2, [pc, #208]	; (8000b18 <HAL_DMA_IRQHandler+0x124>)
 8000a48:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000a4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d05e      	beq.n	8000b0e <HAL_DMA_IRQHandler+0x11a>
}
 8000a50:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000a52:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a54:	2304      	movs	r3, #4
 8000a56:	e7f6      	b.n	8000a46 <HAL_DMA_IRQHandler+0x52>
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	e7f4      	b.n	8000a46 <HAL_DMA_IRQHandler+0x52>
 8000a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a60:	e7f1      	b.n	8000a46 <HAL_DMA_IRQHandler+0x52>
 8000a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a66:	e7ee      	b.n	8000a46 <HAL_DMA_IRQHandler+0x52>
 8000a68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a6c:	e7eb      	b.n	8000a46 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000a6e:	2502      	movs	r5, #2
 8000a70:	4095      	lsls	r5, r2
 8000a72:	4225      	tst	r5, r4
 8000a74:	d035      	beq.n	8000ae2 <HAL_DMA_IRQHandler+0xee>
 8000a76:	078d      	lsls	r5, r1, #30
 8000a78:	d533      	bpl.n	8000ae2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	0694      	lsls	r4, r2, #26
 8000a7e:	d406      	bmi.n	8000a8e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	f022 020a 	bic.w	r2, r2, #10
 8000a86:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a8e:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <HAL_DMA_IRQHandler+0x120>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d019      	beq.n	8000ac8 <HAL_DMA_IRQHandler+0xd4>
 8000a94:	3214      	adds	r2, #20
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d018      	beq.n	8000acc <HAL_DMA_IRQHandler+0xd8>
 8000a9a:	3214      	adds	r2, #20
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d017      	beq.n	8000ad0 <HAL_DMA_IRQHandler+0xdc>
 8000aa0:	3214      	adds	r2, #20
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d017      	beq.n	8000ad6 <HAL_DMA_IRQHandler+0xe2>
 8000aa6:	3214      	adds	r2, #20
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d017      	beq.n	8000adc <HAL_DMA_IRQHandler+0xe8>
 8000aac:	3214      	adds	r2, #20
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	bf0c      	ite	eq
 8000ab2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000ab6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_DMA_IRQHandler+0x124>)
 8000abc:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000ac4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ac6:	e7c1      	b.n	8000a4c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ac8:	2302      	movs	r3, #2
 8000aca:	e7f6      	b.n	8000aba <HAL_DMA_IRQHandler+0xc6>
 8000acc:	2320      	movs	r3, #32
 8000ace:	e7f4      	b.n	8000aba <HAL_DMA_IRQHandler+0xc6>
 8000ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad4:	e7f1      	b.n	8000aba <HAL_DMA_IRQHandler+0xc6>
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	e7ee      	b.n	8000aba <HAL_DMA_IRQHandler+0xc6>
 8000adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae0:	e7eb      	b.n	8000aba <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ae2:	2508      	movs	r5, #8
 8000ae4:	4095      	lsls	r5, r2
 8000ae6:	4225      	tst	r5, r4
 8000ae8:	d011      	beq.n	8000b0e <HAL_DMA_IRQHandler+0x11a>
 8000aea:	0709      	lsls	r1, r1, #28
 8000aec:	d50f      	bpl.n	8000b0e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aee:	6819      	ldr	r1, [r3, #0]
 8000af0:	f021 010e 	bic.w	r1, r1, #14
 8000af4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000af6:	2301      	movs	r3, #1
 8000af8:	fa03 f202 	lsl.w	r2, r3, r2
 8000afc:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000afe:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000b00:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000b04:	2300      	movs	r3, #0
 8000b06:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000b0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b0c:	e79e      	b.n	8000a4c <HAL_DMA_IRQHandler+0x58>
}
 8000b0e:	bc70      	pop	{r4, r5, r6}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40020008 	.word	0x40020008
 8000b18:	40020000 	.word	0x40020000

08000b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000b20:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b22:	4616      	mov	r6, r2
 8000b24:	4b65      	ldr	r3, [pc, #404]	; (8000cbc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b26:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000ccc <HAL_GPIO_Init+0x1b0>
 8000b2a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000cd0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000b2e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b32:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000b34:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b38:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	d17f      	bne.n	8000c40 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000b40:	684d      	ldr	r5, [r1, #4]
 8000b42:	2d12      	cmp	r5, #18
 8000b44:	f000 80af 	beq.w	8000ca6 <HAL_GPIO_Init+0x18a>
 8000b48:	f200 8088 	bhi.w	8000c5c <HAL_GPIO_Init+0x140>
 8000b4c:	2d02      	cmp	r5, #2
 8000b4e:	f000 80a7 	beq.w	8000ca0 <HAL_GPIO_Init+0x184>
 8000b52:	d87c      	bhi.n	8000c4e <HAL_GPIO_Init+0x132>
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	f000 808e 	beq.w	8000c76 <HAL_GPIO_Init+0x15a>
 8000b5a:	2d01      	cmp	r5, #1
 8000b5c:	f000 809e 	beq.w	8000c9c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b60:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b64:	2cff      	cmp	r4, #255	; 0xff
 8000b66:	bf93      	iteet	ls
 8000b68:	4682      	movls	sl, r0
 8000b6a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000b6e:	3d08      	subhi	r5, #8
 8000b70:	f8d0 b000 	ldrls.w	fp, [r0]
 8000b74:	bf92      	itee	ls
 8000b76:	00b5      	lslls	r5, r6, #2
 8000b78:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000b7c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b7e:	fa09 f805 	lsl.w	r8, r9, r5
 8000b82:	ea2b 0808 	bic.w	r8, fp, r8
 8000b86:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b8a:	bf88      	it	hi
 8000b8c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b90:	ea48 0505 	orr.w	r5, r8, r5
 8000b94:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b98:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000b9c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000ba0:	d04e      	beq.n	8000c40 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba2:	4d47      	ldr	r5, [pc, #284]	; (8000cc0 <HAL_GPIO_Init+0x1a4>)
 8000ba4:	4f46      	ldr	r7, [pc, #280]	; (8000cc0 <HAL_GPIO_Init+0x1a4>)
 8000ba6:	69ad      	ldr	r5, [r5, #24]
 8000ba8:	f026 0803 	bic.w	r8, r6, #3
 8000bac:	f045 0501 	orr.w	r5, r5, #1
 8000bb0:	61bd      	str	r5, [r7, #24]
 8000bb2:	69bd      	ldr	r5, [r7, #24]
 8000bb4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000bb8:	f005 0501 	and.w	r5, r5, #1
 8000bbc:	9501      	str	r5, [sp, #4]
 8000bbe:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bc2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bc8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000bcc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bd0:	fa09 f90b 	lsl.w	r9, r9, fp
 8000bd4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bd8:	4d3a      	ldr	r5, [pc, #232]	; (8000cc4 <HAL_GPIO_Init+0x1a8>)
 8000bda:	42a8      	cmp	r0, r5
 8000bdc:	d068      	beq.n	8000cb0 <HAL_GPIO_Init+0x194>
 8000bde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000be2:	42a8      	cmp	r0, r5
 8000be4:	d066      	beq.n	8000cb4 <HAL_GPIO_Init+0x198>
 8000be6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bea:	42a8      	cmp	r0, r5
 8000bec:	d064      	beq.n	8000cb8 <HAL_GPIO_Init+0x19c>
 8000bee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bf2:	42a8      	cmp	r0, r5
 8000bf4:	bf0c      	ite	eq
 8000bf6:	2503      	moveq	r5, #3
 8000bf8:	2504      	movne	r5, #4
 8000bfa:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bfe:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000c02:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c06:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c08:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000c0c:	bf14      	ite	ne
 8000c0e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c10:	43a5      	biceq	r5, r4
 8000c12:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c14:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c16:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c1a:	bf14      	ite	ne
 8000c1c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c1e:	43a5      	biceq	r5, r4
 8000c20:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c22:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c24:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c28:	bf14      	ite	ne
 8000c2a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2c:	43a5      	biceq	r5, r4
 8000c2e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c30:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c32:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c36:	bf14      	ite	ne
 8000c38:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c3a:	ea25 0404 	biceq.w	r4, r5, r4
 8000c3e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c40:	3601      	adds	r6, #1
 8000c42:	2e10      	cmp	r6, #16
 8000c44:	f47f af73 	bne.w	8000b2e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000c48:	b003      	add	sp, #12
 8000c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000c4e:	2d03      	cmp	r5, #3
 8000c50:	d022      	beq.n	8000c98 <HAL_GPIO_Init+0x17c>
 8000c52:	2d11      	cmp	r5, #17
 8000c54:	d184      	bne.n	8000b60 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c56:	68ca      	ldr	r2, [r1, #12]
 8000c58:	3204      	adds	r2, #4
          break;
 8000c5a:	e781      	b.n	8000b60 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000c5c:	4f1a      	ldr	r7, [pc, #104]	; (8000cc8 <HAL_GPIO_Init+0x1ac>)
 8000c5e:	42bd      	cmp	r5, r7
 8000c60:	d009      	beq.n	8000c76 <HAL_GPIO_Init+0x15a>
 8000c62:	d812      	bhi.n	8000c8a <HAL_GPIO_Init+0x16e>
 8000c64:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000cd4 <HAL_GPIO_Init+0x1b8>
 8000c68:	454d      	cmp	r5, r9
 8000c6a:	d004      	beq.n	8000c76 <HAL_GPIO_Init+0x15a>
 8000c6c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000c70:	454d      	cmp	r5, r9
 8000c72:	f47f af75 	bne.w	8000b60 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c76:	688a      	ldr	r2, [r1, #8]
 8000c78:	b1c2      	cbz	r2, 8000cac <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c7a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000c7c:	bf0c      	ite	eq
 8000c7e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c82:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c86:	2208      	movs	r2, #8
 8000c88:	e76a      	b.n	8000b60 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000c8a:	4575      	cmp	r5, lr
 8000c8c:	d0f3      	beq.n	8000c76 <HAL_GPIO_Init+0x15a>
 8000c8e:	4565      	cmp	r5, ip
 8000c90:	d0f1      	beq.n	8000c76 <HAL_GPIO_Init+0x15a>
 8000c92:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000cd8 <HAL_GPIO_Init+0x1bc>
 8000c96:	e7eb      	b.n	8000c70 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e761      	b.n	8000b60 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c9c:	68ca      	ldr	r2, [r1, #12]
          break;
 8000c9e:	e75f      	b.n	8000b60 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ca0:	68ca      	ldr	r2, [r1, #12]
 8000ca2:	3208      	adds	r2, #8
          break;
 8000ca4:	e75c      	b.n	8000b60 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca6:	68ca      	ldr	r2, [r1, #12]
 8000ca8:	320c      	adds	r2, #12
          break;
 8000caa:	e759      	b.n	8000b60 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cac:	2204      	movs	r2, #4
 8000cae:	e757      	b.n	8000b60 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb0:	2500      	movs	r5, #0
 8000cb2:	e7a2      	b.n	8000bfa <HAL_GPIO_Init+0xde>
 8000cb4:	2501      	movs	r5, #1
 8000cb6:	e7a0      	b.n	8000bfa <HAL_GPIO_Init+0xde>
 8000cb8:	2502      	movs	r5, #2
 8000cba:	e79e      	b.n	8000bfa <HAL_GPIO_Init+0xde>
 8000cbc:	40010400 	.word	0x40010400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	10210000 	.word	0x10210000
 8000ccc:	10310000 	.word	0x10310000
 8000cd0:	10320000 	.word	0x10320000
 8000cd4:	10110000 	.word	0x10110000
 8000cd8:	10220000 	.word	0x10220000

08000cdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cdc:	b10a      	cbz	r2, 8000ce2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cde:	6101      	str	r1, [r0, #16]
 8000ce0:	4770      	bx	lr
 8000ce2:	0409      	lsls	r1, r1, #16
 8000ce4:	e7fb      	b.n	8000cde <HAL_GPIO_WritePin+0x2>
	...

08000ce8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce8:	6803      	ldr	r3, [r0, #0]
{
 8000cea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cee:	07db      	lsls	r3, r3, #31
{
 8000cf0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf2:	d410      	bmi.n	8000d16 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	079f      	lsls	r7, r3, #30
 8000cf8:	d45e      	bmi.n	8000db8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cfa:	682b      	ldr	r3, [r5, #0]
 8000cfc:	0719      	lsls	r1, r3, #28
 8000cfe:	f100 8095 	bmi.w	8000e2c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d02:	682b      	ldr	r3, [r5, #0]
 8000d04:	075a      	lsls	r2, r3, #29
 8000d06:	f100 80bf 	bmi.w	8000e88 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d0a:	69ea      	ldr	r2, [r5, #28]
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	f040 812d 	bne.w	8000f6c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000d12:	2000      	movs	r0, #0
 8000d14:	e014      	b.n	8000d40 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d16:	4c90      	ldr	r4, [pc, #576]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000d18:	6863      	ldr	r3, [r4, #4]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d007      	beq.n	8000d32 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d22:	6863      	ldr	r3, [r4, #4]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d10c      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
 8000d2c:	6863      	ldr	r3, [r4, #4]
 8000d2e:	03de      	lsls	r6, r3, #15
 8000d30:	d509      	bpl.n	8000d46 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	039c      	lsls	r4, r3, #14
 8000d36:	d5dd      	bpl.n	8000cf4 <HAL_RCC_OscConfig+0xc>
 8000d38:	686b      	ldr	r3, [r5, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1da      	bne.n	8000cf4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d3e:	2001      	movs	r0, #1
}
 8000d40:	b002      	add	sp, #8
 8000d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d46:	686b      	ldr	r3, [r5, #4]
 8000d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4c:	d110      	bne.n	8000d70 <HAL_RCC_OscConfig+0x88>
 8000d4e:	6823      	ldr	r3, [r4, #0]
 8000d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d56:	f7ff fa43 	bl	80001e0 <HAL_GetTick>
 8000d5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	0398      	lsls	r0, r3, #14
 8000d60:	d4c8      	bmi.n	8000cf4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d62:	f7ff fa3d 	bl	80001e0 <HAL_GetTick>
 8000d66:	1b80      	subs	r0, r0, r6
 8000d68:	2864      	cmp	r0, #100	; 0x64
 8000d6a:	d9f7      	bls.n	8000d5c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	e7e7      	b.n	8000d40 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d70:	b99b      	cbnz	r3, 8000d9a <HAL_RCC_OscConfig+0xb2>
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d78:	6023      	str	r3, [r4, #0]
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d82:	f7ff fa2d 	bl	80001e0 <HAL_GetTick>
 8000d86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	0399      	lsls	r1, r3, #14
 8000d8c:	d5b2      	bpl.n	8000cf4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8e:	f7ff fa27 	bl	80001e0 <HAL_GetTick>
 8000d92:	1b80      	subs	r0, r0, r6
 8000d94:	2864      	cmp	r0, #100	; 0x64
 8000d96:	d9f7      	bls.n	8000d88 <HAL_RCC_OscConfig+0xa0>
 8000d98:	e7e8      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	d103      	bne.n	8000daa <HAL_RCC_OscConfig+0xc2>
 8000da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da6:	6023      	str	r3, [r4, #0]
 8000da8:	e7d1      	b.n	8000d4e <HAL_RCC_OscConfig+0x66>
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dae:	6023      	str	r3, [r4, #0]
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db6:	e7cd      	b.n	8000d54 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000db8:	4c67      	ldr	r4, [pc, #412]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000dba:	6863      	ldr	r3, [r4, #4]
 8000dbc:	f013 0f0c 	tst.w	r3, #12
 8000dc0:	d007      	beq.n	8000dd2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dc2:	6863      	ldr	r3, [r4, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d110      	bne.n	8000dee <HAL_RCC_OscConfig+0x106>
 8000dcc:	6863      	ldr	r3, [r4, #4]
 8000dce:	03da      	lsls	r2, r3, #15
 8000dd0:	d40d      	bmi.n	8000dee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	079b      	lsls	r3, r3, #30
 8000dd6:	d502      	bpl.n	8000dde <HAL_RCC_OscConfig+0xf6>
 8000dd8:	692b      	ldr	r3, [r5, #16]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d1af      	bne.n	8000d3e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	696a      	ldr	r2, [r5, #20]
 8000de2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000de6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000dea:	6023      	str	r3, [r4, #0]
 8000dec:	e785      	b.n	8000cfa <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dee:	692a      	ldr	r2, [r5, #16]
 8000df0:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000df2:	b16a      	cbz	r2, 8000e10 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000df8:	f7ff f9f2 	bl	80001e0 <HAL_GetTick>
 8000dfc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	079f      	lsls	r7, r3, #30
 8000e02:	d4ec      	bmi.n	8000dde <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e04:	f7ff f9ec 	bl	80001e0 <HAL_GetTick>
 8000e08:	1b80      	subs	r0, r0, r6
 8000e0a:	2802      	cmp	r0, #2
 8000e0c:	d9f7      	bls.n	8000dfe <HAL_RCC_OscConfig+0x116>
 8000e0e:	e7ad      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000e10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e12:	f7ff f9e5 	bl	80001e0 <HAL_GetTick>
 8000e16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	0798      	lsls	r0, r3, #30
 8000e1c:	f57f af6d 	bpl.w	8000cfa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e20:	f7ff f9de 	bl	80001e0 <HAL_GetTick>
 8000e24:	1b80      	subs	r0, r0, r6
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9f6      	bls.n	8000e18 <HAL_RCC_OscConfig+0x130>
 8000e2a:	e79f      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e2c:	69aa      	ldr	r2, [r5, #24]
 8000e2e:	4c4a      	ldr	r4, [pc, #296]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000e30:	4b4b      	ldr	r3, [pc, #300]	; (8000f60 <HAL_RCC_OscConfig+0x278>)
 8000e32:	b1da      	cbz	r2, 8000e6c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e38:	f7ff f9d2 	bl	80001e0 <HAL_GetTick>
 8000e3c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e40:	079b      	lsls	r3, r3, #30
 8000e42:	d50d      	bpl.n	8000e60 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e44:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e48:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <HAL_RCC_OscConfig+0x27c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e50:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000e52:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000e54:	9b01      	ldr	r3, [sp, #4]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	9201      	str	r2, [sp, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f9      	bne.n	8000e52 <HAL_RCC_OscConfig+0x16a>
 8000e5e:	e750      	b.n	8000d02 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e60:	f7ff f9be 	bl	80001e0 <HAL_GetTick>
 8000e64:	1b80      	subs	r0, r0, r6
 8000e66:	2802      	cmp	r0, #2
 8000e68:	d9e9      	bls.n	8000e3e <HAL_RCC_OscConfig+0x156>
 8000e6a:	e77f      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e6e:	f7ff f9b7 	bl	80001e0 <HAL_GetTick>
 8000e72:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e76:	079f      	lsls	r7, r3, #30
 8000e78:	f57f af43 	bpl.w	8000d02 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e7c:	f7ff f9b0 	bl	80001e0 <HAL_GetTick>
 8000e80:	1b80      	subs	r0, r0, r6
 8000e82:	2802      	cmp	r0, #2
 8000e84:	d9f6      	bls.n	8000e74 <HAL_RCC_OscConfig+0x18c>
 8000e86:	e771      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e88:	4c33      	ldr	r4, [pc, #204]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	69e3      	ldr	r3, [r4, #28]
 8000e8c:	00d8      	lsls	r0, r3, #3
 8000e8e:	d424      	bmi.n	8000eda <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e90:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	69e3      	ldr	r3, [r4, #28]
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	61e3      	str	r3, [r4, #28]
 8000e9a:	69e3      	ldr	r3, [r4, #28]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	4e30      	ldr	r6, [pc, #192]	; (8000f68 <HAL_RCC_OscConfig+0x280>)
 8000ea6:	6833      	ldr	r3, [r6, #0]
 8000ea8:	05d9      	lsls	r1, r3, #23
 8000eaa:	d518      	bpl.n	8000ede <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eac:	68eb      	ldr	r3, [r5, #12]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d126      	bne.n	8000f00 <HAL_RCC_OscConfig+0x218>
 8000eb2:	6a23      	ldr	r3, [r4, #32]
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000eba:	f7ff f991 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ebe:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ec2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec4:	6a23      	ldr	r3, [r4, #32]
 8000ec6:	079b      	lsls	r3, r3, #30
 8000ec8:	d53f      	bpl.n	8000f4a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000eca:	2f00      	cmp	r7, #0
 8000ecc:	f43f af1d 	beq.w	8000d0a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed0:	69e3      	ldr	r3, [r4, #28]
 8000ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	61e3      	str	r3, [r4, #28]
 8000ed8:	e717      	b.n	8000d0a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000eda:	2700      	movs	r7, #0
 8000edc:	e7e2      	b.n	8000ea4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ede:	6833      	ldr	r3, [r6, #0]
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ee6:	f7ff f97b 	bl	80001e0 <HAL_GetTick>
 8000eea:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eec:	6833      	ldr	r3, [r6, #0]
 8000eee:	05da      	lsls	r2, r3, #23
 8000ef0:	d4dc      	bmi.n	8000eac <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef2:	f7ff f975 	bl	80001e0 <HAL_GetTick>
 8000ef6:	eba0 0008 	sub.w	r0, r0, r8
 8000efa:	2864      	cmp	r0, #100	; 0x64
 8000efc:	d9f6      	bls.n	8000eec <HAL_RCC_OscConfig+0x204>
 8000efe:	e735      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f00:	b9ab      	cbnz	r3, 8000f2e <HAL_RCC_OscConfig+0x246>
 8000f02:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f04:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	6223      	str	r3, [r4, #32]
 8000f0e:	6a23      	ldr	r3, [r4, #32]
 8000f10:	f023 0304 	bic.w	r3, r3, #4
 8000f14:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f16:	f7ff f963 	bl	80001e0 <HAL_GetTick>
 8000f1a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1c:	6a23      	ldr	r3, [r4, #32]
 8000f1e:	0798      	lsls	r0, r3, #30
 8000f20:	d5d3      	bpl.n	8000eca <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f22:	f7ff f95d 	bl	80001e0 <HAL_GetTick>
 8000f26:	1b80      	subs	r0, r0, r6
 8000f28:	4540      	cmp	r0, r8
 8000f2a:	d9f7      	bls.n	8000f1c <HAL_RCC_OscConfig+0x234>
 8000f2c:	e71e      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	6a23      	ldr	r3, [r4, #32]
 8000f32:	d103      	bne.n	8000f3c <HAL_RCC_OscConfig+0x254>
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6223      	str	r3, [r4, #32]
 8000f3a:	e7ba      	b.n	8000eb2 <HAL_RCC_OscConfig+0x1ca>
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	6223      	str	r3, [r4, #32]
 8000f42:	6a23      	ldr	r3, [r4, #32]
 8000f44:	f023 0304 	bic.w	r3, r3, #4
 8000f48:	e7b6      	b.n	8000eb8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff f949 	bl	80001e0 <HAL_GetTick>
 8000f4e:	eba0 0008 	sub.w	r0, r0, r8
 8000f52:	42b0      	cmp	r0, r6
 8000f54:	d9b6      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x1dc>
 8000f56:	e709      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	42420000 	.word	0x42420000
 8000f60:	42420480 	.word	0x42420480
 8000f64:	20000020 	.word	0x20000020
 8000f68:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f6c:	4c22      	ldr	r4, [pc, #136]	; (8000ff8 <HAL_RCC_OscConfig+0x310>)
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	f43f aee2 	beq.w	8000d3e <HAL_RCC_OscConfig+0x56>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	4e1f      	ldr	r6, [pc, #124]	; (8000ffc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f80:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f82:	d12b      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f84:	f7ff f92c 	bl	80001e0 <HAL_GetTick>
 8000f88:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	0199      	lsls	r1, r3, #6
 8000f8e:	d41f      	bmi.n	8000fd0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f90:	6a2b      	ldr	r3, [r5, #32]
 8000f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f96:	d105      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f98:	6862      	ldr	r2, [r4, #4]
 8000f9a:	68a9      	ldr	r1, [r5, #8]
 8000f9c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000fa6:	6862      	ldr	r2, [r4, #4]
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fb6:	f7ff f913 	bl	80001e0 <HAL_GetTick>
 8000fba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	019a      	lsls	r2, r3, #6
 8000fc0:	f53f aea7 	bmi.w	8000d12 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc4:	f7ff f90c 	bl	80001e0 <HAL_GetTick>
 8000fc8:	1b40      	subs	r0, r0, r5
 8000fca:	2802      	cmp	r0, #2
 8000fcc:	d9f6      	bls.n	8000fbc <HAL_RCC_OscConfig+0x2d4>
 8000fce:	e6cd      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd0:	f7ff f906 	bl	80001e0 <HAL_GetTick>
 8000fd4:	1bc0      	subs	r0, r0, r7
 8000fd6:	2802      	cmp	r0, #2
 8000fd8:	d9d7      	bls.n	8000f8a <HAL_RCC_OscConfig+0x2a2>
 8000fda:	e6c7      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000fdc:	f7ff f900 	bl	80001e0 <HAL_GetTick>
 8000fe0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	f57f ae94 	bpl.w	8000d12 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff f8f9 	bl	80001e0 <HAL_GetTick>
 8000fee:	1b40      	subs	r0, r0, r5
 8000ff0:	2802      	cmp	r0, #2
 8000ff2:	d9f6      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x2fa>
 8000ff4:	e6ba      	b.n	8000d6c <HAL_RCC_OscConfig+0x84>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	42420060 	.word	0x42420060

08001000 <HAL_RCC_GetSysClockFreq>:
{
 8001000:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001004:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001006:	ac02      	add	r4, sp, #8
 8001008:	f103 0510 	add.w	r5, r3, #16
 800100c:	4622      	mov	r2, r4
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	6859      	ldr	r1, [r3, #4]
 8001012:	3308      	adds	r3, #8
 8001014:	c203      	stmia	r2!, {r0, r1}
 8001016:	42ab      	cmp	r3, r5
 8001018:	4614      	mov	r4, r2
 800101a:	d1f7      	bne.n	800100c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800101c:	2301      	movs	r3, #1
 800101e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001022:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001024:	4911      	ldr	r1, [pc, #68]	; (800106c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001026:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800102a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800102c:	f003 020c 	and.w	r2, r3, #12
 8001030:	2a08      	cmp	r2, #8
 8001032:	d117      	bne.n	8001064 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001034:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001038:	a806      	add	r0, sp, #24
 800103a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800103c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800103e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001042:	d50c      	bpl.n	800105e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001044:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001046:	480a      	ldr	r0, [pc, #40]	; (8001070 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001048:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800104c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800104e:	aa06      	add	r2, sp, #24
 8001050:	4413      	add	r3, r2
 8001052:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001056:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800105a:	b007      	add	sp, #28
 800105c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_RCC_GetSysClockFreq+0x74>)
 8001060:	4350      	muls	r0, r2
 8001062:	e7fa      	b.n	800105a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001066:	e7f8      	b.n	800105a <HAL_RCC_GetSysClockFreq+0x5a>
 8001068:	0800302c 	.word	0x0800302c
 800106c:	40021000 	.word	0x40021000
 8001070:	007a1200 	.word	0x007a1200
 8001074:	003d0900 	.word	0x003d0900

08001078 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001078:	4a4d      	ldr	r2, [pc, #308]	; (80011b0 <HAL_RCC_ClockConfig+0x138>)
{
 800107a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800107e:	6813      	ldr	r3, [r2, #0]
{
 8001080:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	428b      	cmp	r3, r1
{
 8001088:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800108a:	d328      	bcc.n	80010de <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108c:	682a      	ldr	r2, [r5, #0]
 800108e:	0791      	lsls	r1, r2, #30
 8001090:	d432      	bmi.n	80010f8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001092:	07d2      	lsls	r2, r2, #31
 8001094:	d438      	bmi.n	8001108 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001096:	4a46      	ldr	r2, [pc, #280]	; (80011b0 <HAL_RCC_ClockConfig+0x138>)
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	429e      	cmp	r6, r3
 80010a0:	d373      	bcc.n	800118a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a2:	682a      	ldr	r2, [r5, #0]
 80010a4:	4c43      	ldr	r4, [pc, #268]	; (80011b4 <HAL_RCC_ClockConfig+0x13c>)
 80010a6:	f012 0f04 	tst.w	r2, #4
 80010aa:	d179      	bne.n	80011a0 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ac:	0713      	lsls	r3, r2, #28
 80010ae:	d506      	bpl.n	80010be <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010b0:	6863      	ldr	r3, [r4, #4]
 80010b2:	692a      	ldr	r2, [r5, #16]
 80010b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010bc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010be:	f7ff ff9f 	bl	8001000 <HAL_RCC_GetSysClockFreq>
 80010c2:	6863      	ldr	r3, [r4, #4]
 80010c4:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <HAL_RCC_ClockConfig+0x140>)
 80010c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	40d8      	lsrs	r0, r3
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_RCC_ClockConfig+0x144>)
 80010d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff f842 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80010d8:	2000      	movs	r0, #0
}
 80010da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	f023 0307 	bic.w	r3, r3, #7
 80010e4:	430b      	orrs	r3, r1
 80010e6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	4299      	cmp	r1, r3
 80010f0:	d0cc      	beq.n	800108c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
 80010f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f8:	492e      	ldr	r1, [pc, #184]	; (80011b4 <HAL_RCC_ClockConfig+0x13c>)
 80010fa:	68a8      	ldr	r0, [r5, #8]
 80010fc:	684b      	ldr	r3, [r1, #4]
 80010fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001102:	4303      	orrs	r3, r0
 8001104:	604b      	str	r3, [r1, #4]
 8001106:	e7c4      	b.n	8001092 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001108:	686a      	ldr	r2, [r5, #4]
 800110a:	4c2a      	ldr	r4, [pc, #168]	; (80011b4 <HAL_RCC_ClockConfig+0x13c>)
 800110c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001110:	d11c      	bne.n	800114c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001116:	d0ec      	beq.n	80010f2 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001118:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	4313      	orrs	r3, r2
 8001124:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001126:	f7ff f85b 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800112c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112e:	2b01      	cmp	r3, #1
 8001130:	d114      	bne.n	800115c <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b04      	cmp	r3, #4
 800113a:	d0ac      	beq.n	8001096 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113c:	f7ff f850 	bl	80001e0 <HAL_GetTick>
 8001140:	1bc0      	subs	r0, r0, r7
 8001142:	4540      	cmp	r0, r8
 8001144:	d9f5      	bls.n	8001132 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001146:	2003      	movs	r0, #3
 8001148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114c:	2a02      	cmp	r2, #2
 800114e:	d102      	bne.n	8001156 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001150:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001154:	e7df      	b.n	8001116 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	f013 0f02 	tst.w	r3, #2
 800115a:	e7dc      	b.n	8001116 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800115c:	2b02      	cmp	r3, #2
 800115e:	d10f      	bne.n	8001180 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001160:	6863      	ldr	r3, [r4, #4]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b08      	cmp	r3, #8
 8001168:	d095      	beq.n	8001096 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800116a:	f7ff f839 	bl	80001e0 <HAL_GetTick>
 800116e:	1bc0      	subs	r0, r0, r7
 8001170:	4540      	cmp	r0, r8
 8001172:	d9f5      	bls.n	8001160 <HAL_RCC_ClockConfig+0xe8>
 8001174:	e7e7      	b.n	8001146 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001176:	f7ff f833 	bl	80001e0 <HAL_GetTick>
 800117a:	1bc0      	subs	r0, r0, r7
 800117c:	4540      	cmp	r0, r8
 800117e:	d8e2      	bhi.n	8001146 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001180:	6863      	ldr	r3, [r4, #4]
 8001182:	f013 0f0c 	tst.w	r3, #12
 8001186:	d1f6      	bne.n	8001176 <HAL_RCC_ClockConfig+0xfe>
 8001188:	e785      	b.n	8001096 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	6813      	ldr	r3, [r2, #0]
 800118c:	f023 0307 	bic.w	r3, r3, #7
 8001190:	4333      	orrs	r3, r6
 8001192:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001194:	6813      	ldr	r3, [r2, #0]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	429e      	cmp	r6, r3
 800119c:	d1a9      	bne.n	80010f2 <HAL_RCC_ClockConfig+0x7a>
 800119e:	e780      	b.n	80010a2 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a0:	6863      	ldr	r3, [r4, #4]
 80011a2:	68e9      	ldr	r1, [r5, #12]
 80011a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011a8:	430b      	orrs	r3, r1
 80011aa:	6063      	str	r3, [r4, #4]
 80011ac:	e77e      	b.n	80010ac <HAL_RCC_ClockConfig+0x34>
 80011ae:	bf00      	nop
 80011b0:	40022000 	.word	0x40022000
 80011b4:	40021000 	.word	0x40021000
 80011b8:	0800d4b3 	.word	0x0800d4b3
 80011bc:	20000020 	.word	0x20000020

080011c0 <HAL_RCC_GetHCLKFreq>:
}
 80011c0:	4b01      	ldr	r3, [pc, #4]	; (80011c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000020 	.word	0x20000020

080011cc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011cc:	6803      	ldr	r3, [r0, #0]
{
 80011ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011d2:	07d9      	lsls	r1, r3, #31
{
 80011d4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011d6:	d520      	bpl.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d8:	4c35      	ldr	r4, [pc, #212]	; (80012b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011da:	69e3      	ldr	r3, [r4, #28]
 80011dc:	00da      	lsls	r2, r3, #3
 80011de:	d432      	bmi.n	8001246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011e0:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	69e3      	ldr	r3, [r4, #28]
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	61e3      	str	r3, [r4, #28]
 80011ea:	69e3      	ldr	r3, [r4, #28]
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	4e2f      	ldr	r6, [pc, #188]	; (80012b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011f6:	6833      	ldr	r3, [r6, #0]
 80011f8:	05db      	lsls	r3, r3, #23
 80011fa:	d526      	bpl.n	800124a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011fc:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011fe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001202:	d136      	bne.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001204:	6a23      	ldr	r3, [r4, #32]
 8001206:	686a      	ldr	r2, [r5, #4]
 8001208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800120c:	4313      	orrs	r3, r2
 800120e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001210:	b11f      	cbz	r7, 800121a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001212:	69e3      	ldr	r3, [r4, #28]
 8001214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001218:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800121a:	6828      	ldr	r0, [r5, #0]
 800121c:	0783      	lsls	r3, r0, #30
 800121e:	d506      	bpl.n	800122e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001220:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001222:	68a9      	ldr	r1, [r5, #8]
 8001224:	6853      	ldr	r3, [r2, #4]
 8001226:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800122a:	430b      	orrs	r3, r1
 800122c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800122e:	f010 0010 	ands.w	r0, r0, #16
 8001232:	d01b      	beq.n	800126c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001234:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001236:	68e9      	ldr	r1, [r5, #12]
 8001238:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800123a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800123c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001240:	430b      	orrs	r3, r1
 8001242:	6053      	str	r3, [r2, #4]
 8001244:	e012      	b.n	800126c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001246:	2700      	movs	r7, #0
 8001248:	e7d4      	b.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124a:	6833      	ldr	r3, [r6, #0]
 800124c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001250:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001252:	f7fe ffc5 	bl	80001e0 <HAL_GetTick>
 8001256:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	6833      	ldr	r3, [r6, #0]
 800125a:	05d8      	lsls	r0, r3, #23
 800125c:	d4ce      	bmi.n	80011fc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125e:	f7fe ffbf 	bl	80001e0 <HAL_GetTick>
 8001262:	eba0 0008 	sub.w	r0, r0, r8
 8001266:	2864      	cmp	r0, #100	; 0x64
 8001268:	d9f6      	bls.n	8001258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800126a:	2003      	movs	r0, #3
}
 800126c:	b002      	add	sp, #8
 800126e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001272:	686a      	ldr	r2, [r5, #4]
 8001274:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001278:	4293      	cmp	r3, r2
 800127a:	d0c3      	beq.n	8001204 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800127c:	2001      	movs	r0, #1
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001280:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001282:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001284:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001286:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800128a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800128c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800128e:	07d9      	lsls	r1, r3, #31
 8001290:	d5b8      	bpl.n	8001204 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001292:	f7fe ffa5 	bl	80001e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800129a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129c:	6a23      	ldr	r3, [r4, #32]
 800129e:	079a      	lsls	r2, r3, #30
 80012a0:	d4b0      	bmi.n	8001204 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7fe ff9d 	bl	80001e0 <HAL_GetTick>
 80012a6:	1b80      	subs	r0, r0, r6
 80012a8:	4540      	cmp	r0, r8
 80012aa:	d9f7      	bls.n	800129c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80012ac:	e7dd      	b.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40007000 	.word	0x40007000
 80012b8:	42420440 	.word	0x42420440

080012bc <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 80012c0:	b510      	push	{r4, lr}
 80012c2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c4:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012c8:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012cc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d6:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012dc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012de:	f7ff fd03 	bl	8000ce8 <HAL_RCC_OscConfig>
 80012e2:	b100      	cbz	r0, 80012e6 <SystemClock_Config+0x2a>
 80012e4:	e7fe      	b.n	80012e4 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f0:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f2:	4621      	mov	r1, r4
 80012f4:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f6:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f8:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012fa:	f7ff febd 	bl	8001078 <HAL_RCC_ClockConfig>
 80012fe:	b100      	cbz	r0, 8001302 <SystemClock_Config+0x46>
 8001300:	e7fe      	b.n	8001300 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001306:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001308:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800130a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130c:	f7ff ff5e 	bl	80011cc <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4604      	mov	r4, r0
 8001312:	b100      	cbz	r0, 8001316 <SystemClock_Config+0x5a>
 8001314:	e7fe      	b.n	8001314 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001316:	f7ff ff53 	bl	80011c0 <HAL_RCC_GetHCLKFreq>
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001322:	f7ff facd 	bl	80008c0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001326:	2004      	movs	r0, #4
 8001328:	f7ff fae0 	bl	80008ec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800132c:	4622      	mov	r2, r4
 800132e:	4621      	mov	r1, r4
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff fa84 	bl	8000840 <HAL_NVIC_SetPriority>
}
 8001338:	b014      	add	sp, #80	; 0x50
 800133a:	bd10      	pop	{r4, pc}

0800133c <rd_idle>:
void rd_active() {
	HAL_GPIO_WritePin(RD_PORT, RD_PIN, GPIO_PIN_RESET);
}

void rd_idle() {
	HAL_GPIO_WritePin(RD_PORT, RD_PIN, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	4802      	ldr	r0, [pc, #8]	; (8001348 <rd_idle+0xc>)
 8001340:	4611      	mov	r1, r2
 8001342:	f7ff bccb 	b.w	8000cdc <HAL_GPIO_WritePin>
 8001346:	bf00      	nop
 8001348:	40010800 	.word	0x40010800

0800134c <wr_active>:
}

void wr_active() {
	HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2102      	movs	r1, #2
 8001350:	4801      	ldr	r0, [pc, #4]	; (8001358 <wr_active+0xc>)
 8001352:	f7ff bcc3 	b.w	8000cdc <HAL_GPIO_WritePin>
 8001356:	bf00      	nop
 8001358:	40010800 	.word	0x40010800

0800135c <wr_idle>:
}

void wr_idle() {
	HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	2102      	movs	r1, #2
 8001360:	4801      	ldr	r0, [pc, #4]	; (8001368 <wr_idle+0xc>)
 8001362:	f7ff bcbb 	b.w	8000cdc <HAL_GPIO_WritePin>
 8001366:	bf00      	nop
 8001368:	40010800 	.word	0x40010800

0800136c <rs_cmd>:
}

void rs_cmd() {
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2104      	movs	r1, #4
 8001370:	4801      	ldr	r0, [pc, #4]	; (8001378 <rs_cmd+0xc>)
 8001372:	f7ff bcb3 	b.w	8000cdc <HAL_GPIO_WritePin>
 8001376:	bf00      	nop
 8001378:	40010800 	.word	0x40010800

0800137c <rs_data>:
}

void rs_data() {
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2104      	movs	r1, #4
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <rs_data+0xc>)
 8001382:	f7ff bcab 	b.w	8000cdc <HAL_GPIO_WritePin>
 8001386:	bf00      	nop
 8001388:	40010800 	.word	0x40010800

0800138c <cs_active>:
}

void cs_active() {
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2108      	movs	r1, #8
 8001390:	4801      	ldr	r0, [pc, #4]	; (8001398 <cs_active+0xc>)
 8001392:	f7ff bca3 	b.w	8000cdc <HAL_GPIO_WritePin>
 8001396:	bf00      	nop
 8001398:	40010800 	.word	0x40010800

0800139c <cs_idle>:
}

void cs_idle() {
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2108      	movs	r1, #8
 80013a0:	4801      	ldr	r0, [pc, #4]	; (80013a8 <cs_idle+0xc>)
 80013a2:	f7ff bc9b 	b.w	8000cdc <HAL_GPIO_WritePin>
 80013a6:	bf00      	nop
 80013a8:	40010800 	.word	0x40010800

080013ac <reset_active>:
}

void reset_active() {
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2110      	movs	r1, #16
 80013b0:	4801      	ldr	r0, [pc, #4]	; (80013b8 <reset_active+0xc>)
 80013b2:	f7ff bc93 	b.w	8000cdc <HAL_GPIO_WritePin>
 80013b6:	bf00      	nop
 80013b8:	40010800 	.word	0x40010800

080013bc <reset_idle>:
}

void reset_idle() {
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2110      	movs	r1, #16
 80013c0:	4801      	ldr	r0, [pc, #4]	; (80013c8 <reset_idle+0xc>)
 80013c2:	f7ff bc8b 	b.w	8000cdc <HAL_GPIO_WritePin>
 80013c6:	bf00      	nop
 80013c8:	40010800 	.word	0x40010800

080013cc <wr_strobe>:
}

void wr_strobe() {
 80013cc:	b508      	push	{r3, lr}
	wr_active();
 80013ce:	f7ff ffbd 	bl	800134c <wr_active>
	wr_idle();
}
 80013d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wr_idle();
 80013d6:	f7ff bfc1 	b.w	800135c <wr_idle>
	...

080013dc <write_8>:
	wr_strobe();
	wr_idle();
}

void write_8(uint8_t x) {
	GPIOB->BSRR = 0x0FF0<< 16;
 80013dc:	f04f 637f 	mov.w	r3, #267386880	; 0xff00000
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <write_8+0x24>)
	aux1 = ((x) & 0x03)<<8;
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <write_8+0x28>)
	GPIOB->BSRR = 0x0FF0<< 16;
 80013e4:	6113      	str	r3, [r2, #16]
	aux1 = ((x) & 0x03)<<8;
 80013e6:	0203      	lsls	r3, r0, #8
 80013e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
	aux2 = (x) & 0xFC;
 80013ec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
	aux1 = ((x) & 0x03)<<8;
 80013f0:	800b      	strh	r3, [r1, #0]
	aux2 = (x) & 0xFC;
 80013f2:	4905      	ldr	r1, [pc, #20]	; (8001408 <write_8+0x2c>)
	GPIOB->BSRR = ((aux2 | aux1)<<2) & 0x0FF0;
 80013f4:	4303      	orrs	r3, r0
 80013f6:	009b      	lsls	r3, r3, #2
	aux2 = (x) & 0xFC;
 80013f8:	8008      	strh	r0, [r1, #0]
	GPIOB->BSRR = ((aux2 | aux1)<<2) & 0x0FF0;
 80013fa:	6113      	str	r3, [r2, #16]
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40010c00 	.word	0x40010c00
 8001404:	20000168 	.word	0x20000168
 8001408:	200000d8 	.word	0x200000d8

0800140c <write8>:
void write8(uint8_t x) {
 800140c:	b508      	push	{r3, lr}
	write_8(x);
 800140e:	f7ff ffe5 	bl	80013dc <write_8>
	wr_strobe();
 8001412:	f7ff ffdb 	bl	80013cc <wr_strobe>
}
 8001416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wr_idle();
 800141a:	f7ff bf9f 	b.w	800135c <wr_idle>

0800141e <write16>:
void write16(uint16_t x) {
 800141e:	b510      	push	{r4, lr}
 8001420:	4604      	mov	r4, r0
	write8(h);
 8001422:	0a00      	lsrs	r0, r0, #8
 8001424:	f7ff fff2 	bl	800140c <write8>
	write8(l);
 8001428:	b2e0      	uxtb	r0, r4
}
 800142a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write8(l);
 800142e:	f7ff bfed 	b.w	800140c <write8>

08001432 <writeCmd>:

	flag_adc = 1;
	HAL_ADC_Start_IT(&hadc1);
}

void writeCmd (uint16_t cmd) {
 8001432:	b510      	push	{r4, lr}
 8001434:	4604      	mov	r4, r0
	rs_cmd();
 8001436:	f7ff ff99 	bl	800136c <rs_cmd>
	write16(cmd);
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff ffef 	bl	800141e <write16>
	rs_data();
}
 8001440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rs_data();
 8001444:	f7ff bf9a 	b.w	800137c <rs_data>

08001448 <writeCmdData>:
void writeCmdData(uint16_t cmd, uint16_t dat) {
 8001448:	b538      	push	{r3, r4, r5, lr}
 800144a:	4605      	mov	r5, r0
 800144c:	460c      	mov	r4, r1
    cs_active();
 800144e:	f7ff ff9d 	bl	800138c <cs_active>
    writeCmd(cmd);
 8001452:	4628      	mov	r0, r5
 8001454:	f7ff ffed 	bl	8001432 <writeCmd>

void writeData(uint16_t data) {
	write16(data);
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff ffe0 	bl	800141e <write16>
}
 800145e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cs_idle();
 8001462:	f7ff bf9b 	b.w	800139c <cs_idle>
	...

08001468 <invertDisplay>:
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <invertDisplay+0x30>)
 800146a:	8819      	ldrh	r1, [r3, #0]
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <invertDisplay+0x34>)
 800146e:	f3c1 3100 	ubfx	r1, r1, #12, #1
 8001472:	ea81 0200 	eor.w	r2, r1, r0
 8001476:	801a      	strh	r2, [r3, #0]
    _lcd_drivOut &= ~(1 << 13);
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <invertDisplay+0x38>)
	if (_lcd_rev)
 800147a:	4281      	cmp	r1, r0
    _lcd_drivOut &= ~(1 << 13);
 800147c:	8813      	ldrh	r3, [r2, #0]
	writeCmdData(0x01, _lcd_drivOut);
 800147e:	f04f 0001 	mov.w	r0, #1
    _lcd_drivOut &= ~(1 << 13);
 8001482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001486:	b29b      	uxth	r3, r3
		_lcd_drivOut |= (1 << 13);
 8001488:	bf18      	it	ne
 800148a:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800148e:	8013      	strh	r3, [r2, #0]
	writeCmdData(0x01, _lcd_drivOut);
 8001490:	8811      	ldrh	r1, [r2, #0]
 8001492:	f7ff bfd9 	b.w	8001448 <writeCmdData>
 8001496:	bf00      	nop
 8001498:	200000c6 	.word	0x200000c6
 800149c:	200000d0 	.word	0x200000d0
 80014a0:	200000c4 	.word	0x200000c4

080014a4 <init_table16>:
void init_table16(const uint16_t table[], int16_t size) {
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	4606      	mov	r6, r0
 80014a8:	460d      	mov	r5, r1
	int16_t i = 0;
 80014aa:	2400      	movs	r4, #0
	while (size > 0) {
 80014ac:	2d00      	cmp	r5, #0
 80014ae:	dc00      	bgt.n	80014b2 <init_table16+0xe>
}
 80014b0:	bd70      	pop	{r4, r5, r6, pc}
		int16_t d = table[i+1];
 80014b2:	eb06 0344 	add.w	r3, r6, r4, lsl #1
		writeCmdData(cmd, d);                      //static function
 80014b6:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 80014ba:	8859      	ldrh	r1, [r3, #2]
 80014bc:	3d04      	subs	r5, #4
 80014be:	3402      	adds	r4, #2
 80014c0:	f7ff ffc2 	bl	8001448 <writeCmdData>
 80014c4:	b22d      	sxth	r5, r5
 80014c6:	b224      	sxth	r4, r4
 80014c8:	e7f0      	b.n	80014ac <init_table16+0x8>

080014ca <vertScroll>:
void vertScroll (int16_t top, int16_t scrollines, int16_t offset) {
 80014ca:	460b      	mov	r3, r1
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 80014cc:	4249      	negs	r1, r1
 80014ce:	428a      	cmp	r2, r1
 80014d0:	dd0b      	ble.n	80014ea <vertScroll+0x20>
 80014d2:	429a      	cmp	r2, r3
 80014d4:	bfa8      	it	ge
 80014d6:	2200      	movge	r2, #0
    vsp = top + offset; // vertical start position
 80014d8:	4410      	add	r0, r2
 80014da:	b281      	uxth	r1, r0
	if (offset < 0)
 80014dc:	2a00      	cmp	r2, #0
		vsp += scrollines;          //keep in unsigned range
 80014de:	bfbc      	itt	lt
 80014e0:	18c9      	addlt	r1, r1, r3
 80014e2:	b289      	uxthlt	r1, r1
	writeCmdData(0x41, vsp);        //VL#
 80014e4:	2041      	movs	r0, #65	; 0x41
 80014e6:	f7ff bfaf 	b.w	8001448 <writeCmdData>
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 80014ea:	2200      	movs	r2, #0
 80014ec:	e7f4      	b.n	80014d8 <vertScroll+0xe>
	...

080014f0 <setAddrWindow>:
void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1) {
 80014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f2:	460e      	mov	r6, r1
 80014f4:	4617      	mov	r7, r2
 80014f6:	4604      	mov	r4, r0
 80014f8:	461d      	mov	r5, r3
    writeCmdData(_MC, x);
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <setAddrWindow+0x78>)
 80014fc:	b281      	uxth	r1, r0
 80014fe:	8818      	ldrh	r0, [r3, #0]
 8001500:	f7ff ffa2 	bl	8001448 <writeCmdData>
    writeCmdData(_MP, y);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <setAddrWindow+0x7c>)
 8001506:	b2b1      	uxth	r1, r6
 8001508:	8818      	ldrh	r0, [r3, #0]
 800150a:	f7ff ff9d 	bl	8001448 <writeCmdData>
    if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800150e:	42bc      	cmp	r4, r7
 8001510:	d101      	bne.n	8001516 <setAddrWindow+0x26>
 8001512:	42ae      	cmp	r6, r5
 8001514:	d026      	beq.n	8001564 <setAddrWindow+0x74>
        if (_lcd_capable & XSA_XEA_16BIT) {
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <setAddrWindow+0x80>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	069a      	lsls	r2, r3, #26
 800151c:	d50c      	bpl.n	8001538 <setAddrWindow+0x48>
            if (rotation & 1)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <setAddrWindow+0x84>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	07db      	lsls	r3, r3, #31
                y1 = y = (y1 << 8) | y;
 8001524:	bf4b      	itete	mi
 8001526:	ea46 2505 	orrmi.w	r5, r6, r5, lsl #8
                x1 = x = (x1 << 8) | x;
 800152a:	ea44 2407 	orrpl.w	r4, r4, r7, lsl #8
                y1 = y = (y1 << 8) | y;
 800152e:	b22e      	sxthmi	r6, r5
                x1 = x = (x1 << 8) | x;
 8001530:	b224      	sxthpl	r4, r4
                y1 = y = (y1 << 8) | y;
 8001532:	bf4c      	ite	mi
 8001534:	4635      	movmi	r5, r6
                x1 = x = (x1 << 8) | x;
 8001536:	4627      	movpl	r7, r4
        writeCmdData(_SC, x);
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <setAddrWindow+0x88>)
 800153a:	b2a1      	uxth	r1, r4
 800153c:	8800      	ldrh	r0, [r0, #0]
 800153e:	f7ff ff83 	bl	8001448 <writeCmdData>
        writeCmdData(_SP, y);
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <setAddrWindow+0x8c>)
 8001544:	b2b1      	uxth	r1, r6
 8001546:	8800      	ldrh	r0, [r0, #0]
 8001548:	f7ff ff7e 	bl	8001448 <writeCmdData>
        writeCmdData(_EC, x1);
 800154c:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <setAddrWindow+0x90>)
 800154e:	b2b9      	uxth	r1, r7
 8001550:	8810      	ldrh	r0, [r2, #0]
 8001552:	f7ff ff79 	bl	8001448 <writeCmdData>
        writeCmdData(_EP, y1);
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <setAddrWindow+0x94>)
 8001558:	b2a9      	uxth	r1, r5
 800155a:	8818      	ldrh	r0, [r3, #0]
}
 800155c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        writeCmdData(_EP, y1);
 8001560:	f7ff bf72 	b.w	8001448 <writeCmdData>
 8001564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001566:	bf00      	nop
 8001568:	20000010 	.word	0x20000010
 800156c:	20000012 	.word	0x20000012
 8001570:	200000c6 	.word	0x200000c6
 8001574:	20000150 	.word	0x20000150
 8001578:	20000016 	.word	0x20000016
 800157c:	20000018 	.word	0x20000018
 8001580:	2000000c 	.word	0x2000000c
 8001584:	2000000e 	.word	0x2000000e

08001588 <drawPixel>:
{
 8001588:	b570      	push	{r4, r5, r6, lr}
    if (rotation & 1) {
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <drawPixel+0x60>)
{
 800158c:	460d      	mov	r5, r1
    if (rotation & 1) {
 800158e:	781b      	ldrb	r3, [r3, #0]
{
 8001590:	4616      	mov	r6, r2
    if (rotation & 1) {
 8001592:	07db      	lsls	r3, r3, #31
 8001594:	d518      	bpl.n	80015c8 <drawPixel+0x40>
    	if (x < 0 || y < 0 || x >= HEIGHT || y >= WIDTH)
 8001596:	2800      	cmp	r0, #0
 8001598:	db25      	blt.n	80015e6 <drawPixel+0x5e>
 800159a:	2900      	cmp	r1, #0
 800159c:	db23      	blt.n	80015e6 <drawPixel+0x5e>
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <drawPixel+0x64>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	4298      	cmp	r0, r3
 80015a4:	da1f      	bge.n	80015e6 <drawPixel+0x5e>
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <drawPixel+0x68>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	4299      	cmp	r1, r3
 80015ac:	da1b      	bge.n	80015e6 <drawPixel+0x5e>
    	setAddrWindow(y, x, y, x);
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	4601      	mov	r1, r0
 80015b4:	4628      	mov	r0, r5
    	setAddrWindow(x, y, x, y);
 80015b6:	f7ff ff9b 	bl	80014f0 <setAddrWindow>
    writeCmdData(_MW, color);
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <drawPixel+0x6c>)
 80015bc:	4631      	mov	r1, r6
}
 80015be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    writeCmdData(_MW, color);
 80015c2:	8818      	ldrh	r0, [r3, #0]
 80015c4:	f7ff bf40 	b.w	8001448 <writeCmdData>
    	if (x < 0 || y < 0 || x >= WIDTH || y >= HEIGHT)
 80015c8:	2800      	cmp	r0, #0
 80015ca:	db0c      	blt.n	80015e6 <drawPixel+0x5e>
 80015cc:	2900      	cmp	r1, #0
 80015ce:	db0a      	blt.n	80015e6 <drawPixel+0x5e>
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <drawPixel+0x68>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	4298      	cmp	r0, r3
 80015d6:	da06      	bge.n	80015e6 <drawPixel+0x5e>
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <drawPixel+0x64>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	4299      	cmp	r1, r3
 80015de:	da02      	bge.n	80015e6 <drawPixel+0x5e>
    	setAddrWindow(x, y, x, y);
 80015e0:	460b      	mov	r3, r1
 80015e2:	4602      	mov	r2, r0
 80015e4:	e7e7      	b.n	80015b6 <drawPixel+0x2e>
 80015e6:	bd70      	pop	{r4, r5, r6, pc}
 80015e8:	20000150 	.word	0x20000150
 80015ec:	20000008 	.word	0x20000008
 80015f0:	2000000a 	.word	0x2000000a
 80015f4:	20000014 	.word	0x20000014

080015f8 <drawCross>:
void drawCross(int16_t x, int16_t y, uint16_t color, uint16_t textbgcolor) {
 80015f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015fc:	4607      	mov	r7, r0
 80015fe:	460e      	mov	r6, r1
 8001600:	4690      	mov	r8, r2
 8001602:	4699      	mov	r9, r3
 8001604:	2400      	movs	r4, #0
			if(cross_icon[j][14-i] == 1) {
 8001606:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
void drawCross(int16_t x, int16_t y, uint16_t color, uint16_t textbgcolor) {
 800160a:	f04f 0a00 	mov.w	sl, #0
 800160e:	00a3      	lsls	r3, r4, #2
 8001610:	1935      	adds	r5, r6, r4
 8001612:	9301      	str	r3, [sp, #4]
				drawPixel(x+j, y+i, textbgcolor);
 8001614:	b22d      	sxth	r5, r5
			if(cross_icon[j][14-i] == 1) {
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <drawCross+0x54>)
 8001618:	9a01      	ldr	r2, [sp, #4]
 800161a:	eb0a 0007 	add.w	r0, sl, r7
 800161e:	1a9a      	subs	r2, r3, r2
 8001620:	fb0b 220a 	mla	r2, fp, sl, r2
 8001624:	6b92      	ldr	r2, [r2, #56]	; 0x38
				drawPixel(x+j, y+i, textbgcolor);
 8001626:	4629      	mov	r1, r5
			if(cross_icon[j][14-i] == 1) {
 8001628:	2a01      	cmp	r2, #1
				drawPixel(x+j, y+i, color);
 800162a:	bf0c      	ite	eq
 800162c:	4642      	moveq	r2, r8
				drawPixel(x+j, y+i, textbgcolor);
 800162e:	464a      	movne	r2, r9
 8001630:	b200      	sxth	r0, r0
 8001632:	f10a 0a01 	add.w	sl, sl, #1
 8001636:	f7ff ffa7 	bl	8001588 <drawPixel>
		for(int8_t j=0; j<15; j++) {
 800163a:	f1ba 0f0f 	cmp.w	sl, #15
 800163e:	d1ea      	bne.n	8001616 <drawCross+0x1e>
 8001640:	3401      	adds	r4, #1
	for(int8_t i=0; i<15; i++) {
 8001642:	2c0f      	cmp	r4, #15
 8001644:	d1e1      	bne.n	800160a <drawCross+0x12>
}
 8001646:	b003      	add	sp, #12
 8001648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800164c:	08003114 	.word	0x08003114

08001650 <setRotation>:
	uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8001650:	4b5d      	ldr	r3, [pc, #372]	; (80017c8 <setRotation+0x178>)
void setRotation(uint8_t r) {
 8001652:	b570      	push	{r4, r5, r6, lr}
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8001654:	4c5d      	ldr	r4, [pc, #372]	; (80017cc <setRotation+0x17c>)
	uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8001656:	881d      	ldrh	r5, [r3, #0]
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8001658:	f000 0303 	and.w	r3, r0, #3
    if (rotation & 1) {
 800165c:	f010 0001 	ands.w	r0, r0, #1
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8001660:	7023      	strb	r3, [r4, #0]
    if (rotation & 1) {
 8001662:	f000 8093 	beq.w	800178c <setRotation+0x13c>
    	HEIGHT = _WIDTH;
 8001666:	21f0      	movs	r1, #240	; 0xf0
 8001668:	4a59      	ldr	r2, [pc, #356]	; (80017d0 <setRotation+0x180>)
    switch (rotation) {
 800166a:	2b02      	cmp	r3, #2
    	HEIGHT = _WIDTH;
 800166c:	8011      	strh	r1, [r2, #0]
    	WIDTH = _HEIGHT;
 800166e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001672:	4a58      	ldr	r2, [pc, #352]	; (80017d4 <setRotation+0x184>)
 8001674:	8011      	strh	r1, [r2, #0]
    switch (rotation) {
 8001676:	d005      	beq.n	8001684 <setRotation+0x34>
 8001678:	2b03      	cmp	r3, #3
 800167a:	d06f      	beq.n	800175c <setRotation+0x10c>
 800167c:	2b01      	cmp	r3, #1
 800167e:	d16f      	bne.n	8001760 <setRotation+0x110>
        val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8001680:	2328      	movs	r3, #40	; 0x28
 8001682:	e000      	b.n	8001686 <setRotation+0x36>
        val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8001684:	2398      	movs	r3, #152	; 0x98
	_MC = 0x4E, _MP = 0x4F, _MW = 0x22, _SC = 0x44, _EC = 0x44, _SP = 0x45, _EP = 0x46;
 8001686:	214e      	movs	r1, #78	; 0x4e
 8001688:	4a53      	ldr	r2, [pc, #332]	; (80017d8 <setRotation+0x188>)
 800168a:	8011      	strh	r1, [r2, #0]
 800168c:	214f      	movs	r1, #79	; 0x4f
 800168e:	4a53      	ldr	r2, [pc, #332]	; (80017dc <setRotation+0x18c>)
 8001690:	8011      	strh	r1, [r2, #0]
 8001692:	2122      	movs	r1, #34	; 0x22
 8001694:	4a52      	ldr	r2, [pc, #328]	; (80017e0 <setRotation+0x190>)
 8001696:	8011      	strh	r1, [r2, #0]
 8001698:	2244      	movs	r2, #68	; 0x44
 800169a:	4952      	ldr	r1, [pc, #328]	; (80017e4 <setRotation+0x194>)
 800169c:	800a      	strh	r2, [r1, #0]
 800169e:	4952      	ldr	r1, [pc, #328]	; (80017e8 <setRotation+0x198>)
 80016a0:	800a      	strh	r2, [r1, #0]
 80016a2:	2145      	movs	r1, #69	; 0x45
 80016a4:	4a51      	ldr	r2, [pc, #324]	; (80017ec <setRotation+0x19c>)
 80016a6:	8011      	strh	r1, [r2, #0]
 80016a8:	2146      	movs	r1, #70	; 0x46
 80016aa:	4a51      	ldr	r2, [pc, #324]	; (80017f0 <setRotation+0x1a0>)
 80016ac:	8011      	strh	r1, [r2, #0]
    if (rotation & 1)
 80016ae:	b108      	cbz	r0, 80016b4 <setRotation+0x64>
    	val ^= 0xD0;    // exchange Landscape modes
 80016b0:	f083 03d0 	eor.w	r3, r3, #208	; 0xd0
	GS = (val & 0x80) ? (1 << 14) | (1 << 12) : 0;      //called TB (top-bottom)
 80016b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016b8:	bf14      	ite	ne
 80016ba:	f44f 42a0 	movne.w	r2, #20480	; 0x5000
 80016be:	2200      	moveq	r2, #0
	SS_v = (val & 0x40) ? (1 << 9) : 0;   //called RL (right-left)
 80016c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80016c4:	bf14      	ite	ne
 80016c6:	f44f 7000 	movne.w	r0, #512	; 0x200
 80016ca:	2000      	moveq	r0, #0
	_lcd_drivOut = GS | SS_v | (REV << 13) | 0x013F;      //REV=0, BGR=0, MUX=319
 80016cc:	f240 113f 	movw	r1, #319	; 0x13f
	ORG = (val & 0x20) ? (1 << 3) : 0;  //called AM
 80016d0:	f013 0f20 	tst.w	r3, #32
 80016d4:	bf14      	ite	ne
 80016d6:	2608      	movne	r6, #8
 80016d8:	2600      	moveq	r6, #0
	_lcd_drivOut = GS | SS_v | (REV << 13) | 0x013F;      //REV=0, BGR=0, MUX=319
 80016da:	ea42 0300 	orr.w	r3, r2, r0
 80016de:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
 80016e2:	4319      	orrs	r1, r3
		_lcd_drivOut |= 0x0800; //BGR
 80016e4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80016e8:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <setRotation+0x1a4>)
 80016ea:	b289      	uxth	r1, r1
	writeCmdData(0x01, _lcd_drivOut);   // set Driver Output Control
 80016ec:	2001      	movs	r0, #1
		_lcd_drivOut |= 0x0800; //BGR
 80016ee:	8019      	strh	r1, [r3, #0]
	writeCmdData(0x01, _lcd_drivOut);   // set Driver Output Control
 80016f0:	f7ff feaa 	bl	8001448 <writeCmdData>
	writeCmdData(0x11, ORG | 0x6070);   // set GRAM write direction.
 80016f4:	f446 41c0 	orr.w	r1, r6, #24576	; 0x6000
 80016f8:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 80016fc:	2011      	movs	r0, #17
 80016fe:	f7ff fea3 	bl	8001448 <writeCmdData>
    if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8001702:	7823      	ldrb	r3, [r4, #0]
 8001704:	07da      	lsls	r2, r3, #31
 8001706:	d515      	bpl.n	8001734 <setRotation+0xe4>
 8001708:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <setRotation+0x1a8>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	055b      	lsls	r3, r3, #21
 800170e:	d411      	bmi.n	8001734 <setRotation+0xe4>
        x = _MC, _MC = _MP, _MP = x;
 8001710:	4a31      	ldr	r2, [pc, #196]	; (80017d8 <setRotation+0x188>)
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <setRotation+0x18c>)
 8001714:	8811      	ldrh	r1, [r2, #0]
 8001716:	8818      	ldrh	r0, [r3, #0]
 8001718:	8019      	strh	r1, [r3, #0]
 800171a:	8010      	strh	r0, [r2, #0]
        x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <setRotation+0x19c>)
 800171e:	4a31      	ldr	r2, [pc, #196]	; (80017e4 <setRotation+0x194>)
 8001720:	8818      	ldrh	r0, [r3, #0]
 8001722:	8811      	ldrh	r1, [r2, #0]
 8001724:	8010      	strh	r0, [r2, #0]
 8001726:	8019      	strh	r1, [r3, #0]
        x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8001728:	4a2f      	ldr	r2, [pc, #188]	; (80017e8 <setRotation+0x198>)
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <setRotation+0x1a0>)
 800172c:	8811      	ldrh	r1, [r2, #0]
 800172e:	8818      	ldrh	r0, [r3, #0]
 8001730:	8019      	strh	r1, [r3, #0]
 8001732:	8010      	strh	r0, [r2, #0]
    setAddrWindow(0, 0, WIDTH - 1, HEIGHT - 1);
 8001734:	2100      	movs	r1, #0
 8001736:	4c26      	ldr	r4, [pc, #152]	; (80017d0 <setRotation+0x180>)
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <setRotation+0x184>)
 800173a:	8823      	ldrh	r3, [r4, #0]
 800173c:	8812      	ldrh	r2, [r2, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	3a01      	subs	r2, #1
 8001742:	4608      	mov	r0, r1
 8001744:	b212      	sxth	r2, r2
 8001746:	b21b      	sxth	r3, r3
 8001748:	f7ff fed2 	bl	80014f0 <setAddrWindow>
    vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 800174c:	2200      	movs	r2, #0
 800174e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8001752:	4610      	mov	r0, r2
}
 8001754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8001758:	f7ff beb7 	b.w	80014ca <vertScroll>
        val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 800175c:	23f8      	movs	r3, #248	; 0xf8
        break;
 800175e:	e792      	b.n	8001686 <setRotation+0x36>
	_MC = 0x4E, _MP = 0x4F, _MW = 0x22, _SC = 0x44, _EC = 0x44, _SP = 0x45, _EP = 0x46;
 8001760:	224e      	movs	r2, #78	; 0x4e
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <setRotation+0x188>)
 8001764:	801a      	strh	r2, [r3, #0]
 8001766:	224f      	movs	r2, #79	; 0x4f
 8001768:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <setRotation+0x18c>)
 800176a:	801a      	strh	r2, [r3, #0]
 800176c:	2222      	movs	r2, #34	; 0x22
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <setRotation+0x190>)
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	2344      	movs	r3, #68	; 0x44
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <setRotation+0x194>)
 8001776:	8013      	strh	r3, [r2, #0]
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <setRotation+0x198>)
 800177a:	8013      	strh	r3, [r2, #0]
 800177c:	2245      	movs	r2, #69	; 0x45
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <setRotation+0x19c>)
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	2246      	movs	r2, #70	; 0x46
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <setRotation+0x1a0>)
 8001786:	801a      	strh	r2, [r3, #0]
        val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8001788:	2348      	movs	r3, #72	; 0x48
 800178a:	e791      	b.n	80016b0 <setRotation+0x60>
    switch (rotation) {
 800178c:	2b02      	cmp	r3, #2
 800178e:	f43f af79 	beq.w	8001684 <setRotation+0x34>
 8001792:	2b03      	cmp	r3, #3
 8001794:	d0e2      	beq.n	800175c <setRotation+0x10c>
 8001796:	2b01      	cmp	r3, #1
 8001798:	f43f af72 	beq.w	8001680 <setRotation+0x30>
	_MC = 0x4E, _MP = 0x4F, _MW = 0x22, _SC = 0x44, _EC = 0x44, _SP = 0x45, _EP = 0x46;
 800179c:	224e      	movs	r2, #78	; 0x4e
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <setRotation+0x188>)
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	224f      	movs	r2, #79	; 0x4f
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <setRotation+0x18c>)
 80017a6:	801a      	strh	r2, [r3, #0]
 80017a8:	2222      	movs	r2, #34	; 0x22
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <setRotation+0x190>)
 80017ac:	801a      	strh	r2, [r3, #0]
 80017ae:	2344      	movs	r3, #68	; 0x44
 80017b0:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <setRotation+0x194>)
 80017b2:	8013      	strh	r3, [r2, #0]
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <setRotation+0x198>)
 80017b6:	8013      	strh	r3, [r2, #0]
 80017b8:	2245      	movs	r2, #69	; 0x45
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <setRotation+0x19c>)
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	2246      	movs	r2, #70	; 0x46
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <setRotation+0x1a0>)
 80017c2:	801a      	strh	r2, [r3, #0]
        val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80017c4:	2348      	movs	r3, #72	; 0x48
 80017c6:	e775      	b.n	80016b4 <setRotation+0x64>
 80017c8:	200000d0 	.word	0x200000d0
 80017cc:	20000150 	.word	0x20000150
 80017d0:	20000008 	.word	0x20000008
 80017d4:	2000000a 	.word	0x2000000a
 80017d8:	20000010 	.word	0x20000010
 80017dc:	20000012 	.word	0x20000012
 80017e0:	20000014 	.word	0x20000014
 80017e4:	20000016 	.word	0x20000016
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	20000018 	.word	0x20000018
 80017f0:	2000000e 	.word	0x2000000e
 80017f4:	200000c4 	.word	0x200000c4
 80017f8:	200000c6 	.word	0x200000c6

080017fc <fillRect>:
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80017fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (w < 0) {
 8001800:	2a00      	cmp	r2, #0
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001802:	f8bd 9020 	ldrh.w	r9, [sp, #32]
	if (w < 0) {
 8001806:	da04      	bge.n	8001812 <fillRect+0x16>
		w = -w;
 8001808:	b295      	uxth	r5, r2
 800180a:	426a      	negs	r2, r5
		x -= w;
 800180c:	4428      	add	r0, r5
		w = -w;
 800180e:	b212      	sxth	r2, r2
		x -= w;
 8001810:	b200      	sxth	r0, r0
	if (end > WIDTH)
 8001812:	4d35      	ldr	r5, [pc, #212]	; (80018e8 <fillRect+0xec>)
	end = x + w;
 8001814:	4402      	add	r2, r0
	if (end > WIDTH)
 8001816:	882e      	ldrh	r6, [r5, #0]
	end = x + w;
 8001818:	b212      	sxth	r2, r2
	if (end > WIDTH)
 800181a:	42b2      	cmp	r2, r6
		end = WIDTH;
 800181c:	bfc8      	it	gt
 800181e:	b232      	sxthgt	r2, r6
 8001820:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	w = end - x;
 8001824:	b292      	uxth	r2, r2
 8001826:	1a16      	subs	r6, r2, r0
	if (h < 0) {
 8001828:	2b00      	cmp	r3, #0
	w = end - x;
 800182a:	b236      	sxth	r6, r6
	if (h < 0) {
 800182c:	da04      	bge.n	8001838 <fillRect+0x3c>
		h = -h;
 800182e:	b29f      	uxth	r7, r3
 8001830:	427b      	negs	r3, r7
		y -= h;
 8001832:	4439      	add	r1, r7
		h = -h;
 8001834:	b21b      	sxth	r3, r3
		y -= h;
 8001836:	b209      	sxth	r1, r1
	if (end > HEIGHT)
 8001838:	4f2c      	ldr	r7, [pc, #176]	; (80018ec <fillRect+0xf0>)
	end = y + h;
 800183a:	440b      	add	r3, r1
	if (end > HEIGHT)
 800183c:	f8b7 e000 	ldrh.w	lr, [r7]
	end = y + h;
 8001840:	b21b      	sxth	r3, r3
	if (end > HEIGHT)
 8001842:	4573      	cmp	r3, lr
		end = HEIGHT;
 8001844:	bfc8      	it	gt
 8001846:	fa0f f38e 	sxthgt.w	r3, lr
 800184a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	h = end - y;
 800184e:	b29b      	uxth	r3, r3
 8001850:	eba3 0801 	sub.w	r8, r3, r1
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001854:	3a01      	subs	r2, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	b21b      	sxth	r3, r3
 800185a:	b212      	sxth	r2, r2
 800185c:	f7ff fe48 	bl	80014f0 <setAddrWindow>
	cs_active();
 8001860:	f7ff fd94 	bl	800138c <cs_active>
	writeCmd(_MW);
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <fillRect+0xf4>)
	h = end - y;
 8001866:	fa0f f888 	sxth.w	r8, r8
	writeCmd(_MW);
 800186a:	8818      	ldrh	r0, [r3, #0]
 800186c:	f7ff fde1 	bl	8001432 <writeCmd>
	if (h > w) {
 8001870:	4546      	cmp	r6, r8
 8001872:	bfbe      	ittt	lt
 8001874:	4633      	movlt	r3, r6
 8001876:	4646      	movlt	r6, r8
 8001878:	4698      	movlt	r8, r3
	uint8_t hi = color >> 8, lo = color & 0xFF;
 800187a:	ea4f 2a19 	mov.w	sl, r9, lsr #8
 800187e:	fa5f f989 	uxtb.w	r9, r9
 8001882:	fa1f f888 	uxth.w	r8, r8
	while (h-- > 0) {
 8001886:	fa0f f388 	sxth.w	r3, r8
 800188a:	2b00      	cmp	r3, #0
 800188c:	dc1b      	bgt.n	80018c6 <fillRect+0xca>
    cs_idle();
 800188e:	f7ff fd85 	bl	800139c <cs_idle>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <fillRect+0xf8>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	07da      	lsls	r2, r3, #31
 8001898:	d509      	bpl.n	80018ae <fillRect+0xb2>
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <fillRect+0xfc>)
 800189c:	881a      	ldrh	r2, [r3, #0]
 800189e:	f241 5326 	movw	r3, #5414	; 0x1526
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d11d      	bne.n	80018e2 <fillRect+0xe6>
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <fillRect+0x100>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	07db      	lsls	r3, r3, #31
 80018ac:	d519      	bpl.n	80018e2 <fillRect+0xe6>
        setAddrWindow(0, 0, WIDTH - 1, HEIGHT - 1);
 80018ae:	2100      	movs	r1, #0
 80018b0:	883b      	ldrh	r3, [r7, #0]
 80018b2:	882a      	ldrh	r2, [r5, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	3a01      	subs	r2, #1
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	b212      	sxth	r2, r2
 80018bc:	4608      	mov	r0, r1
}
 80018be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        setAddrWindow(0, 0, WIDTH - 1, HEIGHT - 1);
 80018c2:	f7ff be15 	b.w	80014f0 <setAddrWindow>
 80018c6:	4634      	mov	r4, r6
			write8(hi);
 80018c8:	4650      	mov	r0, sl
 80018ca:	3c01      	subs	r4, #1
 80018cc:	f7ff fd9e 	bl	800140c <write8>
 80018d0:	b224      	sxth	r4, r4
			write8(lo);
 80018d2:	4648      	mov	r0, r9
 80018d4:	f7ff fd9a 	bl	800140c <write8>
		} while (--end != 0);
 80018d8:	2c00      	cmp	r4, #0
 80018da:	d1f5      	bne.n	80018c8 <fillRect+0xcc>
 80018dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80018e0:	e7cf      	b.n	8001882 <fillRect+0x86>
 80018e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018e6:	bf00      	nop
 80018e8:	2000000a 	.word	0x2000000a
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000014 	.word	0x20000014
 80018f4:	200000c6 	.word	0x200000c6
 80018f8:	20000152 	.word	0x20000152
 80018fc:	20000150 	.word	0x20000150

08001900 <fillScreen>:
void fillScreen(uint16_t color) {
 8001900:	b507      	push	{r0, r1, r2, lr}
	fillRect(0, 0, WIDTH, HEIGHT, color);
 8001902:	2100      	movs	r1, #0
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <fillScreen+0x20>)
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <fillScreen+0x24>)
 8001908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001910:	9000      	str	r0, [sp, #0]
 8001912:	4608      	mov	r0, r1
 8001914:	f7ff ff72 	bl	80017fc <fillRect>
}
 8001918:	b003      	add	sp, #12
 800191a:	f85d fb04 	ldr.w	pc, [sp], #4
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008
 8001924:	2000000a 	.word	0x2000000a

08001928 <drawChar>:
void drawChar(uint16_t WIDTH, uint16_t HEIGHT, int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t textbgcolor, uint8_t size) {
 8001928:	21a0      	movs	r1, #160	; 0xa0
 800192a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800192e:	b08b      	sub	sp, #44	; 0x2c
 8001930:	9309      	str	r3, [sp, #36]	; 0x24
 8001932:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
	for(int8_t i=0; i<8; i++) {
 8001936:	2600      	movs	r6, #0
void drawChar(uint16_t WIDTH, uint16_t HEIGHT, int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t textbgcolor, uint8_t size) {
 8001938:	9305      	str	r3, [sp, #20]
 800193a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800193e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8001942:	9306      	str	r3, [sp, #24]
 8001944:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8001948:	fa1f fa82 	uxth.w	sl, r2
 800194c:	434b      	muls	r3, r1
 800194e:	9307      	str	r3, [sp, #28]
					fillRect(x+j*size, y+i*size, size, size, textbgcolor);
 8001950:	2308      	movs	r3, #8
 8001952:	9304      	str	r3, [sp, #16]
 8001954:	46d0      	mov	r8, sl
 8001956:	4657      	mov	r7, sl
 8001958:	2500      	movs	r5, #0
 800195a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800195e:	b2b4      	uxth	r4, r6
 8001960:	fa1f fb89 	uxth.w	fp, r9
 8001964:	fb04 320b 	mla	r2, r4, fp, r3
 8001968:	b212      	sxth	r2, r2
 800196a:	9203      	str	r2, [sp, #12]
 800196c:	9a07      	ldr	r2, [sp, #28]
					drawPixel(x+j, y+i, textbgcolor);
 800196e:	441c      	add	r4, r3
 8001970:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 8001974:	9208      	str	r2, [sp, #32]
 8001976:	b224      	sxth	r4, r4
			if(font[c][j][7-i] == 1) {
 8001978:	9b08      	ldr	r3, [sp, #32]
 800197a:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <drawChar+0xd0>)
 800197c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8001980:	4413      	add	r3, r2
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d126      	bne.n	80019d6 <drawChar+0xae>
				if (size == 1)
 8001988:	f1b9 0f01 	cmp.w	r9, #1
 800198c:	d119      	bne.n	80019c2 <drawChar+0x9a>
					drawPixel(x+j, y+i, color);
 800198e:	9a05      	ldr	r2, [sp, #20]
 8001990:	eb0a 0005 	add.w	r0, sl, r5
					drawPixel(x+j, y+i, textbgcolor);
 8001994:	4621      	mov	r1, r4
 8001996:	b200      	sxth	r0, r0
 8001998:	f7ff fdf6 	bl	8001588 <drawPixel>
 800199c:	3501      	adds	r5, #1
 800199e:	445f      	add	r7, fp
 80019a0:	44d8      	add	r8, fp
		for(int8_t j=0; j<5; j++) {
 80019a2:	2d05      	cmp	r5, #5
 80019a4:	b2bf      	uxth	r7, r7
 80019a6:	fa1f f888 	uxth.w	r8, r8
 80019aa:	d1e5      	bne.n	8001978 <drawChar+0x50>
 80019ac:	9b04      	ldr	r3, [sp, #16]
	for(int8_t i=0; i<8; i++) {
 80019ae:	3601      	adds	r6, #1
 80019b0:	3b01      	subs	r3, #1
 80019b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80019b6:	b276      	sxtb	r6, r6
 80019b8:	9304      	str	r3, [sp, #16]
 80019ba:	d1cb      	bne.n	8001954 <drawChar+0x2c>
}
 80019bc:	b00b      	add	sp, #44	; 0x2c
 80019be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					fillRect(x+j*size, y+i*size, size, size, color);
 80019c2:	9a05      	ldr	r2, [sp, #20]
 80019c4:	fa0f f389 	sxth.w	r3, r9
 80019c8:	9200      	str	r2, [sp, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	9903      	ldr	r1, [sp, #12]
 80019ce:	b238      	sxth	r0, r7
					fillRect(x+j*size, y+i*size, size, size, textbgcolor);
 80019d0:	f7ff ff14 	bl	80017fc <fillRect>
 80019d4:	e7e2      	b.n	800199c <drawChar+0x74>
				if (size == 1)
 80019d6:	f1b9 0f01 	cmp.w	r9, #1
 80019da:	d103      	bne.n	80019e4 <drawChar+0xbc>
					drawPixel(x+j, y+i, textbgcolor);
 80019dc:	eb0a 0005 	add.w	r0, sl, r5
 80019e0:	9a06      	ldr	r2, [sp, #24]
 80019e2:	e7d7      	b.n	8001994 <drawChar+0x6c>
					fillRect(x+j*size, y+i*size, size, size, textbgcolor);
 80019e4:	9a06      	ldr	r2, [sp, #24]
 80019e6:	fa0f f389 	sxth.w	r3, r9
 80019ea:	9200      	str	r2, [sp, #0]
 80019ec:	9903      	ldr	r1, [sp, #12]
 80019ee:	461a      	mov	r2, r3
 80019f0:	fa0f f088 	sxth.w	r0, r8
 80019f4:	e7ec      	b.n	80019d0 <drawChar+0xa8>
 80019f6:	bf00      	nop
 80019f8:	08003498 	.word	0x08003498

080019fc <write>:
void write(uint8_t c) {
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(c == '\n') {                        // Newline?
 80019fe:	280a      	cmp	r0, #10
void write(uint8_t c) {
 8001a00:	b085      	sub	sp, #20
    if(c == '\n') {                        // Newline?
 8001a02:	d10b      	bne.n	8001a1c <write+0x20>
        cursor_x  = 0;                     // Reset x to zero,
 8001a04:	2200      	movs	r2, #0
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <write+0x8c>)
 8001a08:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize * 8;          // advance y one line
 8001a0a:	4a20      	ldr	r2, [pc, #128]	; (8001a8c <write+0x90>)
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <write+0x94>)
 8001a0e:	7819      	ldrb	r1, [r3, #0]
 8001a10:	8813      	ldrh	r3, [r2, #0]
 8001a12:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001a16:	8013      	strh	r3, [r2, #0]
}
 8001a18:	b005      	add	sp, #20
 8001a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(c != '\r') {                 // Ignore carriage returns
 8001a1c:	280d      	cmp	r0, #13
 8001a1e:	d0fb      	beq.n	8001a18 <write+0x1c>
        if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <write+0x98>)
 8001a22:	4c19      	ldr	r4, [pc, #100]	; (8001a88 <write+0x8c>)
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	4d1a      	ldr	r5, [pc, #104]	; (8001a90 <write+0x94>)
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <write+0x90>)
 8001a2a:	b182      	cbz	r2, 8001a4e <write+0x52>
 8001a2c:	2106      	movs	r1, #6
 8001a2e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8001a32:	782e      	ldrb	r6, [r5, #0]
 8001a34:	fb01 2106 	mla	r1, r1, r6, r2
 8001a38:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <write+0x9c>)
 8001a3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a3e:	4291      	cmp	r1, r2
 8001a40:	dd05      	ble.n	8001a4e <write+0x52>
            cursor_x  = 0;                 // Reset x to zero,
 8001a42:	2200      	movs	r2, #0
 8001a44:	8022      	strh	r2, [r4, #0]
            cursor_y += textsize * 8;      // advance y one line
 8001a46:	881a      	ldrh	r2, [r3, #0]
 8001a48:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8001a4c:	801a      	strh	r2, [r3, #0]
        drawChar(WIDTH, HEIGHT, cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8001a4e:	782f      	ldrb	r7, [r5, #0]
 8001a50:	4912      	ldr	r1, [pc, #72]	; (8001a9c <write+0xa0>)
 8001a52:	4e13      	ldr	r6, [pc, #76]	; (8001aa0 <write+0xa4>)
 8001a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a58:	8836      	ldrh	r6, [r6, #0]
 8001a5a:	8809      	ldrh	r1, [r1, #0]
 8001a5c:	9703      	str	r7, [sp, #12]
 8001a5e:	4f11      	ldr	r7, [pc, #68]	; (8001aa4 <write+0xa8>)
 8001a60:	f9b4 2000 	ldrsh.w	r2, [r4]
 8001a64:	883f      	ldrh	r7, [r7, #0]
 8001a66:	9702      	str	r7, [sp, #8]
 8001a68:	4f0f      	ldr	r7, [pc, #60]	; (8001aa8 <write+0xac>)
 8001a6a:	883f      	ldrh	r7, [r7, #0]
 8001a6c:	e88d 0081 	stmia.w	sp, {r0, r7}
 8001a70:	4630      	mov	r0, r6
 8001a72:	f7ff ff59 	bl	8001928 <drawChar>
        cursor_x += textsize * 6;          // Advance x one char
 8001a76:	782b      	ldrb	r3, [r5, #0]
 8001a78:	8822      	ldrh	r2, [r4, #0]
 8001a7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a7e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001a82:	8023      	strh	r3, [r4, #0]
}
 8001a84:	e7c8      	b.n	8001a18 <write+0x1c>
 8001a86:	bf00      	nop
 8001a88:	20000158 	.word	0x20000158
 8001a8c:	200000c8 	.word	0x200000c8
 8001a90:	2000015b 	.word	0x2000015b
 8001a94:	2000015a 	.word	0x2000015a
 8001a98:	20000154 	.word	0x20000154
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	2000000a 	.word	0x2000000a
 8001aa4:	2000016a 	.word	0x2000016a
 8001aa8:	2000016c 	.word	0x2000016c

08001aac <print>:
void print(char c[]) {
 8001aac:	b538      	push	{r3, r4, r5, lr}
 8001aae:	4604      	mov	r4, r0
	size_t n = strlen(c);
 8001ab0:	f7fe fb4c 	bl	800014c <strlen>
 8001ab4:	1825      	adds	r5, r4, r0
	for (size_t i = 0; i < n; i++) {
 8001ab6:	42ac      	cmp	r4, r5
 8001ab8:	d100      	bne.n	8001abc <print+0x10>
}
 8001aba:	bd38      	pop	{r3, r4, r5, pc}
		write(c[i]);
 8001abc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ac0:	f7ff ff9c 	bl	80019fc <write>
 8001ac4:	e7f7      	b.n	8001ab6 <print+0xa>

08001ac6 <reset>:
}

void reset() {
 8001ac6:	b508      	push	{r3, lr}
    done_reset = 1;
    cs_idle();
 8001ac8:	f7ff fc68 	bl	800139c <cs_idle>
    rd_idle();
 8001acc:	f7ff fc36 	bl	800133c <rd_idle>
    wr_idle();
 8001ad0:	f7ff fc44 	bl	800135c <wr_idle>
    reset_idle();
 8001ad4:	f7ff fc72 	bl	80013bc <reset_idle>
    reset_active();
 8001ad8:	f7ff fc68 	bl	80013ac <reset_active>
    reset_idle();
}
 8001adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    reset_idle();
 8001ae0:	f7ff bc6c 	b.w	80013bc <reset_idle>

08001ae4 <wr_analog_input>:
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(RD_PORT, &GPIO_InitStruct);
}

void wr_analog_input() {
 8001ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = WR_PIN;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	2303      	movs	r3, #3
	  HAL_GPIO_Init(WR_PORT, &GPIO_InitStruct);
 8001aea:	4669      	mov	r1, sp
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <wr_analog_input+0x18>)
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aee:	e88d 000c 	stmia.w	sp, {r2, r3}
	  HAL_GPIO_Init(WR_PORT, &GPIO_InitStruct);
 8001af2:	f7ff f813 	bl	8000b1c <HAL_GPIO_Init>
}
 8001af6:	b005      	add	sp, #20
 8001af8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001afc:	40010800 	.word	0x40010800

08001b00 <readTouchX>:
void readTouchX() {
 8001b00:	b508      	push	{r3, lr}
	wr_analog_input(); //_yp
 8001b02:	f7ff ffef 	bl	8001ae4 <wr_analog_input>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <readTouchX+0x28>)
 8001b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0e:	f7ff f8e5 	bl	8000cdc <HAL_GPIO_WritePin>
	rs_cmd(); //_ym LOW
 8001b12:	f7ff fc2b 	bl	800136c <rs_cmd>
	flag_adc = 1;
 8001b16:	2201      	movs	r2, #1
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <readTouchX+0x2c>)
	HAL_ADC_Start_IT(&hadc1);
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <readTouchX+0x30>)
	flag_adc = 1;
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_Start_IT(&hadc1);
 8001b22:	f7fe bce3 	b.w	80004ec <HAL_ADC_Start_IT>
 8001b26:	bf00      	nop
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	2000001c 	.word	0x2000001c
 8001b30:	200000dc 	.word	0x200000dc

08001b34 <wr_output>:

void wr_output() {
 8001b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = WR_PIN;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b36:	2200      	movs	r2, #0
 8001b38:	2303      	movs	r3, #3
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	  HAL_GPIO_Init(WR_PORT, &GPIO_InitStruct);
 8001b42:	4669      	mov	r1, sp
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <wr_output+0x1c>)
 8001b46:	f7fe ffe9 	bl	8000b1c <HAL_GPIO_Init>
}
 8001b4a:	b005      	add	sp, #20
 8001b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b50:	40010800 	.word	0x40010800

08001b54 <rs_analog_input>:

void rs_analog_input() {
 8001b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = RS_PIN;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2204      	movs	r2, #4
 8001b58:	2303      	movs	r3, #3
	  HAL_GPIO_Init(RS_PORT, &GPIO_InitStruct);
 8001b5a:	4669      	mov	r1, sp
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <rs_analog_input+0x18>)
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5e:	e88d 000c 	stmia.w	sp, {r2, r3}
	  HAL_GPIO_Init(RS_PORT, &GPIO_InitStruct);
 8001b62:	f7fe ffdb 	bl	8000b1c <HAL_GPIO_Init>
}
 8001b66:	b005      	add	sp, #20
 8001b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b6c:	40010800 	.word	0x40010800

08001b70 <readTouchY>:
void readTouchY() {
 8001b70:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b72:	4c0d      	ldr	r4, [pc, #52]	; (8001ba8 <readTouchY+0x38>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	4620      	mov	r0, r4
 8001b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7c:	f7ff f8ae 	bl	8000cdc <HAL_GPIO_WritePin>
	rs_cmd();
 8001b80:	f7ff fbf4 	bl	800136c <rs_cmd>
	rs_analog_input(); //_yp
 8001b84:	f7ff ffe6 	bl	8001b54 <rs_analog_input>
	wr_idle(); //_yp HIGH
 8001b88:	f7ff fbe8 	bl	800135c <wr_idle>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b94:	f7ff f8a2 	bl	8000cdc <HAL_GPIO_WritePin>
}
 8001b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	flag_adc = 1;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4b03      	ldr	r3, [pc, #12]	; (8001bac <readTouchY+0x3c>)
	HAL_ADC_Start_IT(&hadc1);
 8001ba0:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <readTouchY+0x40>)
	flag_adc = 1;
 8001ba2:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8001ba4:	f7fe bca2 	b.w	80004ec <HAL_ADC_Start_IT>
 8001ba8:	40010c00 	.word	0x40010c00
 8001bac:	2000001c 	.word	0x2000001c
 8001bb0:	200000dc 	.word	0x200000dc

08001bb4 <readTouch>:
void readTouch(){
 8001bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = 0; i < samples; i++) {
 8001bb8:	2400      	movs	r4, #0
		if (flag_adc == 0) {
 8001bba:	4f18      	ldr	r7, [pc, #96]	; (8001c1c <readTouch+0x68>)
	readTouchX();
 8001bbc:	f7ff ffa0 	bl	8001b00 <readTouchX>
	int temp = 0;
 8001bc0:	4625      	mov	r5, r4
 8001bc2:	463e      	mov	r6, r7
			temp += val_adc1;
 8001bc4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8001c2c <readTouch+0x78>
		if (flag_adc == 0) {
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	bb1b      	cbnz	r3, 8001c14 <readTouch+0x60>
			temp += val_adc1;
 8001bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8001bd0:	441d      	add	r5, r3
			readTouchX();
 8001bd2:	f7ff ff95 	bl	8001b00 <readTouchX>
	for (int i = 0; i < samples; i++) {
 8001bd6:	3401      	adds	r4, #1
 8001bd8:	2c63      	cmp	r4, #99	; 0x63
 8001bda:	ddf5      	ble.n	8001bc8 <readTouch+0x14>
	touchx_atual = temp/samples;
 8001bdc:	2364      	movs	r3, #100	; 0x64
 8001bde:	fb95 f5f3 	sdiv	r5, r5, r3
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <readTouch+0x6c>)
	for (int i = 0; i < samples; i++) {
 8001be4:	2400      	movs	r4, #0
	touchx_atual = temp/samples;
 8001be6:	601d      	str	r5, [r3, #0]
	flag_adc = 1;
 8001be8:	2301      	movs	r3, #1
	temp = 0;
 8001bea:	4625      	mov	r5, r4
	flag_adc = 1;
 8001bec:	6033      	str	r3, [r6, #0]
	readTouchY();
 8001bee:	f7ff ffbf 	bl	8001b70 <readTouchY>
			temp += val_adc2;
 8001bf2:	4f0c      	ldr	r7, [pc, #48]	; (8001c24 <readTouch+0x70>)
		if (flag_adc == 0) {
 8001bf4:	6833      	ldr	r3, [r6, #0]
 8001bf6:	b97b      	cbnz	r3, 8001c18 <readTouch+0x64>
			temp += val_adc2;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	441d      	add	r5, r3
			readTouchY();
 8001bfc:	f7ff ffb8 	bl	8001b70 <readTouchY>
	for (int i = 0; i < samples; i++) {
 8001c00:	3401      	adds	r4, #1
 8001c02:	2c63      	cmp	r4, #99	; 0x63
 8001c04:	ddf6      	ble.n	8001bf4 <readTouch+0x40>
	touchy_atual = temp/samples;
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	fb95 f5f3 	sdiv	r5, r5, r3
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <readTouch+0x74>)
 8001c0e:	601d      	str	r5, [r3, #0]
 8001c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			i--;
 8001c14:	3c01      	subs	r4, #1
 8001c16:	e7de      	b.n	8001bd6 <readTouch+0x22>
			i--;
 8001c18:	3c01      	subs	r4, #1
 8001c1a:	e7f1      	b.n	8001c00 <readTouch+0x4c>
 8001c1c:	2000001c 	.word	0x2000001c
 8001c20:	200000a8 	.word	0x200000a8
 8001c24:	200000d4 	.word	0x200000d4
 8001c28:	200000ac 	.word	0x200000ac
 8001c2c:	200000cc 	.word	0x200000cc

08001c30 <readTouchZ>:
void readTouchZ() {
 8001c30:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c32:	4c0e      	ldr	r4, [pc, #56]	; (8001c6c <readTouchZ+0x3c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	4620      	mov	r0, r4
 8001c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c3c:	f7ff f84e 	bl	8000cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001c40:	4620      	mov	r0, r4
 8001c42:	2201      	movs	r2, #1
 8001c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c48:	f7ff f848 	bl	8000cdc <HAL_GPIO_WritePin>
	rs_cmd();
 8001c4c:	f7ff fb8e 	bl	800136c <rs_cmd>
	rs_analog_input();
 8001c50:	f7ff ff80 	bl	8001b54 <rs_analog_input>
	wr_active();
 8001c54:	f7ff fb7a 	bl	800134c <wr_active>
	wr_analog_input();
 8001c58:	f7ff ff44 	bl	8001ae4 <wr_analog_input>
}
 8001c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	flag_adc = 1;
 8001c60:	2201      	movs	r2, #1
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <readTouchZ+0x40>)
	HAL_ADC_Start_IT(&hadc1);
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <readTouchZ+0x44>)
	flag_adc = 1;
 8001c66:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8001c68:	f7fe bc40 	b.w	80004ec <HAL_ADC_Start_IT>
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	2000001c 	.word	0x2000001c
 8001c74:	200000dc 	.word	0x200000dc

08001c78 <ISPRESSED>:
{
 8001c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bool state, oldstate = false;
 8001c7c:	2500      	movs	r5, #0
    readTouchZ();
 8001c7e:	f7ff ffd7 	bl	8001c30 <readTouchZ>
    int count = 0;
 8001c82:	46a9      	mov	r9, r5
        if (flag_adc == 0) {
 8001c84:	4e13      	ldr	r6, [pc, #76]	; (8001cd4 <ISPRESSED+0x5c>)
        	touchz_atual = (4096 - (val_adc1 - val_adc2));
 8001c86:	4f14      	ldr	r7, [pc, #80]	; (8001cd8 <ISPRESSED+0x60>)
 8001c88:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001ce0 <ISPRESSED+0x68>
        if (flag_adc == 0) {
 8001c8c:	f8d6 a000 	ldr.w	sl, [r6]
 8001c90:	f1ba 0f00 	cmp.w	sl, #0
 8001c94:	d119      	bne.n	8001cca <ISPRESSED+0x52>
        	touchz_atual = (4096 - (val_adc1 - val_adc2));
 8001c96:	683c      	ldr	r4, [r7, #0]
 8001c98:	f8d8 3000 	ldr.w	r3, [r8]
 8001c9c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8001ca0:	1ae4      	subs	r4, r4, r3
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <ISPRESSED+0x64>)
			state = touchz_atual > 200;     //ADJUST THIS VALUE TO SUIT YOUR SCREEN e.g. 20 ... 250
 8001ca4:	2cc8      	cmp	r4, #200	; 0xc8
        	touchz_atual = (4096 - (val_adc1 - val_adc2));
 8001ca6:	601c      	str	r4, [r3, #0]
			state = touchz_atual > 200;     //ADJUST THIS VALUE TO SUIT YOUR SCREEN e.g. 20 ... 250
 8001ca8:	bfd4      	ite	le
 8001caa:	2400      	movle	r4, #0
 8001cac:	2401      	movgt	r4, #1
			if (state == oldstate) count++;
 8001cae:	42ac      	cmp	r4, r5
 8001cb0:	bf08      	it	eq
 8001cb2:	f109 0a01 	addeq.w	sl, r9, #1
			state = touchz_atual > 200;     //ADJUST THIS VALUE TO SUIT YOUR SCREEN e.g. 20 ... 250
 8001cb6:	4625      	mov	r5, r4
			readTouchZ();
 8001cb8:	f7ff ffba 	bl	8001c30 <readTouchZ>
 8001cbc:	46d1      	mov	r9, sl
    while (count < 10) {
 8001cbe:	f1b9 0f09 	cmp.w	r9, #9
 8001cc2:	dde3      	ble.n	8001c8c <ISPRESSED+0x14>
}
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        	HAL_Delay(1);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7fe fa8e 	bl	80001ec <HAL_Delay>
 8001cd0:	e7f5      	b.n	8001cbe <ISPRESSED+0x46>
 8001cd2:	bf00      	nop
 8001cd4:	2000001c 	.word	0x2000001c
 8001cd8:	200000d4 	.word	0x200000d4
 8001cdc:	200000b0 	.word	0x200000b0
 8001ce0:	200000cc 	.word	0x200000cc

08001ce4 <calibrateTouch>:
void calibrateTouch(){
 8001ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	textcolor = color;
 8001ce8:	241f      	movs	r4, #31
	textbgcolor = txtbgcolor;
 8001cea:	f44f 68fc 	mov.w	r8, #2016	; 0x7e0
	textsize = (size > 0) ? size : 1;
 8001cee:	2202      	movs	r2, #2
	cursor_y = y;
 8001cf0:	2578      	movs	r5, #120	; 0x78
	cursor_x = x;
 8001cf2:	263c      	movs	r6, #60	; 0x3c
	textcolor = color;
 8001cf4:	4bcb      	ldr	r3, [pc, #812]	; (8002024 <calibrateTouch+0x340>)
	cursor_y = y;
 8001cf6:	4fcc      	ldr	r7, [pc, #816]	; (8002028 <calibrateTouch+0x344>)
	textcolor = color;
 8001cf8:	801c      	strh	r4, [r3, #0]
	textbgcolor = txtbgcolor;
 8001cfa:	4bcc      	ldr	r3, [pc, #816]	; (800202c <calibrateTouch+0x348>)
	cursor_x = x;
 8001cfc:	f8df a350 	ldr.w	sl, [pc, #848]	; 8002050 <calibrateTouch+0x36c>
	textbgcolor = txtbgcolor;
 8001d00:	f8a3 8000 	strh.w	r8, [r3]
	textsize = (size > 0) ? size : 1;
 8001d04:	4bca      	ldr	r3, [pc, #808]	; (8002030 <calibrateTouch+0x34c>)
void calibrateTouch(){
 8001d06:	b0b5      	sub	sp, #212	; 0xd4
	print("Pressione na cruz!");
 8001d08:	48ca      	ldr	r0, [pc, #808]	; (8002034 <calibrateTouch+0x350>)
	textsize = (size > 0) ? size : 1;
 8001d0a:	701a      	strb	r2, [r3, #0]
	cursor_x = x;
 8001d0c:	f8aa 6000 	strh.w	r6, [sl]
	cursor_y = y;
 8001d10:	803d      	strh	r5, [r7, #0]
	print("Pressione na cruz!");
 8001d12:	f7ff fecb 	bl	8001aac <print>
	drawCross(20, 20, BLUE, GREEN);
 8001d16:	4622      	mov	r2, r4
	int touchy1 = 0, touchy2 = 0, touchy3 = 0;
 8001d18:	2400      	movs	r4, #0
	drawCross(20, 20, BLUE, GREEN);
 8001d1a:	2114      	movs	r1, #20
 8001d1c:	4643      	mov	r3, r8
	int failcount = 0;
 8001d1e:	46a3      	mov	fp, r4
	int touchx1 = 0, touchx2 = 0, touchx3 = 0;
 8001d20:	46a0      	mov	r8, r4
 8001d22:	46b9      	mov	r9, r7
	drawCross(20, 20, BLUE, GREEN);
 8001d24:	4608      	mov	r0, r1
 8001d26:	f7ff fc67 	bl	80015f8 <drawCross>
		fillRect(60, 120, 220, 16, GREEN);
 8001d2a:	9502      	str	r5, [sp, #8]
		while (!ISPRESSED()) {};
 8001d2c:	f7ff ffa4 	bl	8001c78 <ISPRESSED>
 8001d30:	4605      	mov	r5, r0
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d0fa      	beq.n	8001d2c <calibrateTouch+0x48>
		fillRect(60, 120, 220, 16, GREEN);
 8001d36:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d3a:	22dc      	movs	r2, #220	; 0xdc
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2178      	movs	r1, #120	; 0x78
 8001d40:	2310      	movs	r3, #16
 8001d42:	203c      	movs	r0, #60	; 0x3c
 8001d44:	f7ff fd5a 	bl	80017fc <fillRect>
	cursor_y = y;
 8001d48:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		print("Mantenha pressionado!");
 8001d4c:	48ba      	ldr	r0, [pc, #744]	; (8002038 <calibrateTouch+0x354>)
	cursor_x = x;
 8001d4e:	f8aa 6000 	strh.w	r6, [sl]
	cursor_y = y;
 8001d52:	f8a9 3000 	strh.w	r3, [r9]
		count = 0;
 8001d56:	2700      	movs	r7, #0
		print("Mantenha pressionado!");
 8001d58:	f7ff fea8 	bl	8001aac <print>
			if (samples-count-1 < 10) fillRect(65, 140, 25, 16, GREEN);
 8001d5c:	f1c7 0364 	rsb	r3, r7, #100	; 0x64
 8001d60:	2b0a      	cmp	r3, #10
 8001d62:	dc08      	bgt.n	8001d76 <calibrateTouch+0x92>
 8001d64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d68:	2219      	movs	r2, #25
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	218c      	movs	r1, #140	; 0x8c
 8001d6e:	2310      	movs	r3, #16
 8001d70:	2041      	movs	r0, #65	; 0x41
 8001d72:	f7ff fd43 	bl	80017fc <fillRect>
	cursor_y = y;
 8001d76:	f04f 038c 	mov.w	r3, #140	; 0x8c
			sprintf(resultx, "%i", samples-count-1);
 8001d7a:	f1c7 0263 	rsb	r2, r7, #99	; 0x63
 8001d7e:	49af      	ldr	r1, [pc, #700]	; (800203c <calibrateTouch+0x358>)
 8001d80:	a81a      	add	r0, sp, #104	; 0x68
	cursor_y = y;
 8001d82:	f8a9 3000 	strh.w	r3, [r9]
	cursor_x = x;
 8001d86:	f8aa 6000 	strh.w	r6, [sl]
			sprintf(resultx, "%i", samples-count-1);
 8001d8a:	f000 fd09 	bl	80027a0 <siprintf>
			print(resultx);
 8001d8e:	a81a      	add	r0, sp, #104	; 0x68
 8001d90:	f7ff fe8c 	bl	8001aac <print>
			readTouch();
 8001d94:	f7ff ff0e 	bl	8001bb4 <readTouch>
			if (touchz_atual > 200) {
 8001d98:	4ba9      	ldr	r3, [pc, #676]	; (8002040 <calibrateTouch+0x35c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2bc8      	cmp	r3, #200	; 0xc8
				touchx1 += touchx_atual;
 8001d9e:	bfc3      	ittte	gt
 8001da0:	4ba8      	ldrgt	r3, [pc, #672]	; (8002044 <calibrateTouch+0x360>)
				count++;
 8001da2:	3701      	addgt	r7, #1
				touchx1 += touchx_atual;
 8001da4:	681b      	ldrgt	r3, [r3, #0]
				failcount++;
 8001da6:	f10b 0b01 	addle.w	fp, fp, #1
				touchx1 += touchx_atual;
 8001daa:	bfc1      	itttt	gt
 8001dac:	4498      	addgt	r8, r3
				touchy1 += touchy_atual;
 8001dae:	4ba6      	ldrgt	r3, [pc, #664]	; (8002048 <calibrateTouch+0x364>)
 8001db0:	681b      	ldrgt	r3, [r3, #0]
 8001db2:	18e4      	addgt	r4, r4, r3
		} while ((count < samples) && (failcount < 10000));
 8001db4:	2f63      	cmp	r7, #99	; 0x63
 8001db6:	f242 730f 	movw	r3, #9999	; 0x270f
 8001dba:	f300 828e 	bgt.w	80022da <calibrateTouch+0x5f6>
 8001dbe:	459b      	cmp	fp, r3
 8001dc0:	ddcc      	ble.n	8001d5c <calibrateTouch+0x78>
			touchy1 = 0;
 8001dc2:	2400      	movs	r4, #0
			touchx1 = 0;
 8001dc4:	46a0      	mov	r8, r4
 8001dc6:	4625      	mov	r5, r4
			fillRect(90, 120, 200, 16, GREEN);
 8001dc8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001dcc:	205a      	movs	r0, #90	; 0x5a
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	22c8      	movs	r2, #200	; 0xc8
 8001dd2:	2310      	movs	r3, #16
 8001dd4:	2178      	movs	r1, #120	; 0x78
 8001dd6:	f7ff fd11 	bl	80017fc <fillRect>
	cursor_x = x;
 8001dda:	235a      	movs	r3, #90	; 0x5a
 8001ddc:	f8aa 3000 	strh.w	r3, [sl]
	cursor_y = y;
 8001de0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			print("FAIL!");
 8001de4:	4899      	ldr	r0, [pc, #612]	; (800204c <calibrateTouch+0x368>)
	cursor_y = y;
 8001de6:	f8a9 3000 	strh.w	r3, [r9]
			print("FAIL!");
 8001dea:	f7ff fe5f 	bl	8001aac <print>
	while (!OK) {
 8001dee:	2d00      	cmp	r5, #0
 8001df0:	d09c      	beq.n	8001d2c <calibrateTouch+0x48>
	touchx1 = touchx1/samples;
 8001df2:	2564      	movs	r5, #100	; 0x64
 8001df4:	fb98 f3f5 	sdiv	r3, r8, r5
 8001df8:	9303      	str	r3, [sp, #12]
	touchy1 = touchy1/samples;
 8001dfa:	fb94 f3f5 	sdiv	r3, r4, r5
	fillRect(20, 20, 20, 20, GREEN); //Apaga a cruz
 8001dfe:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
	touchy1 = touchy1/samples;
 8001e02:	9302      	str	r3, [sp, #8]
	fillRect(20, 20, 20, 20, GREEN); //Apaga a cruz
 8001e04:	2314      	movs	r3, #20
 8001e06:	9400      	str	r4, [sp, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fcf5 	bl	80017fc <fillRect>
	fillRect(60, 140, 25, 16, GREEN); //Apaga o timer
 8001e12:	2310      	movs	r3, #16
 8001e14:	2219      	movs	r2, #25
 8001e16:	218c      	movs	r1, #140	; 0x8c
 8001e18:	203c      	movs	r0, #60	; 0x3c
 8001e1a:	9400      	str	r4, [sp, #0]
 8001e1c:	f7ff fcee 	bl	80017fc <fillRect>
	drawCross(100, 200, BLUE, GREEN); //Desenha nova cruz
 8001e20:	4623      	mov	r3, r4
 8001e22:	221f      	movs	r2, #31
 8001e24:	21c8      	movs	r1, #200	; 0xc8
 8001e26:	4628      	mov	r0, r5
 8001e28:	f7ff fbe6 	bl	80015f8 <drawCross>
	fillRect(60, 120, 280, 16, GREEN); //Apaga texto
 8001e2c:	2310      	movs	r3, #16
 8001e2e:	203c      	movs	r0, #60	; 0x3c
 8001e30:	9400      	str	r4, [sp, #0]
 8001e32:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001e36:	2178      	movs	r1, #120	; 0x78
 8001e38:	f7ff fce0 	bl	80017fc <fillRect>
	cursor_x = x;
 8001e3c:	233c      	movs	r3, #60	; 0x3c
 8001e3e:	f8aa 3000 	strh.w	r3, [sl]
	cursor_y = y;
 8001e42:	23b4      	movs	r3, #180	; 0xb4
	print("Pressione na cruz!");
 8001e44:	487b      	ldr	r0, [pc, #492]	; (8002034 <calibrateTouch+0x350>)
	cursor_y = y;
 8001e46:	f8a9 3000 	strh.w	r3, [r9]
	print("Pressione na cruz!");
 8001e4a:	f7ff fe2f 	bl	8001aac <print>
	while (ISPRESSED()) {}; //Aguarda retirar o toque da cruz anterior
 8001e4e:	f7ff ff13 	bl	8001c78 <ISPRESSED>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d1fb      	bne.n	8001e4e <calibrateTouch+0x16a>
 8001e56:	4604      	mov	r4, r0
 8001e58:	4607      	mov	r7, r0
		fillRect(60, 180, 220, 16, GREEN);
 8001e5a:	f04f 083c 	mov.w	r8, #60	; 0x3c
		while (!ISPRESSED()) {};
 8001e5e:	f7ff ff0b 	bl	8001c78 <ISPRESSED>
 8001e62:	4605      	mov	r5, r0
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d0fa      	beq.n	8001e5e <calibrateTouch+0x17a>
		fillRect(60, 180, 220, 16, GREEN);
 8001e68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e6c:	22dc      	movs	r2, #220	; 0xdc
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	21b4      	movs	r1, #180	; 0xb4
 8001e72:	2310      	movs	r3, #16
 8001e74:	203c      	movs	r0, #60	; 0x3c
 8001e76:	f7ff fcc1 	bl	80017fc <fillRect>
	cursor_y = y;
 8001e7a:	f04f 03b4 	mov.w	r3, #180	; 0xb4
		print("Mantenha pressionado!");
 8001e7e:	486e      	ldr	r0, [pc, #440]	; (8002038 <calibrateTouch+0x354>)
	cursor_x = x;
 8001e80:	f8aa 8000 	strh.w	r8, [sl]
	cursor_y = y;
 8001e84:	f8a9 3000 	strh.w	r3, [r9]
		count = 0;
 8001e88:	2600      	movs	r6, #0
		print("Mantenha pressionado!");
 8001e8a:	f7ff fe0f 	bl	8001aac <print>
			if (samples-count-1 < 10) fillRect(65, 200, 25, 16, GREEN);
 8001e8e:	f1c6 0364 	rsb	r3, r6, #100	; 0x64
 8001e92:	2b0a      	cmp	r3, #10
 8001e94:	dc08      	bgt.n	8001ea8 <calibrateTouch+0x1c4>
 8001e96:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e9a:	2219      	movs	r2, #25
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	21c8      	movs	r1, #200	; 0xc8
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	2041      	movs	r0, #65	; 0x41
 8001ea4:	f7ff fcaa 	bl	80017fc <fillRect>
	cursor_y = y;
 8001ea8:	f04f 03c8 	mov.w	r3, #200	; 0xc8
			sprintf(resultx, "%i", samples-count-1);
 8001eac:	f1c6 0263 	rsb	r2, r6, #99	; 0x63
 8001eb0:	4962      	ldr	r1, [pc, #392]	; (800203c <calibrateTouch+0x358>)
 8001eb2:	a81a      	add	r0, sp, #104	; 0x68
	cursor_y = y;
 8001eb4:	f8a9 3000 	strh.w	r3, [r9]
	cursor_x = x;
 8001eb8:	f8aa 8000 	strh.w	r8, [sl]
			sprintf(resultx, "%i", samples-count-1);
 8001ebc:	f000 fc70 	bl	80027a0 <siprintf>
			print(resultx);
 8001ec0:	a81a      	add	r0, sp, #104	; 0x68
 8001ec2:	f7ff fdf3 	bl	8001aac <print>
			readTouch();
 8001ec6:	f7ff fe75 	bl	8001bb4 <readTouch>
			if (touchz_atual > 200) {
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <calibrateTouch+0x35c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2bc8      	cmp	r3, #200	; 0xc8
				touchx2 += touchx_atual;
 8001ed0:	bfc3      	ittte	gt
 8001ed2:	4b5c      	ldrgt	r3, [pc, #368]	; (8002044 <calibrateTouch+0x360>)
				count++;
 8001ed4:	3601      	addgt	r6, #1
				touchx2 += touchx_atual;
 8001ed6:	681b      	ldrgt	r3, [r3, #0]
				failcount++;
 8001ed8:	f10b 0b01 	addle.w	fp, fp, #1
				touchx2 += touchx_atual;
 8001edc:	bfc1      	itttt	gt
 8001ede:	18ff      	addgt	r7, r7, r3
				touchy2 += touchy_atual;
 8001ee0:	4b59      	ldrgt	r3, [pc, #356]	; (8002048 <calibrateTouch+0x364>)
 8001ee2:	681b      	ldrgt	r3, [r3, #0]
 8001ee4:	18e4      	addgt	r4, r4, r3
		} while ((count < samples) && (failcount < 10000));
 8001ee6:	2e63      	cmp	r6, #99	; 0x63
 8001ee8:	f242 730f 	movw	r3, #9999	; 0x270f
 8001eec:	f300 81f9 	bgt.w	80022e2 <calibrateTouch+0x5fe>
 8001ef0:	459b      	cmp	fp, r3
 8001ef2:	ddcc      	ble.n	8001e8e <calibrateTouch+0x1aa>
 8001ef4:	2500      	movs	r5, #0
			touchy2 = 0;
 8001ef6:	462c      	mov	r4, r5
			touchx2 = 0;
 8001ef8:	462f      	mov	r7, r5
			fillRect(90, 120, 200, 16, GREEN);
 8001efa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001efe:	205a      	movs	r0, #90	; 0x5a
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	22c8      	movs	r2, #200	; 0xc8
 8001f04:	2310      	movs	r3, #16
 8001f06:	2178      	movs	r1, #120	; 0x78
 8001f08:	f7ff fc78 	bl	80017fc <fillRect>
	cursor_x = x;
 8001f0c:	235a      	movs	r3, #90	; 0x5a
 8001f0e:	f8aa 3000 	strh.w	r3, [sl]
	cursor_y = y;
 8001f12:	2378      	movs	r3, #120	; 0x78
			print("FAIL!");
 8001f14:	484d      	ldr	r0, [pc, #308]	; (800204c <calibrateTouch+0x368>)
	cursor_y = y;
 8001f16:	f8a9 3000 	strh.w	r3, [r9]
			print("FAIL!");
 8001f1a:	f7ff fdc7 	bl	8001aac <print>
	while (!OK) {
 8001f1e:	2d00      	cmp	r5, #0
 8001f20:	d09d      	beq.n	8001e5e <calibrateTouch+0x17a>
	touchx2 = touchx2/samples;
 8001f22:	2564      	movs	r5, #100	; 0x64
 8001f24:	fb97 f3f5 	sdiv	r3, r7, r5
 8001f28:	9304      	str	r3, [sp, #16]
	touchy2 = touchy2/samples;
 8001f2a:	fb94 f3f5 	sdiv	r3, r4, r5
	fillRect(200, 100, 20, 20, GREEN); //Apaga a cruz
 8001f2e:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
	touchy2 = touchy2/samples;
 8001f32:	9305      	str	r3, [sp, #20]
	fillRect(200, 100, 20, 20, GREEN); //Apaga a cruz
 8001f34:	2314      	movs	r3, #20
 8001f36:	4629      	mov	r1, r5
 8001f38:	461a      	mov	r2, r3
 8001f3a:	20c8      	movs	r0, #200	; 0xc8
 8001f3c:	9400      	str	r4, [sp, #0]
 8001f3e:	f7ff fc5d 	bl	80017fc <fillRect>
	fillRect(60, 200, 25, 16, GREEN); //Apaga o timer
 8001f42:	2310      	movs	r3, #16
 8001f44:	2219      	movs	r2, #25
 8001f46:	21c8      	movs	r1, #200	; 0xc8
 8001f48:	203c      	movs	r0, #60	; 0x3c
 8001f4a:	9400      	str	r4, [sp, #0]
 8001f4c:	f7ff fc56 	bl	80017fc <fillRect>
	drawCross(200, 20, BLUE, GREEN); //Desenha nova cruz
 8001f50:	4623      	mov	r3, r4
 8001f52:	221f      	movs	r2, #31
 8001f54:	2114      	movs	r1, #20
 8001f56:	20c8      	movs	r0, #200	; 0xc8
 8001f58:	f7ff fb4e 	bl	80015f8 <drawCross>
	fillRect(60, 180, 280, 16, GREEN); //Apaga texto
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	203c      	movs	r0, #60	; 0x3c
 8001f60:	9400      	str	r4, [sp, #0]
 8001f62:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001f66:	21b4      	movs	r1, #180	; 0xb4
 8001f68:	f7ff fc48 	bl	80017fc <fillRect>
	cursor_x = x;
 8001f6c:	233c      	movs	r3, #60	; 0x3c
	print("Pressione na cruz!");
 8001f6e:	4831      	ldr	r0, [pc, #196]	; (8002034 <calibrateTouch+0x350>)
	cursor_x = x;
 8001f70:	f8aa 3000 	strh.w	r3, [sl]
	cursor_y = y;
 8001f74:	f8a9 5000 	strh.w	r5, [r9]
	print("Pressione na cruz!");
 8001f78:	f7ff fd98 	bl	8001aac <print>
	while (ISPRESSED()) {}; //Aguarda retirar o toque da cruz anterior
 8001f7c:	f7ff fe7c 	bl	8001c78 <ISPRESSED>
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d1fb      	bne.n	8001f7c <calibrateTouch+0x298>
 8001f84:	4604      	mov	r4, r0
 8001f86:	4605      	mov	r5, r0
		fillRect(60, 100, 220, 16, GREEN);
 8001f88:	f04f 093c 	mov.w	r9, #60	; 0x3c
	cursor_y = y;
 8001f8c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002028 <calibrateTouch+0x344>
		while (!ISPRESSED()) {};
 8001f90:	f7ff fe72 	bl	8001c78 <ISPRESSED>
 8001f94:	4606      	mov	r6, r0
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d0fa      	beq.n	8001f90 <calibrateTouch+0x2ac>
		fillRect(60, 100, 220, 16, GREEN);
 8001f9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f9e:	22dc      	movs	r2, #220	; 0xdc
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2164      	movs	r1, #100	; 0x64
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	203c      	movs	r0, #60	; 0x3c
 8001fa8:	f7ff fc28 	bl	80017fc <fillRect>
	cursor_y = y;
 8001fac:	2364      	movs	r3, #100	; 0x64
		print("Mantenha pressionado!");
 8001fae:	4822      	ldr	r0, [pc, #136]	; (8002038 <calibrateTouch+0x354>)
	cursor_x = x;
 8001fb0:	f8aa 9000 	strh.w	r9, [sl]
	cursor_y = y;
 8001fb4:	f8a8 3000 	strh.w	r3, [r8]
		count = 0;
 8001fb8:	2700      	movs	r7, #0
		print("Mantenha pressionado!");
 8001fba:	f7ff fd77 	bl	8001aac <print>
			if (samples-count-1 < 10) fillRect(65, 120, 25, 16, GREEN);
 8001fbe:	f1c7 0364 	rsb	r3, r7, #100	; 0x64
 8001fc2:	2b0a      	cmp	r3, #10
 8001fc4:	dc08      	bgt.n	8001fd8 <calibrateTouch+0x2f4>
 8001fc6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001fca:	2219      	movs	r2, #25
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2178      	movs	r1, #120	; 0x78
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	2041      	movs	r0, #65	; 0x41
 8001fd4:	f7ff fc12 	bl	80017fc <fillRect>
	cursor_y = y;
 8001fd8:	f04f 0378 	mov.w	r3, #120	; 0x78
			sprintf(resultx, "%i", samples-count-1);
 8001fdc:	f1c7 0263 	rsb	r2, r7, #99	; 0x63
 8001fe0:	4916      	ldr	r1, [pc, #88]	; (800203c <calibrateTouch+0x358>)
 8001fe2:	a81a      	add	r0, sp, #104	; 0x68
	cursor_y = y;
 8001fe4:	f8a8 3000 	strh.w	r3, [r8]
	cursor_x = x;
 8001fe8:	f8aa 9000 	strh.w	r9, [sl]
			sprintf(resultx, "%i", samples-count-1);
 8001fec:	f000 fbd8 	bl	80027a0 <siprintf>
			print(resultx);
 8001ff0:	a81a      	add	r0, sp, #104	; 0x68
 8001ff2:	f7ff fd5b 	bl	8001aac <print>
			readTouch();
 8001ff6:	f7ff fddd 	bl	8001bb4 <readTouch>
			if (touchz_atual > 200) {
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <calibrateTouch+0x35c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2bc8      	cmp	r3, #200	; 0xc8
				touchx3 += touchx_atual;
 8002000:	bfc3      	ittte	gt
 8002002:	4b10      	ldrgt	r3, [pc, #64]	; (8002044 <calibrateTouch+0x360>)
				count++;
 8002004:	3701      	addgt	r7, #1
				touchx3 += touchx_atual;
 8002006:	681b      	ldrgt	r3, [r3, #0]
				failcount++;
 8002008:	f10b 0b01 	addle.w	fp, fp, #1
				touchx3 += touchx_atual;
 800200c:	bfc1      	itttt	gt
 800200e:	18ed      	addgt	r5, r5, r3
				touchy3 += touchy_atual;
 8002010:	4b0d      	ldrgt	r3, [pc, #52]	; (8002048 <calibrateTouch+0x364>)
 8002012:	681b      	ldrgt	r3, [r3, #0]
 8002014:	18e4      	addgt	r4, r4, r3
		} while ((count < samples) && (failcount < 10000));
 8002016:	2f63      	cmp	r7, #99	; 0x63
 8002018:	f242 730f 	movw	r3, #9999	; 0x270f
 800201c:	f300 8165 	bgt.w	80022ea <calibrateTouch+0x606>
 8002020:	e018      	b.n	8002054 <calibrateTouch+0x370>
 8002022:	bf00      	nop
 8002024:	2000016c 	.word	0x2000016c
 8002028:	200000c8 	.word	0x200000c8
 800202c:	2000016a 	.word	0x2000016a
 8002030:	2000015b 	.word	0x2000015b
 8002034:	080030e0 	.word	0x080030e0
 8002038:	080030f3 	.word	0x080030f3
 800203c:	08003109 	.word	0x08003109
 8002040:	200000b0 	.word	0x200000b0
 8002044:	200000a8 	.word	0x200000a8
 8002048:	200000ac 	.word	0x200000ac
 800204c:	0800310c 	.word	0x0800310c
 8002050:	20000158 	.word	0x20000158
 8002054:	459b      	cmp	fp, r3
 8002056:	ddb2      	ble.n	8001fbe <calibrateTouch+0x2da>
 8002058:	2600      	movs	r6, #0
			touchy3 = 0;
 800205a:	4634      	mov	r4, r6
			touchx3 = 0;
 800205c:	4635      	mov	r5, r6
			fillRect(90, 100, 200, 16, GREEN);
 800205e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002062:	22c8      	movs	r2, #200	; 0xc8
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	205a      	movs	r0, #90	; 0x5a
 8002068:	2310      	movs	r3, #16
 800206a:	2164      	movs	r1, #100	; 0x64
 800206c:	f7ff fbc6 	bl	80017fc <fillRect>
	cursor_x = x;
 8002070:	235a      	movs	r3, #90	; 0x5a
 8002072:	f8aa 3000 	strh.w	r3, [sl]
	cursor_y = y;
 8002076:	2364      	movs	r3, #100	; 0x64
 8002078:	4a9e      	ldr	r2, [pc, #632]	; (80022f4 <calibrateTouch+0x610>)
			print("FAIL!");
 800207a:	489f      	ldr	r0, [pc, #636]	; (80022f8 <calibrateTouch+0x614>)
	cursor_y = y;
 800207c:	8013      	strh	r3, [r2, #0]
			print("FAIL!");
 800207e:	f7ff fd15 	bl	8001aac <print>
	while (!OK) {
 8002082:	2e00      	cmp	r6, #0
 8002084:	d084      	beq.n	8001f90 <calibrateTouch+0x2ac>
	touchx3 = touchx3/samples;
 8002086:	2064      	movs	r0, #100	; 0x64
 8002088:	fb95 f3f0 	sdiv	r3, r5, r0
 800208c:	9306      	str	r3, [sp, #24]
	touchy3 = touchy3/samples;
 800208e:	fb94 f3f0 	sdiv	r3, r4, r0
 8002092:	9307      	str	r3, [sp, #28]
	int A[3][3] =
 8002094:	9b03      	ldr	r3, [sp, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	9311      	str	r3, [sp, #68]	; 0x44
 800209a:	9b02      	ldr	r3, [sp, #8]
 800209c:	ac08      	add	r4, sp, #32
 800209e:	9312      	str	r3, [sp, #72]	; 0x48
 80020a0:	9b04      	ldr	r3, [sp, #16]
 80020a2:	4620      	mov	r0, r4
 80020a4:	9314      	str	r3, [sp, #80]	; 0x50
 80020a6:	9b05      	ldr	r3, [sp, #20]
 80020a8:	9213      	str	r2, [sp, #76]	; 0x4c
 80020aa:	9315      	str	r3, [sp, #84]	; 0x54
 80020ac:	9b06      	ldr	r3, [sp, #24]
 80020ae:	9216      	str	r2, [sp, #88]	; 0x58
 80020b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80020b2:	9b07      	ldr	r3, [sp, #28]
 80020b4:	9219      	str	r2, [sp, #100]	; 0x64
 80020b6:	9318      	str	r3, [sp, #96]	; 0x60
	for(int i = 0; i < 3; i++) {
 80020b8:	2300      	movs	r3, #0
				ident[i][j] = 0;
 80020ba:	461d      	mov	r5, r3
			touchx3 = 0;
 80020bc:	2100      	movs	r1, #0
			if (i == j) {
 80020be:	428b      	cmp	r3, r1
				ident[i][j] = 0;
 80020c0:	bf18      	it	ne
 80020c2:	f840 5021 	strne.w	r5, [r0, r1, lsl #2]
		for (int j = 0; j < 3; j++) {
 80020c6:	f101 0101 	add.w	r1, r1, #1
				ident[i][j] = 1;
 80020ca:	bf08      	it	eq
 80020cc:	f840 2023 	streq.w	r2, [r0, r3, lsl #2]
		for (int j = 0; j < 3; j++) {
 80020d0:	2903      	cmp	r1, #3
 80020d2:	d1f4      	bne.n	80020be <calibrateTouch+0x3da>
	for(int i = 0; i < 3; i++) {
 80020d4:	3301      	adds	r3, #1
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	f100 000c 	add.w	r0, r0, #12
 80020dc:	d1ee      	bne.n	80020bc <calibrateTouch+0x3d8>
 80020de:	2000      	movs	r0, #0
 80020e0:	aa11      	add	r2, sp, #68	; 0x44
 80020e2:	4681      	mov	r9, r0
			A[j][k] = A[j][k]/A[j][j];
 80020e4:	4696      	mov	lr, r2
	for(int i = 0; i < 3; i++) {
 80020e6:	2500      	movs	r5, #0
			A[j][k] = A[j][k]/A[j][j];
 80020e8:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 80020ec:	f85e 1020 	ldr.w	r1, [lr, r0, lsl #2]
 80020f0:	fb93 f3f1 	sdiv	r3, r3, r1
 80020f4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			ident[j][k] = ident[j][k]/A[j][j];
 80020f8:	f85e 1020 	ldr.w	r1, [lr, r0, lsl #2]
 80020fc:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 8002100:	fb93 f3f1 	sdiv	r3, r3, r1
 8002104:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
		for (int k = 0; k < 3; k++) {
 8002108:	3501      	adds	r5, #1
 800210a:	2d03      	cmp	r5, #3
 800210c:	d1ec      	bne.n	80020e8 <calibrateTouch+0x404>
 800210e:	2100      	movs	r1, #0
 8002110:	468c      	mov	ip, r1
 8002112:	eb0e 0800 	add.w	r8, lr, r0
			if (i != j) {
 8002116:	45e1      	cmp	r9, ip
 8002118:	f040 80c1 	bne.w	800229e <calibrateTouch+0x5ba>
		for (int i = 0; i < 3; i++) {
 800211c:	f10c 0c01 	add.w	ip, ip, #1
 8002120:	f1bc 0f03 	cmp.w	ip, #3
 8002124:	f101 010c 	add.w	r1, r1, #12
 8002128:	d1f5      	bne.n	8002116 <calibrateTouch+0x432>
	for (int j = 0; j < 3; j++) {
 800212a:	f109 0901 	add.w	r9, r9, #1
 800212e:	f1b9 0f03 	cmp.w	r9, #3
 8002132:	f102 020c 	add.w	r2, r2, #12
 8002136:	f104 040c 	add.w	r4, r4, #12
 800213a:	f100 0004 	add.w	r0, r0, #4
 800213e:	d1d2      	bne.n	80020e6 <calibrateTouch+0x402>
	textsize = (size > 0) ? size : 1;
 8002140:	2602      	movs	r6, #2
	cursor_x = x;
 8002142:	f04f 0a0a 	mov.w	sl, #10
	cursor_y = y;
 8002146:	f04f 0828 	mov.w	r8, #40	; 0x28
	fillScreen(GREEN);
 800214a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
	cursor_x = x;
 800214e:	4c6b      	ldr	r4, [pc, #428]	; (80022fc <calibrateTouch+0x618>)
	cursor_y = y;
 8002150:	4f68      	ldr	r7, [pc, #416]	; (80022f4 <calibrateTouch+0x610>)
	textsize = (size > 0) ? size : 1;
 8002152:	4d6b      	ldr	r5, [pc, #428]	; (8002300 <calibrateTouch+0x61c>)
	fillScreen(GREEN);
 8002154:	f7ff fbd4 	bl	8001900 <fillScreen>
	sprintf(resultx, "%i", touchx1);
 8002158:	9a03      	ldr	r2, [sp, #12]
 800215a:	496a      	ldr	r1, [pc, #424]	; (8002304 <calibrateTouch+0x620>)
 800215c:	a81a      	add	r0, sp, #104	; 0x68
 800215e:	f000 fb1f 	bl	80027a0 <siprintf>
	cursor_x = x;
 8002162:	f04f 096e 	mov.w	r9, #110	; 0x6e
	print(resultx);
 8002166:	a81a      	add	r0, sp, #104	; 0x68
	cursor_y = y;
 8002168:	f8a7 8000 	strh.w	r8, [r7]
	cursor_x = x;
 800216c:	f8a4 a000 	strh.w	sl, [r4]
	textsize = (size > 0) ? size : 1;
 8002170:	702e      	strb	r6, [r5, #0]
	print(resultx);
 8002172:	f7ff fc9b 	bl	8001aac <print>
	sprintf(resultx, "%i", touchy1);
 8002176:	9a02      	ldr	r2, [sp, #8]
 8002178:	4962      	ldr	r1, [pc, #392]	; (8002304 <calibrateTouch+0x620>)
 800217a:	a81a      	add	r0, sp, #104	; 0x68
 800217c:	f000 fb10 	bl	80027a0 <siprintf>
	cursor_y = y;
 8002180:	f8a7 8000 	strh.w	r8, [r7]
 8002184:	f04f 0850 	mov.w	r8, #80	; 0x50
	print(resultx);
 8002188:	a81a      	add	r0, sp, #104	; 0x68
	cursor_x = x;
 800218a:	f8a4 9000 	strh.w	r9, [r4]
	textsize = (size > 0) ? size : 1;
 800218e:	702e      	strb	r6, [r5, #0]
	print(resultx);
 8002190:	f7ff fc8c 	bl	8001aac <print>
	sprintf(resultx, "%i", touchx2);
 8002194:	9a04      	ldr	r2, [sp, #16]
 8002196:	495b      	ldr	r1, [pc, #364]	; (8002304 <calibrateTouch+0x620>)
 8002198:	a81a      	add	r0, sp, #104	; 0x68
 800219a:	f000 fb01 	bl	80027a0 <siprintf>
	print(resultx);
 800219e:	a81a      	add	r0, sp, #104	; 0x68
	cursor_y = y;
 80021a0:	f8a7 8000 	strh.w	r8, [r7]
	cursor_x = x;
 80021a4:	f8a4 a000 	strh.w	sl, [r4]
	textsize = (size > 0) ? size : 1;
 80021a8:	702e      	strb	r6, [r5, #0]
	print(resultx);
 80021aa:	f7ff fc7f 	bl	8001aac <print>
	sprintf(resulty, "%i", touchy2);
 80021ae:	9a05      	ldr	r2, [sp, #20]
 80021b0:	4954      	ldr	r1, [pc, #336]	; (8002304 <calibrateTouch+0x620>)
 80021b2:	a827      	add	r0, sp, #156	; 0x9c
 80021b4:	f000 faf4 	bl	80027a0 <siprintf>
	cursor_y = y;
 80021b8:	f8a7 8000 	strh.w	r8, [r7]
 80021bc:	f04f 0878 	mov.w	r8, #120	; 0x78
	print(resulty);
 80021c0:	a827      	add	r0, sp, #156	; 0x9c
	cursor_x = x;
 80021c2:	f8a4 9000 	strh.w	r9, [r4]
	textsize = (size > 0) ? size : 1;
 80021c6:	702e      	strb	r6, [r5, #0]
	print(resulty);
 80021c8:	f7ff fc70 	bl	8001aac <print>
	sprintf(resulty, "%i", touchx3);
 80021cc:	9a06      	ldr	r2, [sp, #24]
 80021ce:	494d      	ldr	r1, [pc, #308]	; (8002304 <calibrateTouch+0x620>)
 80021d0:	a827      	add	r0, sp, #156	; 0x9c
 80021d2:	f000 fae5 	bl	80027a0 <siprintf>
	print(resulty);
 80021d6:	a827      	add	r0, sp, #156	; 0x9c
	cursor_y = y;
 80021d8:	f8a7 8000 	strh.w	r8, [r7]
	cursor_x = x;
 80021dc:	f8a4 a000 	strh.w	sl, [r4]
	textsize = (size > 0) ? size : 1;
 80021e0:	702e      	strb	r6, [r5, #0]
	print(resulty);
 80021e2:	f7ff fc63 	bl	8001aac <print>
	sprintf(resulty, "%i", touchy3);
 80021e6:	9a07      	ldr	r2, [sp, #28]
 80021e8:	4946      	ldr	r1, [pc, #280]	; (8002304 <calibrateTouch+0x620>)
 80021ea:	a827      	add	r0, sp, #156	; 0x9c
 80021ec:	f000 fad8 	bl	80027a0 <siprintf>
	print(resulty);
 80021f0:	a827      	add	r0, sp, #156	; 0x9c
	cursor_y = y;
 80021f2:	f8a7 8000 	strh.w	r8, [r7]
	cursor_x = x;
 80021f6:	f8a4 9000 	strh.w	r9, [r4]
	textsize = (size > 0) ? size : 1;
 80021fa:	702e      	strb	r6, [r5, #0]
	print(resulty);
 80021fc:	f7ff fc56 	bl	8001aac <print>
	alphaX = (ident[0][0]*x1) + (ident[0][1]*x2) + (x3);
 8002200:	21cf      	movs	r1, #207	; 0xcf
 8002202:	f04f 0c1b 	mov.w	ip, #27
 8002206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002208:	9a08      	ldr	r2, [sp, #32]
 800220a:	fb01 f803 	mul.w	r8, r1, r3
	betaX = (ident[1][0]*x1) + (ident[1][1]*x2) + (x3);
 800220e:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
	alphaX = (ident[0][0]*x1) + (ident[0][1]*x2) + (x3);
 8002212:	fb0c 8802 	mla	r8, ip, r2, r8
	deltaX = (ident[2][0]*x1) + (ident[2][1]*x2) + (x3);
 8002216:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
	betaX = (ident[1][0]*x1) + (ident[1][1]*x2) + (x3);
 800221a:	fb01 f20e 	mul.w	r2, r1, lr
 800221e:	980b      	ldr	r0, [sp, #44]	; 0x2c
	deltaX = (ident[2][0]*x1) + (ident[2][1]*x2) + (x3);
 8002220:	fb01 f10b 	mul.w	r1, r1, fp
	betaX = (ident[1][0]*x1) + (ident[1][1]*x2) + (x3);
 8002224:	fb0c 2000 	mla	r0, ip, r0, r2
	deltaX = (ident[2][0]*x1) + (ident[2][1]*x2) + (x3);
 8002228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800222a:	fb0c 1102 	mla	r1, ip, r2, r1
	alphaY = (ident[0][0]*y1) + (ident[0][1]*y2) + (y3);
 800222e:	2264      	movs	r2, #100	; 0x64
	betaY = (ident[1][0]*y1) + (ident[1][1]*y2) + (y3);
 8002230:	fb02 0e1e 	mls	lr, r2, lr, r0
	alphaY = (ident[0][0]*y1) + (ident[0][1]*y2) + (y3);
 8002234:	fb02 8313 	mls	r3, r2, r3, r8
	deltaY = (ident[2][0]*y1) + (ident[2][1]*y2) + (y3);
 8002238:	fb02 1b1b 	mls	fp, r2, fp, r1
	Y = (alphaY * touchy1) + (betaY * touchy1) + deltaY;
 800223c:	9a02      	ldr	r2, [sp, #8]
	betaX = (ident[1][0]*x1) + (ident[1][1]*x2) + (x3);
 800223e:	30cf      	adds	r0, #207	; 0xcf
	betaY = (ident[1][0]*y1) + (ident[1][1]*y2) + (y3);
 8002240:	4473      	add	r3, lr
	X = (alphaX * touchx1) + (betaX * touchy1) + deltaX;
 8002242:	4350      	muls	r0, r2
	deltaY = (ident[2][0]*y1) + (ident[2][1]*y2) + (y3);
 8002244:	44e3      	add	fp, ip
	Y = (alphaY * touchy1) + (betaY * touchy1) + deltaY;
 8002246:	3336      	adds	r3, #54	; 0x36
 8002248:	fb02 bb03 	mla	fp, r2, r3, fp
	X = (alphaX * touchx1) + (betaX * touchy1) + deltaX;
 800224c:	9b03      	ldr	r3, [sp, #12]
	alphaX = (ident[0][0]*x1) + (ident[0][1]*x2) + (x3);
 800224e:	f108 08cf 	add.w	r8, r8, #207	; 0xcf
	X = (alphaX * touchx1) + (betaX * touchy1) + deltaX;
 8002252:	fb03 0808 	mla	r8, r3, r8, r0
	deltaX = (ident[2][0]*x1) + (ident[2][1]*x2) + (x3);
 8002256:	31cf      	adds	r1, #207	; 0xcf
	sprintf(resulty, "%i", X);
 8002258:	eb08 0201 	add.w	r2, r8, r1
	cursor_y = y;
 800225c:	f04f 08a0 	mov.w	r8, #160	; 0xa0
	sprintf(resulty, "%i", X);
 8002260:	4928      	ldr	r1, [pc, #160]	; (8002304 <calibrateTouch+0x620>)
 8002262:	a827      	add	r0, sp, #156	; 0x9c
 8002264:	f000 fa9c 	bl	80027a0 <siprintf>
	print(resulty);
 8002268:	a827      	add	r0, sp, #156	; 0x9c
	cursor_x = x;
 800226a:	f8a4 a000 	strh.w	sl, [r4]
	cursor_y = y;
 800226e:	f8a7 8000 	strh.w	r8, [r7]
	textsize = (size > 0) ? size : 1;
 8002272:	702e      	strb	r6, [r5, #0]
	print(resulty);
 8002274:	f7ff fc1a 	bl	8001aac <print>
	sprintf(resulty, "%i", Y);
 8002278:	465a      	mov	r2, fp
 800227a:	4922      	ldr	r1, [pc, #136]	; (8002304 <calibrateTouch+0x620>)
 800227c:	a827      	add	r0, sp, #156	; 0x9c
 800227e:	f000 fa8f 	bl	80027a0 <siprintf>
	print(resulty);
 8002282:	a827      	add	r0, sp, #156	; 0x9c
	cursor_x = x;
 8002284:	f8a4 9000 	strh.w	r9, [r4]
	cursor_y = y;
 8002288:	f8a7 8000 	strh.w	r8, [r7]
	textsize = (size > 0) ? size : 1;
 800228c:	702e      	strb	r6, [r5, #0]
	print(resulty);
 800228e:	f7ff fc0d 	bl	8001aac <print>
	run = true;
 8002292:	2201      	movs	r2, #1
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <calibrateTouch+0x624>)
 8002296:	701a      	strb	r2, [r3, #0]
}
 8002298:	b035      	add	sp, #212	; 0xd4
 800229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800229e:	2300      	movs	r3, #0
 80022a0:	ad08      	add	r5, sp, #32
					A[j][k] = A[i][k] - (A[i][j] * A[j][k]);
 80022a2:	eb0e 0b01 	add.w	fp, lr, r1
 80022a6:	eb05 0a01 	add.w	sl, r5, r1
 80022aa:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80022ae:	f85b 7023 	ldr.w	r7, [fp, r3, lsl #2]
 80022b2:	f858 5001 	ldr.w	r5, [r8, r1]
 80022b6:	fb06 7515 	mls	r5, r6, r5, r7
 80022ba:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					ident[i][k] = ident[i][k] - (A[i][j] * ident[j][k]);
 80022be:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 80022c2:	f85a 7023 	ldr.w	r7, [sl, r3, lsl #2]
 80022c6:	f858 5001 	ldr.w	r5, [r8, r1]
 80022ca:	fb06 7515 	mls	r5, r6, r5, r7
 80022ce:	f84a 5023 	str.w	r5, [sl, r3, lsl #2]
				for (int k = 0; k < 3; k++) {
 80022d2:	3301      	adds	r3, #1
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d1e8      	bne.n	80022aa <calibrateTouch+0x5c6>
 80022d8:	e720      	b.n	800211c <calibrateTouch+0x438>
		if (failcount >= 10000) {
 80022da:	459b      	cmp	fp, r3
 80022dc:	f73f ad74 	bgt.w	8001dc8 <calibrateTouch+0xe4>
 80022e0:	e587      	b.n	8001df2 <calibrateTouch+0x10e>
		if (failcount >= 10000) {
 80022e2:	459b      	cmp	fp, r3
 80022e4:	f73f ae09 	bgt.w	8001efa <calibrateTouch+0x216>
 80022e8:	e61b      	b.n	8001f22 <calibrateTouch+0x23e>
		if (failcount >= 10000) {
 80022ea:	459b      	cmp	fp, r3
 80022ec:	f73f aeb7 	bgt.w	800205e <calibrateTouch+0x37a>
 80022f0:	e6c9      	b.n	8002086 <calibrateTouch+0x3a2>
 80022f2:	bf00      	nop
 80022f4:	200000c8 	.word	0x200000c8
 80022f8:	0800310c 	.word	0x0800310c
 80022fc:	20000158 	.word	0x20000158
 8002300:	2000015b 	.word	0x2000015b
 8002304:	08003109 	.word	0x08003109
 8002308:	200000a4 	.word	0x200000a4

0800230c <rs_output>:

void rs_output() {
 800230c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = RS_PIN;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800230e:	2200      	movs	r2, #0
 8002310:	2303      	movs	r3, #3
 8002312:	2004      	movs	r0, #4
 8002314:	2101      	movs	r1, #1
 8002316:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	  HAL_GPIO_Init(RS_PORT, &GPIO_InitStruct);
 800231a:	4669      	mov	r1, sp
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <rs_output+0x1c>)
 800231e:	f7fe fbfd 	bl	8000b1c <HAL_GPIO_Init>
}
 8002322:	b005      	add	sp, #20
 8002324:	f85d fb04 	ldr.w	pc, [sp], #4
 8002328:	40010800 	.word	0x40010800

0800232c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)	{
 800232c:	b508      	push	{r3, lr}
	if(hadc->Instance == ADC1)	{
 800232e:	6802      	ldr	r2, [r0, #0]
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002332:	429a      	cmp	r2, r3
 8002334:	d10f      	bne.n	8002356 <HAL_ADC_ConvCpltCallback+0x2a>
		val_adc1 = ADC_BUF[0];
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_ADC_ConvCpltCallback+0x30>)
 8002338:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_ADC_ConvCpltCallback+0x34>)
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	6011      	str	r1, [r2, #0]
		val_adc2 = ADC_BUF[1];
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_ADC_ConvCpltCallback+0x38>)
 8002342:	601a      	str	r2, [r3, #0]
		flag_adc = 0;
 8002344:	2200      	movs	r2, #0
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002348:	601a      	str	r2, [r3, #0]
		rs_output();
 800234a:	f7ff ffdf 	bl	800230c <rs_output>
}
 800234e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		wr_output();
 8002352:	f7ff bbef 	b.w	8001b34 <wr_output>
 8002356:	bd08      	pop	{r3, pc}
 8002358:	40012400 	.word	0x40012400
 800235c:	20000160 	.word	0x20000160
 8002360:	200000cc 	.word	0x200000cc
 8002364:	200000d4 	.word	0x200000d4
 8002368:	2000001c 	.word	0x2000001c

0800236c <begin>:
void begin(uint16_t ID) {
 800236c:	b538      	push	{r3, r4, r5, lr}
    _lcd_xor = 0;
 800236e:	2400      	movs	r4, #0
	wr_output();
 8002370:	f7ff fbe0 	bl	8001b34 <wr_output>
	rs_output();
 8002374:	f7ff ffca 	bl	800230c <rs_output>
    reset();
 8002378:	f7ff fba5 	bl	8001ac6 <reset>
    _lcd_xor = 0;
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <begin+0x48>)
	_lcd_capable = 0 | XSA_XEA_16BIT | REV_SCREEN;
 800237e:	4d0e      	ldr	r5, [pc, #56]	; (80023b8 <begin+0x4c>)
    _lcd_xor = 0;
 8002380:	801c      	strh	r4, [r3, #0]
	_lcd_capable = 0 | XSA_XEA_16BIT | REV_SCREEN;
 8002382:	f44f 5381 	mov.w	r3, #4128	; 0x1020
	init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
 8002386:	21a4      	movs	r1, #164	; 0xa4
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <begin+0x50>)
	_lcd_capable = 0 | XSA_XEA_16BIT | REV_SCREEN;
 800238a:	802b      	strh	r3, [r5, #0]
	init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
 800238c:	f7ff f88a 	bl	80014a4 <init_table16>
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8002390:	882b      	ldrh	r3, [r5, #0]
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <begin+0x54>)
 8002394:	f3c3 3300 	ubfx	r3, r3, #12, #1
    invertDisplay(false);
 8002398:	4620      	mov	r0, r4
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800239a:	8013      	strh	r3, [r2, #0]
    invertDisplay(false);
 800239c:	f7ff f864 	bl	8001468 <invertDisplay>
    setRotation(3);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f7ff f955 	bl	8001650 <setRotation>
}
 80023a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fillScreen(GREEN);
 80023aa:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80023ae:	f7ff baa7 	b.w	8001900 <fillScreen>
 80023b2:	bf00      	nop
 80023b4:	20000156 	.word	0x20000156
 80023b8:	200000c6 	.word	0x200000c6
 80023bc:	0800303c 	.word	0x0800303c
 80023c0:	200000d0 	.word	0x200000d0

080023c4 <main>:
{
 80023c4:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	4c56      	ldr	r4, [pc, #344]	; (8002520 <main+0x15c>)
{
 80023c8:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80023ca:	f7fd feeb 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80023ce:	f7fe ff75 	bl	80012bc <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d2:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80023d4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d6:	f043 0310 	orr.w	r3, r3, #16
 80023da:	61a3      	str	r3, [r4, #24]
 80023dc:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80023de:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80023ec:	484d      	ldr	r0, [pc, #308]	; (8002524 <main+0x160>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ee:	f043 0320 	orr.w	r3, r3, #32
 80023f2:	61a3      	str	r3, [r4, #24]
 80023f4:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	9303      	str	r3, [sp, #12]
 80023fe:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002402:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	f043 0304 	orr.w	r3, r3, #4
 8002408:	61a3      	str	r3, [r4, #24]
 800240a:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	9304      	str	r3, [sp, #16]
 8002414:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002418:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241c:	f043 0308 	orr.w	r3, r3, #8
 8002420:	61a3      	str	r3, [r4, #24]
 8002422:	69a3      	ldr	r3, [r4, #24]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	9305      	str	r3, [sp, #20]
 800242a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800242c:	f7fe fc56 	bl	8000cdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	2119      	movs	r1, #25
 8002434:	483c      	ldr	r0, [pc, #240]	; (8002528 <main+0x164>)
 8002436:	f7fe fc51 	bl	8000cdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5 
 800243a:	2200      	movs	r2, #0
 800243c:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8002440:	483a      	ldr	r0, [pc, #232]	; (800252c <main+0x168>)
 8002442:	f7fe fc4b 	bl	8000cdc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002446:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244a:	a906      	add	r1, sp, #24
 800244c:	4835      	ldr	r0, [pc, #212]	; (8002524 <main+0x160>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800244e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002450:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002456:	f7fe fb61 	bl	8000b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800245a:	2319      	movs	r3, #25
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	a906      	add	r1, sp, #24
 800245e:	4832      	ldr	r0, [pc, #200]	; (8002528 <main+0x164>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8002460:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002466:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f7fe fb57 	bl	8000b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800246e:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	a906      	add	r1, sp, #24
 8002472:	482d      	ldr	r0, [pc, #180]	; (8002528 <main+0x164>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002474:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002476:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f7fe fb4f 	bl	8000b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5 
 800247e:	f44f 637f 	mov.w	r3, #4080	; 0xff0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	a906      	add	r1, sp, #24
 8002484:	4829      	ldr	r0, [pc, #164]	; (800252c <main+0x168>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5 
 8002486:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002488:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800248c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002490:	f7fe fb44 	bl	8000b1c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002494:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002496:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002498:	433b      	orrs	r3, r7
 800249a:	6163      	str	r3, [r4, #20]
 800249c:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800249e:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024a0:	403b      	ands	r3, r7
 80024a2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024a4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024a8:	f7fe f9ca 	bl	8000840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024ac:	200b      	movs	r0, #11
 80024ae:	f7fe f9fb 	bl	80008a8 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 80024b2:	4c1f      	ldr	r4, [pc, #124]	; (8002530 <main+0x16c>)
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <main+0x170>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024b6:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 80024b8:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024be:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024c0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024c4:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024c6:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024c8:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ca:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 80024cc:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024ce:	f7fe f923 	bl	8000718 <HAL_ADC_Init>
 80024d2:	b100      	cbz	r0, 80024d6 <main+0x112>
 80024d4:	e7fe      	b.n	80024d4 <main+0x110>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024d6:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d8:	a906      	add	r1, sp, #24
 80024da:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80024dc:	9706      	str	r7, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024de:	9707      	str	r7, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024e0:	f7fd ff48 	bl	8000374 <HAL_ADC_ConfigChannel>
 80024e4:	b100      	cbz	r0, 80024e8 <main+0x124>
 80024e6:	e7fe      	b.n	80024e6 <main+0x122>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024e8:	a906      	add	r1, sp, #24
 80024ea:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80024ec:	9606      	str	r6, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024ee:	9607      	str	r6, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f0:	f7fd ff40 	bl	8000374 <HAL_ADC_ConfigChannel>
 80024f4:	b100      	cbz	r0, 80024f8 <main+0x134>
 80024f6:	e7fe      	b.n	80024f6 <main+0x132>
  begin(0x1289);
 80024f8:	f241 2089 	movw	r0, #4745	; 0x1289
 80024fc:	f7ff ff36 	bl	800236c <begin>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_BUF,2);
 8002500:	4632      	mov	r2, r6
 8002502:	490d      	ldr	r1, [pc, #52]	; (8002538 <main+0x174>)
 8002504:	4620      	mov	r0, r4
 8002506:	f7fe f857 	bl	80005b8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 800250a:	4620      	mov	r0, r4
 800250c:	f7fd ffee 	bl	80004ec <HAL_ADC_Start_IT>
	  if(!run) calibrateTouch();
 8002510:	4c0a      	ldr	r4, [pc, #40]	; (800253c <main+0x178>)
 8002512:	7823      	ldrb	r3, [r4, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1fd      	bne.n	8002514 <main+0x150>
 8002518:	f7ff fbe4 	bl	8001ce4 <calibrateTouch>
 800251c:	e7f9      	b.n	8002512 <main+0x14e>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	40011000 	.word	0x40011000
 8002528:	40010800 	.word	0x40010800
 800252c:	40010c00 	.word	0x40010c00
 8002530:	200000dc 	.word	0x200000dc
 8002534:	40012400 	.word	0x40012400
 8002538:	20000160 	.word	0x20000160
 800253c:	200000a4 	.word	0x200000a4

08002540 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002540:	e7fe      	b.n	8002540 <_Error_Handler>
	...

08002544 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_MspInit+0x98>)
{
 8002546:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002548:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	619a      	str	r2, [r3, #24]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	f002 0201 	and.w	r2, r2, #1
 8002558:	9200      	str	r2, [sp, #0]
 800255a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002562:	61da      	str	r2, [r3, #28]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256e:	f7fe f955 	bl	800081c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	f06f 000b 	mvn.w	r0, #11
 8002578:	4611      	mov	r1, r2
 800257a:	f7fe f961 	bl	8000840 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	f06f 000a 	mvn.w	r0, #10
 8002584:	4611      	mov	r1, r2
 8002586:	f7fe f95b 	bl	8000840 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	f06f 0009 	mvn.w	r0, #9
 8002590:	4611      	mov	r1, r2
 8002592:	f7fe f955 	bl	8000840 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	f06f 0004 	mvn.w	r0, #4
 800259c:	4611      	mov	r1, r2
 800259e:	f7fe f94f 	bl	8000840 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	f06f 0003 	mvn.w	r0, #3
 80025a8:	4611      	mov	r1, r2
 80025aa:	f7fe f949 	bl	8000840 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	f06f 0001 	mvn.w	r0, #1
 80025b4:	4611      	mov	r1, r2
 80025b6:	f7fe f943 	bl	8000840 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	4611      	mov	r1, r2
 80025c2:	f7fe f93d 	bl	8000840 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025c6:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <HAL_MspInit+0x9c>)
 80025c8:	6853      	ldr	r3, [r2, #4]
 80025ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d4:	b003      	add	sp, #12
 80025d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010000 	.word	0x40010000

080025e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025e4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80025e6:	6802      	ldr	r2, [r0, #0]
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_ADC_MspInit+0x8c>)
{
 80025ea:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 80025ec:	429a      	cmp	r2, r3
{
 80025ee:	4605      	mov	r5, r0
  if(hadc->Instance==ADC1)
 80025f0:	d13c      	bne.n	800266c <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025f2:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80025f6:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f8:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	619a      	str	r2, [r3, #24]
 8002600:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800260c:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	4819      	ldr	r0, [pc, #100]	; (8002674 <HAL_ADC_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002610:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002612:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f7fe fa82 	bl	8000b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002618:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261a:	4817      	ldr	r0, [pc, #92]	; (8002678 <HAL_ADC_MspInit+0x94>)
 800261c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800261e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002620:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002622:	f7fe fa7b 	bl	8000b1c <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002626:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8002628:	4c14      	ldr	r4, [pc, #80]	; (800267c <HAL_ADC_MspInit+0x98>)
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800262c:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800262e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002632:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002634:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8002638:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800263a:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800263c:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800263e:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002640:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002642:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002644:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002646:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002648:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800264a:	f7fe f961 	bl	8000910 <HAL_DMA_Init>
 800264e:	b118      	cbz	r0, 8002658 <HAL_ADC_MspInit+0x74>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002650:	217b      	movs	r1, #123	; 0x7b
 8002652:	480c      	ldr	r0, [pc, #48]	; (8002684 <HAL_ADC_MspInit+0xa0>)
 8002654:	f7ff ff74 	bl	8002540 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002658:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800265a:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800265c:	2012      	movs	r0, #18
 800265e:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002660:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002662:	f7fe f8ed 	bl	8000840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002666:	2012      	movs	r0, #18
 8002668:	f7fe f91e 	bl	80008a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800266c:	b007      	add	sp, #28
 800266e:	bd30      	pop	{r4, r5, pc}
 8002670:	40012400 	.word	0x40012400
 8002674:	40010800 	.word	0x40010800
 8002678:	40010c00 	.word	0x40010c00
 800267c:	2000010c 	.word	0x2000010c
 8002680:	40020008 	.word	0x40020008
 8002684:	0800d498 	.word	0x0800d498

08002688 <NMI_Handler>:
 8002688:	4770      	bx	lr

0800268a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800268a:	e7fe      	b.n	800268a <HardFault_Handler>

0800268c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800268c:	e7fe      	b.n	800268c <MemManage_Handler>

0800268e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800268e:	e7fe      	b.n	800268e <BusFault_Handler>

08002690 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002690:	e7fe      	b.n	8002690 <UsageFault_Handler>

08002692 <SVC_Handler>:
 8002692:	4770      	bx	lr

08002694 <DebugMon_Handler>:
 8002694:	4770      	bx	lr

08002696 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002696:	4770      	bx	lr

08002698 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269a:	f7fd fd95 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80026a2:	f7fe b930 	b.w	8000906 <HAL_SYSTICK_IRQHandler>
	...

080026a8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026a8:	4801      	ldr	r0, [pc, #4]	; (80026b0 <DMA1_Channel1_IRQHandler+0x8>)
 80026aa:	f7fe b9a3 	b.w	80009f4 <HAL_DMA_IRQHandler>
 80026ae:	bf00      	nop
 80026b0:	2000010c 	.word	0x2000010c

080026b4 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026b4:	4801      	ldr	r0, [pc, #4]	; (80026bc <ADC1_2_IRQHandler+0x8>)
 80026b6:	f7fd bdd9 	b.w	800026c <HAL_ADC_IRQHandler>
 80026ba:	bf00      	nop
 80026bc:	200000dc 	.word	0x200000dc

080026c0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <SystemInit+0x40>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <SystemInit+0x44>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80026d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026dc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026e4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80026ec:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80026ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80026f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <SystemInit+0x48>)
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	f8ff0000 	.word	0xf8ff0000
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800270c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800270e:	e003      	b.n	8002718 <LoopCopyDataInit>

08002710 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002712:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002714:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002716:	3104      	adds	r1, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002718:	480a      	ldr	r0, [pc, #40]	; (8002744 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800271c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800271e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002720:	d3f6      	bcc.n	8002710 <CopyDataInit>
  ldr r2, =_sbss
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002724:	e002      	b.n	800272c <LoopFillZerobss>

08002726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002728:	f842 3b04 	str.w	r3, [r2], #4

0800272c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800272e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002730:	d3f9      	bcc.n	8002726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002732:	f7ff ffc5 	bl	80026c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002736:	f000 f80f 	bl	8002758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800273a:	f7ff fe43 	bl	80023c4 <main>
  bx lr
 800273e:	4770      	bx	lr
  ldr r3, =_sidata
 8002740:	0800d500 	.word	0x0800d500
  ldr r0, =_sdata
 8002744:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002748:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 800274c:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8002750:	20000174 	.word	0x20000174

08002754 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <CAN1_RX1_IRQHandler>
	...

08002758 <__libc_init_array>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2500      	movs	r5, #0
 800275c:	4e0c      	ldr	r6, [pc, #48]	; (8002790 <__libc_init_array+0x38>)
 800275e:	4c0d      	ldr	r4, [pc, #52]	; (8002794 <__libc_init_array+0x3c>)
 8002760:	1ba4      	subs	r4, r4, r6
 8002762:	10a4      	asrs	r4, r4, #2
 8002764:	42a5      	cmp	r5, r4
 8002766:	d109      	bne.n	800277c <__libc_init_array+0x24>
 8002768:	f000 fc54 	bl	8003014 <_init>
 800276c:	2500      	movs	r5, #0
 800276e:	4e0a      	ldr	r6, [pc, #40]	; (8002798 <__libc_init_array+0x40>)
 8002770:	4c0a      	ldr	r4, [pc, #40]	; (800279c <__libc_init_array+0x44>)
 8002772:	1ba4      	subs	r4, r4, r6
 8002774:	10a4      	asrs	r4, r4, #2
 8002776:	42a5      	cmp	r5, r4
 8002778:	d105      	bne.n	8002786 <__libc_init_array+0x2e>
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002780:	4798      	blx	r3
 8002782:	3501      	adds	r5, #1
 8002784:	e7ee      	b.n	8002764 <__libc_init_array+0xc>
 8002786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800278a:	4798      	blx	r3
 800278c:	3501      	adds	r5, #1
 800278e:	e7f2      	b.n	8002776 <__libc_init_array+0x1e>
 8002790:	0800d4f8 	.word	0x0800d4f8
 8002794:	0800d4f8 	.word	0x0800d4f8
 8002798:	0800d4f8 	.word	0x0800d4f8
 800279c:	0800d4fc 	.word	0x0800d4fc

080027a0 <siprintf>:
 80027a0:	b40e      	push	{r1, r2, r3}
 80027a2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80027a6:	b500      	push	{lr}
 80027a8:	b09c      	sub	sp, #112	; 0x70
 80027aa:	f8ad 1014 	strh.w	r1, [sp, #20]
 80027ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027b2:	9104      	str	r1, [sp, #16]
 80027b4:	9107      	str	r1, [sp, #28]
 80027b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027ba:	ab1d      	add	r3, sp, #116	; 0x74
 80027bc:	9002      	str	r0, [sp, #8]
 80027be:	9006      	str	r0, [sp, #24]
 80027c0:	4808      	ldr	r0, [pc, #32]	; (80027e4 <siprintf+0x44>)
 80027c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80027c6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80027ca:	6800      	ldr	r0, [r0, #0]
 80027cc:	a902      	add	r1, sp, #8
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	f000 f866 	bl	80028a0 <_svfiprintf_r>
 80027d4:	2200      	movs	r2, #0
 80027d6:	9b02      	ldr	r3, [sp, #8]
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	b01c      	add	sp, #112	; 0x70
 80027dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80027e0:	b003      	add	sp, #12
 80027e2:	4770      	bx	lr
 80027e4:	20000024 	.word	0x20000024

080027e8 <__ssputs_r>:
 80027e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ec:	688e      	ldr	r6, [r1, #8]
 80027ee:	4682      	mov	sl, r0
 80027f0:	429e      	cmp	r6, r3
 80027f2:	460c      	mov	r4, r1
 80027f4:	4691      	mov	r9, r2
 80027f6:	4698      	mov	r8, r3
 80027f8:	d835      	bhi.n	8002866 <__ssputs_r+0x7e>
 80027fa:	898a      	ldrh	r2, [r1, #12]
 80027fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002800:	d031      	beq.n	8002866 <__ssputs_r+0x7e>
 8002802:	2302      	movs	r3, #2
 8002804:	6825      	ldr	r5, [r4, #0]
 8002806:	6909      	ldr	r1, [r1, #16]
 8002808:	1a6f      	subs	r7, r5, r1
 800280a:	6965      	ldr	r5, [r4, #20]
 800280c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002810:	fb95 f5f3 	sdiv	r5, r5, r3
 8002814:	f108 0301 	add.w	r3, r8, #1
 8002818:	443b      	add	r3, r7
 800281a:	429d      	cmp	r5, r3
 800281c:	bf38      	it	cc
 800281e:	461d      	movcc	r5, r3
 8002820:	0553      	lsls	r3, r2, #21
 8002822:	d531      	bpl.n	8002888 <__ssputs_r+0xa0>
 8002824:	4629      	mov	r1, r5
 8002826:	f000 fb47 	bl	8002eb8 <_malloc_r>
 800282a:	4606      	mov	r6, r0
 800282c:	b950      	cbnz	r0, 8002844 <__ssputs_r+0x5c>
 800282e:	230c      	movs	r3, #12
 8002830:	f8ca 3000 	str.w	r3, [sl]
 8002834:	89a3      	ldrh	r3, [r4, #12]
 8002836:	f04f 30ff 	mov.w	r0, #4294967295
 800283a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283e:	81a3      	strh	r3, [r4, #12]
 8002840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002844:	463a      	mov	r2, r7
 8002846:	6921      	ldr	r1, [r4, #16]
 8002848:	f000 fac4 	bl	8002dd4 <memcpy>
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002856:	81a3      	strh	r3, [r4, #12]
 8002858:	6126      	str	r6, [r4, #16]
 800285a:	443e      	add	r6, r7
 800285c:	6026      	str	r6, [r4, #0]
 800285e:	4646      	mov	r6, r8
 8002860:	6165      	str	r5, [r4, #20]
 8002862:	1bed      	subs	r5, r5, r7
 8002864:	60a5      	str	r5, [r4, #8]
 8002866:	4546      	cmp	r6, r8
 8002868:	bf28      	it	cs
 800286a:	4646      	movcs	r6, r8
 800286c:	4649      	mov	r1, r9
 800286e:	4632      	mov	r2, r6
 8002870:	6820      	ldr	r0, [r4, #0]
 8002872:	f000 faba 	bl	8002dea <memmove>
 8002876:	68a3      	ldr	r3, [r4, #8]
 8002878:	2000      	movs	r0, #0
 800287a:	1b9b      	subs	r3, r3, r6
 800287c:	60a3      	str	r3, [r4, #8]
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	441e      	add	r6, r3
 8002882:	6026      	str	r6, [r4, #0]
 8002884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002888:	462a      	mov	r2, r5
 800288a:	f000 fb73 	bl	8002f74 <_realloc_r>
 800288e:	4606      	mov	r6, r0
 8002890:	2800      	cmp	r0, #0
 8002892:	d1e1      	bne.n	8002858 <__ssputs_r+0x70>
 8002894:	6921      	ldr	r1, [r4, #16]
 8002896:	4650      	mov	r0, sl
 8002898:	f000 fac2 	bl	8002e20 <_free_r>
 800289c:	e7c7      	b.n	800282e <__ssputs_r+0x46>
	...

080028a0 <_svfiprintf_r>:
 80028a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a4:	b09d      	sub	sp, #116	; 0x74
 80028a6:	9303      	str	r3, [sp, #12]
 80028a8:	898b      	ldrh	r3, [r1, #12]
 80028aa:	4680      	mov	r8, r0
 80028ac:	061c      	lsls	r4, r3, #24
 80028ae:	460d      	mov	r5, r1
 80028b0:	4616      	mov	r6, r2
 80028b2:	d50f      	bpl.n	80028d4 <_svfiprintf_r+0x34>
 80028b4:	690b      	ldr	r3, [r1, #16]
 80028b6:	b96b      	cbnz	r3, 80028d4 <_svfiprintf_r+0x34>
 80028b8:	2140      	movs	r1, #64	; 0x40
 80028ba:	f000 fafd 	bl	8002eb8 <_malloc_r>
 80028be:	6028      	str	r0, [r5, #0]
 80028c0:	6128      	str	r0, [r5, #16]
 80028c2:	b928      	cbnz	r0, 80028d0 <_svfiprintf_r+0x30>
 80028c4:	230c      	movs	r3, #12
 80028c6:	f8c8 3000 	str.w	r3, [r8]
 80028ca:	f04f 30ff 	mov.w	r0, #4294967295
 80028ce:	e0c4      	b.n	8002a5a <_svfiprintf_r+0x1ba>
 80028d0:	2340      	movs	r3, #64	; 0x40
 80028d2:	616b      	str	r3, [r5, #20]
 80028d4:	2300      	movs	r3, #0
 80028d6:	9309      	str	r3, [sp, #36]	; 0x24
 80028d8:	2320      	movs	r3, #32
 80028da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028de:	2330      	movs	r3, #48	; 0x30
 80028e0:	f04f 0b01 	mov.w	fp, #1
 80028e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028e8:	4637      	mov	r7, r6
 80028ea:	463c      	mov	r4, r7
 80028ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d13c      	bne.n	800296e <_svfiprintf_r+0xce>
 80028f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80028f8:	d00b      	beq.n	8002912 <_svfiprintf_r+0x72>
 80028fa:	4653      	mov	r3, sl
 80028fc:	4632      	mov	r2, r6
 80028fe:	4629      	mov	r1, r5
 8002900:	4640      	mov	r0, r8
 8002902:	f7ff ff71 	bl	80027e8 <__ssputs_r>
 8002906:	3001      	adds	r0, #1
 8002908:	f000 80a2 	beq.w	8002a50 <_svfiprintf_r+0x1b0>
 800290c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800290e:	4453      	add	r3, sl
 8002910:	9309      	str	r3, [sp, #36]	; 0x24
 8002912:	783b      	ldrb	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 809b 	beq.w	8002a50 <_svfiprintf_r+0x1b0>
 800291a:	2300      	movs	r3, #0
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	9304      	str	r3, [sp, #16]
 8002922:	9307      	str	r3, [sp, #28]
 8002924:	9205      	str	r2, [sp, #20]
 8002926:	9306      	str	r3, [sp, #24]
 8002928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800292c:	931a      	str	r3, [sp, #104]	; 0x68
 800292e:	2205      	movs	r2, #5
 8002930:	7821      	ldrb	r1, [r4, #0]
 8002932:	4850      	ldr	r0, [pc, #320]	; (8002a74 <_svfiprintf_r+0x1d4>)
 8002934:	f000 fa40 	bl	8002db8 <memchr>
 8002938:	1c67      	adds	r7, r4, #1
 800293a:	9b04      	ldr	r3, [sp, #16]
 800293c:	b9d8      	cbnz	r0, 8002976 <_svfiprintf_r+0xd6>
 800293e:	06d9      	lsls	r1, r3, #27
 8002940:	bf44      	itt	mi
 8002942:	2220      	movmi	r2, #32
 8002944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002948:	071a      	lsls	r2, r3, #28
 800294a:	bf44      	itt	mi
 800294c:	222b      	movmi	r2, #43	; 0x2b
 800294e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002952:	7822      	ldrb	r2, [r4, #0]
 8002954:	2a2a      	cmp	r2, #42	; 0x2a
 8002956:	d016      	beq.n	8002986 <_svfiprintf_r+0xe6>
 8002958:	2100      	movs	r1, #0
 800295a:	200a      	movs	r0, #10
 800295c:	9a07      	ldr	r2, [sp, #28]
 800295e:	4627      	mov	r7, r4
 8002960:	783b      	ldrb	r3, [r7, #0]
 8002962:	3401      	adds	r4, #1
 8002964:	3b30      	subs	r3, #48	; 0x30
 8002966:	2b09      	cmp	r3, #9
 8002968:	d950      	bls.n	8002a0c <_svfiprintf_r+0x16c>
 800296a:	b1c9      	cbz	r1, 80029a0 <_svfiprintf_r+0x100>
 800296c:	e011      	b.n	8002992 <_svfiprintf_r+0xf2>
 800296e:	2b25      	cmp	r3, #37	; 0x25
 8002970:	d0c0      	beq.n	80028f4 <_svfiprintf_r+0x54>
 8002972:	4627      	mov	r7, r4
 8002974:	e7b9      	b.n	80028ea <_svfiprintf_r+0x4a>
 8002976:	4a3f      	ldr	r2, [pc, #252]	; (8002a74 <_svfiprintf_r+0x1d4>)
 8002978:	463c      	mov	r4, r7
 800297a:	1a80      	subs	r0, r0, r2
 800297c:	fa0b f000 	lsl.w	r0, fp, r0
 8002980:	4318      	orrs	r0, r3
 8002982:	9004      	str	r0, [sp, #16]
 8002984:	e7d3      	b.n	800292e <_svfiprintf_r+0x8e>
 8002986:	9a03      	ldr	r2, [sp, #12]
 8002988:	1d11      	adds	r1, r2, #4
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	9103      	str	r1, [sp, #12]
 800298e:	2a00      	cmp	r2, #0
 8002990:	db01      	blt.n	8002996 <_svfiprintf_r+0xf6>
 8002992:	9207      	str	r2, [sp, #28]
 8002994:	e004      	b.n	80029a0 <_svfiprintf_r+0x100>
 8002996:	4252      	negs	r2, r2
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	9207      	str	r2, [sp, #28]
 800299e:	9304      	str	r3, [sp, #16]
 80029a0:	783b      	ldrb	r3, [r7, #0]
 80029a2:	2b2e      	cmp	r3, #46	; 0x2e
 80029a4:	d10d      	bne.n	80029c2 <_svfiprintf_r+0x122>
 80029a6:	787b      	ldrb	r3, [r7, #1]
 80029a8:	1c79      	adds	r1, r7, #1
 80029aa:	2b2a      	cmp	r3, #42	; 0x2a
 80029ac:	d132      	bne.n	8002a14 <_svfiprintf_r+0x174>
 80029ae:	9b03      	ldr	r3, [sp, #12]
 80029b0:	3702      	adds	r7, #2
 80029b2:	1d1a      	adds	r2, r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	9203      	str	r2, [sp, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bfb8      	it	lt
 80029bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80029c0:	9305      	str	r3, [sp, #20]
 80029c2:	4c2d      	ldr	r4, [pc, #180]	; (8002a78 <_svfiprintf_r+0x1d8>)
 80029c4:	2203      	movs	r2, #3
 80029c6:	7839      	ldrb	r1, [r7, #0]
 80029c8:	4620      	mov	r0, r4
 80029ca:	f000 f9f5 	bl	8002db8 <memchr>
 80029ce:	b138      	cbz	r0, 80029e0 <_svfiprintf_r+0x140>
 80029d0:	2340      	movs	r3, #64	; 0x40
 80029d2:	1b00      	subs	r0, r0, r4
 80029d4:	fa03 f000 	lsl.w	r0, r3, r0
 80029d8:	9b04      	ldr	r3, [sp, #16]
 80029da:	3701      	adds	r7, #1
 80029dc:	4303      	orrs	r3, r0
 80029de:	9304      	str	r3, [sp, #16]
 80029e0:	7839      	ldrb	r1, [r7, #0]
 80029e2:	2206      	movs	r2, #6
 80029e4:	4825      	ldr	r0, [pc, #148]	; (8002a7c <_svfiprintf_r+0x1dc>)
 80029e6:	1c7e      	adds	r6, r7, #1
 80029e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029ec:	f000 f9e4 	bl	8002db8 <memchr>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d035      	beq.n	8002a60 <_svfiprintf_r+0x1c0>
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <_svfiprintf_r+0x1e0>)
 80029f6:	b9fb      	cbnz	r3, 8002a38 <_svfiprintf_r+0x198>
 80029f8:	9b03      	ldr	r3, [sp, #12]
 80029fa:	3307      	adds	r3, #7
 80029fc:	f023 0307 	bic.w	r3, r3, #7
 8002a00:	3308      	adds	r3, #8
 8002a02:	9303      	str	r3, [sp, #12]
 8002a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a06:	444b      	add	r3, r9
 8002a08:	9309      	str	r3, [sp, #36]	; 0x24
 8002a0a:	e76d      	b.n	80028e8 <_svfiprintf_r+0x48>
 8002a0c:	fb00 3202 	mla	r2, r0, r2, r3
 8002a10:	2101      	movs	r1, #1
 8002a12:	e7a4      	b.n	800295e <_svfiprintf_r+0xbe>
 8002a14:	2300      	movs	r3, #0
 8002a16:	240a      	movs	r4, #10
 8002a18:	4618      	mov	r0, r3
 8002a1a:	9305      	str	r3, [sp, #20]
 8002a1c:	460f      	mov	r7, r1
 8002a1e:	783a      	ldrb	r2, [r7, #0]
 8002a20:	3101      	adds	r1, #1
 8002a22:	3a30      	subs	r2, #48	; 0x30
 8002a24:	2a09      	cmp	r2, #9
 8002a26:	d903      	bls.n	8002a30 <_svfiprintf_r+0x190>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ca      	beq.n	80029c2 <_svfiprintf_r+0x122>
 8002a2c:	9005      	str	r0, [sp, #20]
 8002a2e:	e7c8      	b.n	80029c2 <_svfiprintf_r+0x122>
 8002a30:	fb04 2000 	mla	r0, r4, r0, r2
 8002a34:	2301      	movs	r3, #1
 8002a36:	e7f1      	b.n	8002a1c <_svfiprintf_r+0x17c>
 8002a38:	ab03      	add	r3, sp, #12
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	462a      	mov	r2, r5
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <_svfiprintf_r+0x1e4>)
 8002a40:	a904      	add	r1, sp, #16
 8002a42:	4640      	mov	r0, r8
 8002a44:	f3af 8000 	nop.w
 8002a48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a4c:	4681      	mov	r9, r0
 8002a4e:	d1d9      	bne.n	8002a04 <_svfiprintf_r+0x164>
 8002a50:	89ab      	ldrh	r3, [r5, #12]
 8002a52:	065b      	lsls	r3, r3, #25
 8002a54:	f53f af39 	bmi.w	80028ca <_svfiprintf_r+0x2a>
 8002a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a5a:	b01d      	add	sp, #116	; 0x74
 8002a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a60:	ab03      	add	r3, sp, #12
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	462a      	mov	r2, r5
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <_svfiprintf_r+0x1e4>)
 8002a68:	a904      	add	r1, sp, #16
 8002a6a:	4640      	mov	r0, r8
 8002a6c:	f000 f884 	bl	8002b78 <_printf_i>
 8002a70:	e7ea      	b.n	8002a48 <_svfiprintf_r+0x1a8>
 8002a72:	bf00      	nop
 8002a74:	0800d4c3 	.word	0x0800d4c3
 8002a78:	0800d4c9 	.word	0x0800d4c9
 8002a7c:	0800d4cd 	.word	0x0800d4cd
 8002a80:	00000000 	.word	0x00000000
 8002a84:	080027e9 	.word	0x080027e9

08002a88 <_printf_common>:
 8002a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a8c:	4691      	mov	r9, r2
 8002a8e:	461f      	mov	r7, r3
 8002a90:	688a      	ldr	r2, [r1, #8]
 8002a92:	690b      	ldr	r3, [r1, #16]
 8002a94:	4606      	mov	r6, r0
 8002a96:	4293      	cmp	r3, r2
 8002a98:	bfb8      	it	lt
 8002a9a:	4613      	movlt	r3, r2
 8002a9c:	f8c9 3000 	str.w	r3, [r9]
 8002aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002aa4:	460c      	mov	r4, r1
 8002aa6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002aaa:	b112      	cbz	r2, 8002ab2 <_printf_common+0x2a>
 8002aac:	3301      	adds	r3, #1
 8002aae:	f8c9 3000 	str.w	r3, [r9]
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	0699      	lsls	r1, r3, #26
 8002ab6:	bf42      	ittt	mi
 8002ab8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002abc:	3302      	addmi	r3, #2
 8002abe:	f8c9 3000 	strmi.w	r3, [r9]
 8002ac2:	6825      	ldr	r5, [r4, #0]
 8002ac4:	f015 0506 	ands.w	r5, r5, #6
 8002ac8:	d107      	bne.n	8002ada <_printf_common+0x52>
 8002aca:	f104 0a19 	add.w	sl, r4, #25
 8002ace:	68e3      	ldr	r3, [r4, #12]
 8002ad0:	f8d9 2000 	ldr.w	r2, [r9]
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	429d      	cmp	r5, r3
 8002ad8:	db2a      	blt.n	8002b30 <_printf_common+0xa8>
 8002ada:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ade:	6822      	ldr	r2, [r4, #0]
 8002ae0:	3300      	adds	r3, #0
 8002ae2:	bf18      	it	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	0692      	lsls	r2, r2, #26
 8002ae8:	d42f      	bmi.n	8002b4a <_printf_common+0xc2>
 8002aea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002aee:	4639      	mov	r1, r7
 8002af0:	4630      	mov	r0, r6
 8002af2:	47c0      	blx	r8
 8002af4:	3001      	adds	r0, #1
 8002af6:	d022      	beq.n	8002b3e <_printf_common+0xb6>
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	68e5      	ldr	r5, [r4, #12]
 8002afc:	f003 0306 	and.w	r3, r3, #6
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	bf18      	it	ne
 8002b04:	2500      	movne	r5, #0
 8002b06:	f8d9 2000 	ldr.w	r2, [r9]
 8002b0a:	f04f 0900 	mov.w	r9, #0
 8002b0e:	bf08      	it	eq
 8002b10:	1aad      	subeq	r5, r5, r2
 8002b12:	68a3      	ldr	r3, [r4, #8]
 8002b14:	6922      	ldr	r2, [r4, #16]
 8002b16:	bf08      	it	eq
 8002b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	bfc4      	itt	gt
 8002b20:	1a9b      	subgt	r3, r3, r2
 8002b22:	18ed      	addgt	r5, r5, r3
 8002b24:	341a      	adds	r4, #26
 8002b26:	454d      	cmp	r5, r9
 8002b28:	d11b      	bne.n	8002b62 <_printf_common+0xda>
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b30:	2301      	movs	r3, #1
 8002b32:	4652      	mov	r2, sl
 8002b34:	4639      	mov	r1, r7
 8002b36:	4630      	mov	r0, r6
 8002b38:	47c0      	blx	r8
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	d103      	bne.n	8002b46 <_printf_common+0xbe>
 8002b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b46:	3501      	adds	r5, #1
 8002b48:	e7c1      	b.n	8002ace <_printf_common+0x46>
 8002b4a:	2030      	movs	r0, #48	; 0x30
 8002b4c:	18e1      	adds	r1, r4, r3
 8002b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b58:	4422      	add	r2, r4
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b60:	e7c3      	b.n	8002aea <_printf_common+0x62>
 8002b62:	2301      	movs	r3, #1
 8002b64:	4622      	mov	r2, r4
 8002b66:	4639      	mov	r1, r7
 8002b68:	4630      	mov	r0, r6
 8002b6a:	47c0      	blx	r8
 8002b6c:	3001      	adds	r0, #1
 8002b6e:	d0e6      	beq.n	8002b3e <_printf_common+0xb6>
 8002b70:	f109 0901 	add.w	r9, r9, #1
 8002b74:	e7d7      	b.n	8002b26 <_printf_common+0x9e>
	...

08002b78 <_printf_i>:
 8002b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b7c:	4617      	mov	r7, r2
 8002b7e:	7e0a      	ldrb	r2, [r1, #24]
 8002b80:	b085      	sub	sp, #20
 8002b82:	2a6e      	cmp	r2, #110	; 0x6e
 8002b84:	4698      	mov	r8, r3
 8002b86:	4606      	mov	r6, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b8c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002b90:	f000 80bc 	beq.w	8002d0c <_printf_i+0x194>
 8002b94:	d81a      	bhi.n	8002bcc <_printf_i+0x54>
 8002b96:	2a63      	cmp	r2, #99	; 0x63
 8002b98:	d02e      	beq.n	8002bf8 <_printf_i+0x80>
 8002b9a:	d80a      	bhi.n	8002bb2 <_printf_i+0x3a>
 8002b9c:	2a00      	cmp	r2, #0
 8002b9e:	f000 80c8 	beq.w	8002d32 <_printf_i+0x1ba>
 8002ba2:	2a58      	cmp	r2, #88	; 0x58
 8002ba4:	f000 808a 	beq.w	8002cbc <_printf_i+0x144>
 8002ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002bb0:	e02a      	b.n	8002c08 <_printf_i+0x90>
 8002bb2:	2a64      	cmp	r2, #100	; 0x64
 8002bb4:	d001      	beq.n	8002bba <_printf_i+0x42>
 8002bb6:	2a69      	cmp	r2, #105	; 0x69
 8002bb8:	d1f6      	bne.n	8002ba8 <_printf_i+0x30>
 8002bba:	6821      	ldr	r1, [r4, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002bc2:	d023      	beq.n	8002c0c <_printf_i+0x94>
 8002bc4:	1d11      	adds	r1, r2, #4
 8002bc6:	6019      	str	r1, [r3, #0]
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	e027      	b.n	8002c1c <_printf_i+0xa4>
 8002bcc:	2a73      	cmp	r2, #115	; 0x73
 8002bce:	f000 80b4 	beq.w	8002d3a <_printf_i+0x1c2>
 8002bd2:	d808      	bhi.n	8002be6 <_printf_i+0x6e>
 8002bd4:	2a6f      	cmp	r2, #111	; 0x6f
 8002bd6:	d02a      	beq.n	8002c2e <_printf_i+0xb6>
 8002bd8:	2a70      	cmp	r2, #112	; 0x70
 8002bda:	d1e5      	bne.n	8002ba8 <_printf_i+0x30>
 8002bdc:	680a      	ldr	r2, [r1, #0]
 8002bde:	f042 0220 	orr.w	r2, r2, #32
 8002be2:	600a      	str	r2, [r1, #0]
 8002be4:	e003      	b.n	8002bee <_printf_i+0x76>
 8002be6:	2a75      	cmp	r2, #117	; 0x75
 8002be8:	d021      	beq.n	8002c2e <_printf_i+0xb6>
 8002bea:	2a78      	cmp	r2, #120	; 0x78
 8002bec:	d1dc      	bne.n	8002ba8 <_printf_i+0x30>
 8002bee:	2278      	movs	r2, #120	; 0x78
 8002bf0:	496f      	ldr	r1, [pc, #444]	; (8002db0 <_printf_i+0x238>)
 8002bf2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002bf6:	e064      	b.n	8002cc2 <_printf_i+0x14a>
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002bfe:	1d11      	adds	r1, r2, #4
 8002c00:	6019      	str	r1, [r3, #0]
 8002c02:	6813      	ldr	r3, [r2, #0]
 8002c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0a3      	b.n	8002d54 <_printf_i+0x1dc>
 8002c0c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c10:	f102 0104 	add.w	r1, r2, #4
 8002c14:	6019      	str	r1, [r3, #0]
 8002c16:	d0d7      	beq.n	8002bc8 <_printf_i+0x50>
 8002c18:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	da03      	bge.n	8002c28 <_printf_i+0xb0>
 8002c20:	222d      	movs	r2, #45	; 0x2d
 8002c22:	425b      	negs	r3, r3
 8002c24:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c28:	4962      	ldr	r1, [pc, #392]	; (8002db4 <_printf_i+0x23c>)
 8002c2a:	220a      	movs	r2, #10
 8002c2c:	e017      	b.n	8002c5e <_printf_i+0xe6>
 8002c2e:	6820      	ldr	r0, [r4, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002c36:	d003      	beq.n	8002c40 <_printf_i+0xc8>
 8002c38:	1d08      	adds	r0, r1, #4
 8002c3a:	6018      	str	r0, [r3, #0]
 8002c3c:	680b      	ldr	r3, [r1, #0]
 8002c3e:	e006      	b.n	8002c4e <_printf_i+0xd6>
 8002c40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c44:	f101 0004 	add.w	r0, r1, #4
 8002c48:	6018      	str	r0, [r3, #0]
 8002c4a:	d0f7      	beq.n	8002c3c <_printf_i+0xc4>
 8002c4c:	880b      	ldrh	r3, [r1, #0]
 8002c4e:	2a6f      	cmp	r2, #111	; 0x6f
 8002c50:	bf14      	ite	ne
 8002c52:	220a      	movne	r2, #10
 8002c54:	2208      	moveq	r2, #8
 8002c56:	4957      	ldr	r1, [pc, #348]	; (8002db4 <_printf_i+0x23c>)
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002c5e:	6865      	ldr	r5, [r4, #4]
 8002c60:	2d00      	cmp	r5, #0
 8002c62:	60a5      	str	r5, [r4, #8]
 8002c64:	f2c0 809c 	blt.w	8002da0 <_printf_i+0x228>
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	f020 0004 	bic.w	r0, r0, #4
 8002c6e:	6020      	str	r0, [r4, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d13f      	bne.n	8002cf4 <_printf_i+0x17c>
 8002c74:	2d00      	cmp	r5, #0
 8002c76:	f040 8095 	bne.w	8002da4 <_printf_i+0x22c>
 8002c7a:	4675      	mov	r5, lr
 8002c7c:	2a08      	cmp	r2, #8
 8002c7e:	d10b      	bne.n	8002c98 <_printf_i+0x120>
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	07da      	lsls	r2, r3, #31
 8002c84:	d508      	bpl.n	8002c98 <_printf_i+0x120>
 8002c86:	6923      	ldr	r3, [r4, #16]
 8002c88:	6862      	ldr	r2, [r4, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	bfde      	ittt	le
 8002c8e:	2330      	movle	r3, #48	; 0x30
 8002c90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c98:	ebae 0305 	sub.w	r3, lr, r5
 8002c9c:	6123      	str	r3, [r4, #16]
 8002c9e:	f8cd 8000 	str.w	r8, [sp]
 8002ca2:	463b      	mov	r3, r7
 8002ca4:	aa03      	add	r2, sp, #12
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4630      	mov	r0, r6
 8002caa:	f7ff feed 	bl	8002a88 <_printf_common>
 8002cae:	3001      	adds	r0, #1
 8002cb0:	d155      	bne.n	8002d5e <_printf_i+0x1e6>
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb6:	b005      	add	sp, #20
 8002cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cbc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002cc0:	493c      	ldr	r1, [pc, #240]	; (8002db4 <_printf_i+0x23c>)
 8002cc2:	6822      	ldr	r2, [r4, #0]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cca:	f100 0504 	add.w	r5, r0, #4
 8002cce:	601d      	str	r5, [r3, #0]
 8002cd0:	d001      	beq.n	8002cd6 <_printf_i+0x15e>
 8002cd2:	6803      	ldr	r3, [r0, #0]
 8002cd4:	e002      	b.n	8002cdc <_printf_i+0x164>
 8002cd6:	0655      	lsls	r5, r2, #25
 8002cd8:	d5fb      	bpl.n	8002cd2 <_printf_i+0x15a>
 8002cda:	8803      	ldrh	r3, [r0, #0]
 8002cdc:	07d0      	lsls	r0, r2, #31
 8002cde:	bf44      	itt	mi
 8002ce0:	f042 0220 	orrmi.w	r2, r2, #32
 8002ce4:	6022      	strmi	r2, [r4, #0]
 8002ce6:	b91b      	cbnz	r3, 8002cf0 <_printf_i+0x178>
 8002ce8:	6822      	ldr	r2, [r4, #0]
 8002cea:	f022 0220 	bic.w	r2, r2, #32
 8002cee:	6022      	str	r2, [r4, #0]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	e7b1      	b.n	8002c58 <_printf_i+0xe0>
 8002cf4:	4675      	mov	r5, lr
 8002cf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8002cfa:	fb02 3310 	mls	r3, r2, r0, r3
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d04:	4603      	mov	r3, r0
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d1f5      	bne.n	8002cf6 <_printf_i+0x17e>
 8002d0a:	e7b7      	b.n	8002c7c <_printf_i+0x104>
 8002d0c:	6808      	ldr	r0, [r1, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d14:	6949      	ldr	r1, [r1, #20]
 8002d16:	d004      	beq.n	8002d22 <_printf_i+0x1aa>
 8002d18:	1d10      	adds	r0, r2, #4
 8002d1a:	6018      	str	r0, [r3, #0]
 8002d1c:	6813      	ldr	r3, [r2, #0]
 8002d1e:	6019      	str	r1, [r3, #0]
 8002d20:	e007      	b.n	8002d32 <_printf_i+0x1ba>
 8002d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d26:	f102 0004 	add.w	r0, r2, #4
 8002d2a:	6018      	str	r0, [r3, #0]
 8002d2c:	6813      	ldr	r3, [r2, #0]
 8002d2e:	d0f6      	beq.n	8002d1e <_printf_i+0x1a6>
 8002d30:	8019      	strh	r1, [r3, #0]
 8002d32:	2300      	movs	r3, #0
 8002d34:	4675      	mov	r5, lr
 8002d36:	6123      	str	r3, [r4, #16]
 8002d38:	e7b1      	b.n	8002c9e <_printf_i+0x126>
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	1d11      	adds	r1, r2, #4
 8002d3e:	6019      	str	r1, [r3, #0]
 8002d40:	6815      	ldr	r5, [r2, #0]
 8002d42:	2100      	movs	r1, #0
 8002d44:	6862      	ldr	r2, [r4, #4]
 8002d46:	4628      	mov	r0, r5
 8002d48:	f000 f836 	bl	8002db8 <memchr>
 8002d4c:	b108      	cbz	r0, 8002d52 <_printf_i+0x1da>
 8002d4e:	1b40      	subs	r0, r0, r5
 8002d50:	6060      	str	r0, [r4, #4]
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	6123      	str	r3, [r4, #16]
 8002d56:	2300      	movs	r3, #0
 8002d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d5c:	e79f      	b.n	8002c9e <_printf_i+0x126>
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	462a      	mov	r2, r5
 8002d62:	4639      	mov	r1, r7
 8002d64:	4630      	mov	r0, r6
 8002d66:	47c0      	blx	r8
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d0a2      	beq.n	8002cb2 <_printf_i+0x13a>
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	079b      	lsls	r3, r3, #30
 8002d70:	d507      	bpl.n	8002d82 <_printf_i+0x20a>
 8002d72:	2500      	movs	r5, #0
 8002d74:	f104 0919 	add.w	r9, r4, #25
 8002d78:	68e3      	ldr	r3, [r4, #12]
 8002d7a:	9a03      	ldr	r2, [sp, #12]
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	429d      	cmp	r5, r3
 8002d80:	db05      	blt.n	8002d8e <_printf_i+0x216>
 8002d82:	68e0      	ldr	r0, [r4, #12]
 8002d84:	9b03      	ldr	r3, [sp, #12]
 8002d86:	4298      	cmp	r0, r3
 8002d88:	bfb8      	it	lt
 8002d8a:	4618      	movlt	r0, r3
 8002d8c:	e793      	b.n	8002cb6 <_printf_i+0x13e>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	464a      	mov	r2, r9
 8002d92:	4639      	mov	r1, r7
 8002d94:	4630      	mov	r0, r6
 8002d96:	47c0      	blx	r8
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d08a      	beq.n	8002cb2 <_printf_i+0x13a>
 8002d9c:	3501      	adds	r5, #1
 8002d9e:	e7eb      	b.n	8002d78 <_printf_i+0x200>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1a7      	bne.n	8002cf4 <_printf_i+0x17c>
 8002da4:	780b      	ldrb	r3, [r1, #0]
 8002da6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002daa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dae:	e765      	b.n	8002c7c <_printf_i+0x104>
 8002db0:	0800d4e5 	.word	0x0800d4e5
 8002db4:	0800d4d4 	.word	0x0800d4d4

08002db8 <memchr>:
 8002db8:	b510      	push	{r4, lr}
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	4402      	add	r2, r0
 8002dbe:	4290      	cmp	r0, r2
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	d101      	bne.n	8002dc8 <memchr+0x10>
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	bd10      	pop	{r4, pc}
 8002dc8:	781c      	ldrb	r4, [r3, #0]
 8002dca:	3001      	adds	r0, #1
 8002dcc:	428c      	cmp	r4, r1
 8002dce:	d1f6      	bne.n	8002dbe <memchr+0x6>
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd10      	pop	{r4, pc}

08002dd4 <memcpy>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	1e43      	subs	r3, r0, #1
 8002dd8:	440a      	add	r2, r1
 8002dda:	4291      	cmp	r1, r2
 8002ddc:	d100      	bne.n	8002de0 <memcpy+0xc>
 8002dde:	bd10      	pop	{r4, pc}
 8002de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002de8:	e7f7      	b.n	8002dda <memcpy+0x6>

08002dea <memmove>:
 8002dea:	4288      	cmp	r0, r1
 8002dec:	b510      	push	{r4, lr}
 8002dee:	eb01 0302 	add.w	r3, r1, r2
 8002df2:	d803      	bhi.n	8002dfc <memmove+0x12>
 8002df4:	1e42      	subs	r2, r0, #1
 8002df6:	4299      	cmp	r1, r3
 8002df8:	d10c      	bne.n	8002e14 <memmove+0x2a>
 8002dfa:	bd10      	pop	{r4, pc}
 8002dfc:	4298      	cmp	r0, r3
 8002dfe:	d2f9      	bcs.n	8002df4 <memmove+0xa>
 8002e00:	1881      	adds	r1, r0, r2
 8002e02:	1ad2      	subs	r2, r2, r3
 8002e04:	42d3      	cmn	r3, r2
 8002e06:	d100      	bne.n	8002e0a <memmove+0x20>
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002e12:	e7f7      	b.n	8002e04 <memmove+0x1a>
 8002e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e18:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002e1c:	e7eb      	b.n	8002df6 <memmove+0xc>
	...

08002e20 <_free_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4605      	mov	r5, r0
 8002e24:	2900      	cmp	r1, #0
 8002e26:	d043      	beq.n	8002eb0 <_free_r+0x90>
 8002e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e2c:	1f0c      	subs	r4, r1, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bfb8      	it	lt
 8002e32:	18e4      	addlt	r4, r4, r3
 8002e34:	f000 f8d4 	bl	8002fe0 <__malloc_lock>
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <_free_r+0x94>)
 8002e3a:	6813      	ldr	r3, [r2, #0]
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	b933      	cbnz	r3, 8002e4e <_free_r+0x2e>
 8002e40:	6063      	str	r3, [r4, #4]
 8002e42:	6014      	str	r4, [r2, #0]
 8002e44:	4628      	mov	r0, r5
 8002e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e4a:	f000 b8ca 	b.w	8002fe2 <__malloc_unlock>
 8002e4e:	42a3      	cmp	r3, r4
 8002e50:	d90b      	bls.n	8002e6a <_free_r+0x4a>
 8002e52:	6821      	ldr	r1, [r4, #0]
 8002e54:	1862      	adds	r2, r4, r1
 8002e56:	4293      	cmp	r3, r2
 8002e58:	bf01      	itttt	eq
 8002e5a:	681a      	ldreq	r2, [r3, #0]
 8002e5c:	685b      	ldreq	r3, [r3, #4]
 8002e5e:	1852      	addeq	r2, r2, r1
 8002e60:	6022      	streq	r2, [r4, #0]
 8002e62:	6063      	str	r3, [r4, #4]
 8002e64:	6004      	str	r4, [r0, #0]
 8002e66:	e7ed      	b.n	8002e44 <_free_r+0x24>
 8002e68:	4613      	mov	r3, r2
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	b10a      	cbz	r2, 8002e72 <_free_r+0x52>
 8002e6e:	42a2      	cmp	r2, r4
 8002e70:	d9fa      	bls.n	8002e68 <_free_r+0x48>
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	1858      	adds	r0, r3, r1
 8002e76:	42a0      	cmp	r0, r4
 8002e78:	d10b      	bne.n	8002e92 <_free_r+0x72>
 8002e7a:	6820      	ldr	r0, [r4, #0]
 8002e7c:	4401      	add	r1, r0
 8002e7e:	1858      	adds	r0, r3, r1
 8002e80:	4282      	cmp	r2, r0
 8002e82:	6019      	str	r1, [r3, #0]
 8002e84:	d1de      	bne.n	8002e44 <_free_r+0x24>
 8002e86:	6810      	ldr	r0, [r2, #0]
 8002e88:	6852      	ldr	r2, [r2, #4]
 8002e8a:	4401      	add	r1, r0
 8002e8c:	6019      	str	r1, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	e7d8      	b.n	8002e44 <_free_r+0x24>
 8002e92:	d902      	bls.n	8002e9a <_free_r+0x7a>
 8002e94:	230c      	movs	r3, #12
 8002e96:	602b      	str	r3, [r5, #0]
 8002e98:	e7d4      	b.n	8002e44 <_free_r+0x24>
 8002e9a:	6820      	ldr	r0, [r4, #0]
 8002e9c:	1821      	adds	r1, r4, r0
 8002e9e:	428a      	cmp	r2, r1
 8002ea0:	bf01      	itttt	eq
 8002ea2:	6811      	ldreq	r1, [r2, #0]
 8002ea4:	6852      	ldreq	r2, [r2, #4]
 8002ea6:	1809      	addeq	r1, r1, r0
 8002ea8:	6021      	streq	r1, [r4, #0]
 8002eaa:	6062      	str	r2, [r4, #4]
 8002eac:	605c      	str	r4, [r3, #4]
 8002eae:	e7c9      	b.n	8002e44 <_free_r+0x24>
 8002eb0:	bd38      	pop	{r3, r4, r5, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200000b4 	.word	0x200000b4

08002eb8 <_malloc_r>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	1ccd      	adds	r5, r1, #3
 8002ebc:	f025 0503 	bic.w	r5, r5, #3
 8002ec0:	3508      	adds	r5, #8
 8002ec2:	2d0c      	cmp	r5, #12
 8002ec4:	bf38      	it	cc
 8002ec6:	250c      	movcc	r5, #12
 8002ec8:	2d00      	cmp	r5, #0
 8002eca:	4606      	mov	r6, r0
 8002ecc:	db01      	blt.n	8002ed2 <_malloc_r+0x1a>
 8002ece:	42a9      	cmp	r1, r5
 8002ed0:	d903      	bls.n	8002eda <_malloc_r+0x22>
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	6033      	str	r3, [r6, #0]
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
 8002eda:	f000 f881 	bl	8002fe0 <__malloc_lock>
 8002ede:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <_malloc_r+0xb4>)
 8002ee0:	6814      	ldr	r4, [r2, #0]
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	b991      	cbnz	r1, 8002f0c <_malloc_r+0x54>
 8002ee6:	4c22      	ldr	r4, [pc, #136]	; (8002f70 <_malloc_r+0xb8>)
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	b91b      	cbnz	r3, 8002ef4 <_malloc_r+0x3c>
 8002eec:	4630      	mov	r0, r6
 8002eee:	f000 f867 	bl	8002fc0 <_sbrk_r>
 8002ef2:	6020      	str	r0, [r4, #0]
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	f000 f862 	bl	8002fc0 <_sbrk_r>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d126      	bne.n	8002f4e <_malloc_r+0x96>
 8002f00:	230c      	movs	r3, #12
 8002f02:	4630      	mov	r0, r6
 8002f04:	6033      	str	r3, [r6, #0]
 8002f06:	f000 f86c 	bl	8002fe2 <__malloc_unlock>
 8002f0a:	e7e4      	b.n	8002ed6 <_malloc_r+0x1e>
 8002f0c:	680b      	ldr	r3, [r1, #0]
 8002f0e:	1b5b      	subs	r3, r3, r5
 8002f10:	d41a      	bmi.n	8002f48 <_malloc_r+0x90>
 8002f12:	2b0b      	cmp	r3, #11
 8002f14:	d90f      	bls.n	8002f36 <_malloc_r+0x7e>
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	18cc      	adds	r4, r1, r3
 8002f1a:	50cd      	str	r5, [r1, r3]
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	f000 f860 	bl	8002fe2 <__malloc_unlock>
 8002f22:	f104 000b 	add.w	r0, r4, #11
 8002f26:	1d23      	adds	r3, r4, #4
 8002f28:	f020 0007 	bic.w	r0, r0, #7
 8002f2c:	1ac3      	subs	r3, r0, r3
 8002f2e:	d01b      	beq.n	8002f68 <_malloc_r+0xb0>
 8002f30:	425a      	negs	r2, r3
 8002f32:	50e2      	str	r2, [r4, r3]
 8002f34:	bd70      	pop	{r4, r5, r6, pc}
 8002f36:	428c      	cmp	r4, r1
 8002f38:	bf0b      	itete	eq
 8002f3a:	6863      	ldreq	r3, [r4, #4]
 8002f3c:	684b      	ldrne	r3, [r1, #4]
 8002f3e:	6013      	streq	r3, [r2, #0]
 8002f40:	6063      	strne	r3, [r4, #4]
 8002f42:	bf18      	it	ne
 8002f44:	460c      	movne	r4, r1
 8002f46:	e7e9      	b.n	8002f1c <_malloc_r+0x64>
 8002f48:	460c      	mov	r4, r1
 8002f4a:	6849      	ldr	r1, [r1, #4]
 8002f4c:	e7ca      	b.n	8002ee4 <_malloc_r+0x2c>
 8002f4e:	1cc4      	adds	r4, r0, #3
 8002f50:	f024 0403 	bic.w	r4, r4, #3
 8002f54:	42a0      	cmp	r0, r4
 8002f56:	d005      	beq.n	8002f64 <_malloc_r+0xac>
 8002f58:	1a21      	subs	r1, r4, r0
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f000 f830 	bl	8002fc0 <_sbrk_r>
 8002f60:	3001      	adds	r0, #1
 8002f62:	d0cd      	beq.n	8002f00 <_malloc_r+0x48>
 8002f64:	6025      	str	r5, [r4, #0]
 8002f66:	e7d9      	b.n	8002f1c <_malloc_r+0x64>
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200000b4 	.word	0x200000b4
 8002f70:	200000b8 	.word	0x200000b8

08002f74 <_realloc_r>:
 8002f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f76:	4607      	mov	r7, r0
 8002f78:	4614      	mov	r4, r2
 8002f7a:	460e      	mov	r6, r1
 8002f7c:	b921      	cbnz	r1, 8002f88 <_realloc_r+0x14>
 8002f7e:	4611      	mov	r1, r2
 8002f80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f84:	f7ff bf98 	b.w	8002eb8 <_malloc_r>
 8002f88:	b922      	cbnz	r2, 8002f94 <_realloc_r+0x20>
 8002f8a:	f7ff ff49 	bl	8002e20 <_free_r>
 8002f8e:	4625      	mov	r5, r4
 8002f90:	4628      	mov	r0, r5
 8002f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f94:	f000 f826 	bl	8002fe4 <_malloc_usable_size_r>
 8002f98:	4284      	cmp	r4, r0
 8002f9a:	d90f      	bls.n	8002fbc <_realloc_r+0x48>
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	4638      	mov	r0, r7
 8002fa0:	f7ff ff8a 	bl	8002eb8 <_malloc_r>
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d0f2      	beq.n	8002f90 <_realloc_r+0x1c>
 8002faa:	4631      	mov	r1, r6
 8002fac:	4622      	mov	r2, r4
 8002fae:	f7ff ff11 	bl	8002dd4 <memcpy>
 8002fb2:	4631      	mov	r1, r6
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	f7ff ff33 	bl	8002e20 <_free_r>
 8002fba:	e7e9      	b.n	8002f90 <_realloc_r+0x1c>
 8002fbc:	4635      	mov	r5, r6
 8002fbe:	e7e7      	b.n	8002f90 <_realloc_r+0x1c>

08002fc0 <_sbrk_r>:
 8002fc0:	b538      	push	{r3, r4, r5, lr}
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4c05      	ldr	r4, [pc, #20]	; (8002fdc <_sbrk_r+0x1c>)
 8002fc6:	4605      	mov	r5, r0
 8002fc8:	4608      	mov	r0, r1
 8002fca:	6023      	str	r3, [r4, #0]
 8002fcc:	f000 f814 	bl	8002ff8 <_sbrk>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d102      	bne.n	8002fda <_sbrk_r+0x1a>
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	b103      	cbz	r3, 8002fda <_sbrk_r+0x1a>
 8002fd8:	602b      	str	r3, [r5, #0]
 8002fda:	bd38      	pop	{r3, r4, r5, pc}
 8002fdc:	20000170 	.word	0x20000170

08002fe0 <__malloc_lock>:
 8002fe0:	4770      	bx	lr

08002fe2 <__malloc_unlock>:
 8002fe2:	4770      	bx	lr

08002fe4 <_malloc_usable_size_r>:
 8002fe4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	f1a0 0004 	sub.w	r0, r0, #4
 8002fee:	bfbc      	itt	lt
 8002ff0:	580b      	ldrlt	r3, [r1, r0]
 8002ff2:	18c0      	addlt	r0, r0, r3
 8002ff4:	4770      	bx	lr
	...

08002ff8 <_sbrk>:
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <_sbrk+0x14>)
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	b909      	cbnz	r1, 8003004 <_sbrk+0xc>
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <_sbrk+0x18>)
 8003002:	6019      	str	r1, [r3, #0]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	4402      	add	r2, r0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	4770      	bx	lr
 800300c:	200000bc 	.word	0x200000bc
 8003010:	20000174 	.word	0x20000174

08003014 <_init>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr

08003020 <_fini>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr
