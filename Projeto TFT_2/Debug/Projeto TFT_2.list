
Projeto TFT_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003774  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  08003880  08003880  00013880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08003f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e8  20000088  08003ffc  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000170  08003ffc  00020170  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010667  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021de  00000000  00000000  00030718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004958  00000000  00000000  000328f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006c0  00000000  00000000  00037250  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001398  00000000  00000000  00037910  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000444e  00000000  00000000  00038ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000026c7  00000000  00000000  0003d0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f7bd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001538  00000000  00000000  0003f83c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003868 	.word	0x08003868

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003868 	.word	0x08003868

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 fb92 	bl	800089c <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 fb48 	bl	800081c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000020 	.word	0x20000020
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 fb21 	bl	80007f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 fdf4 	bl	8002da8 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000bc 	.word	0x200000bc

080001ec <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80001ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80001ee:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80001f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001f2:	f012 0f50 	tst.w	r2, #80	; 0x50
 80001f6:	d11b      	bne.n	8000230 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80001f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	6892      	ldr	r2, [r2, #8]
 8000204:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000208:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800020c:	d10c      	bne.n	8000228 <ADC_DMAConvCplt+0x3c>
 800020e:	68da      	ldr	r2, [r3, #12]
 8000210:	b952      	cbnz	r2, 8000228 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000218:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800021a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800021c:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800021e:	bf5e      	ittt	pl
 8000220:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000222:	f042 0201 	orrpl.w	r2, r2, #1
 8000226:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000228:	4618      	mov	r0, r3
 800022a:	f001 f835 	bl	8001298 <HAL_ADC_ConvCpltCallback>
 800022e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000230:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4718      	bx	r3

0800023a <HAL_ADC_ConvHalfCpltCallback>:
 800023a:	4770      	bx	lr

0800023c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800023c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800023e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000240:	f7ff fffb 	bl	800023a <HAL_ADC_ConvHalfCpltCallback>
 8000244:	bd08      	pop	{r3, pc}

08000246 <HAL_ADC_LevelOutOfWindowCallback>:
 8000246:	4770      	bx	lr

08000248 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000248:	6803      	ldr	r3, [r0, #0]
{
 800024a:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800024c:	685a      	ldr	r2, [r3, #4]
{
 800024e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000250:	0690      	lsls	r0, r2, #26
 8000252:	d527      	bpl.n	80002a4 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	0791      	lsls	r1, r2, #30
 8000258:	d524      	bpl.n	80002a4 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800025a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800025c:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800025e:	bf5e      	ittt	pl
 8000260:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000262:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000266:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000268:	689a      	ldr	r2, [r3, #8]
 800026a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800026e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000272:	d110      	bne.n	8000296 <HAL_ADC_IRQHandler+0x4e>
 8000274:	68e2      	ldr	r2, [r4, #12]
 8000276:	b972      	cbnz	r2, 8000296 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000278:	685a      	ldr	r2, [r3, #4]
 800027a:	f022 0220 	bic.w	r2, r2, #32
 800027e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000280:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000286:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000288:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800028a:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800028c:	bf5e      	ittt	pl
 800028e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000290:	f043 0301 	orrpl.w	r3, r3, #1
 8000294:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000296:	4620      	mov	r0, r4
 8000298:	f000 fffe 	bl	8001298 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800029c:	f06f 0212 	mvn.w	r2, #18
 80002a0:	6823      	ldr	r3, [r4, #0]
 80002a2:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80002a4:	6823      	ldr	r3, [r4, #0]
 80002a6:	685a      	ldr	r2, [r3, #4]
 80002a8:	0610      	lsls	r0, r2, #24
 80002aa:	d530      	bpl.n	800030e <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	0751      	lsls	r1, r2, #29
 80002b0:	d52d      	bpl.n	800030e <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002b4:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80002b6:	bf5e      	ittt	pl
 80002b8:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80002ba:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80002be:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002c0:	689a      	ldr	r2, [r3, #8]
 80002c2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80002c6:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80002ca:	d00a      	beq.n	80002e2 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002cc:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002ce:	0550      	lsls	r0, r2, #21
 80002d0:	d416      	bmi.n	8000300 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002d2:	689a      	ldr	r2, [r3, #8]
 80002d4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002d8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80002dc:	d110      	bne.n	8000300 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002de:	68e2      	ldr	r2, [r4, #12]
 80002e0:	b972      	cbnz	r2, 8000300 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002e8:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80002ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002f0:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80002f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002f4:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002f6:	bf5e      	ittt	pl
 80002f8:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80002fa:	f043 0301 	orrpl.w	r3, r3, #1
 80002fe:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000300:	4620      	mov	r0, r4
 8000302:	f000 fa77 	bl	80007f4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000306:	f06f 020c 	mvn.w	r2, #12
 800030a:	6823      	ldr	r3, [r4, #0]
 800030c:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800030e:	6823      	ldr	r3, [r4, #0]
 8000310:	685a      	ldr	r2, [r3, #4]
 8000312:	0652      	lsls	r2, r2, #25
 8000314:	d50d      	bpl.n	8000332 <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	07db      	lsls	r3, r3, #31
 800031a:	d50a      	bpl.n	8000332 <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800031c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800031e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000324:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000326:	f7ff ff8e 	bl	8000246 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800032a:	f06f 0201 	mvn.w	r2, #1
 800032e:	6823      	ldr	r3, [r4, #0]
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	bd10      	pop	{r4, pc}

08000334 <HAL_ADC_ErrorCallback>:
{
 8000334:	4770      	bx	lr

08000336 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000336:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000338:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800033a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000340:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000342:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800034a:	f7ff fff3 	bl	8000334 <HAL_ADC_ErrorCallback>
 800034e:	bd08      	pop	{r3, pc}

08000350 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000350:	2300      	movs	r3, #0
{ 
 8000352:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000354:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000356:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800035a:	2b01      	cmp	r3, #1
 800035c:	d074      	beq.n	8000448 <HAL_ADC_ConfigChannel+0xf8>
 800035e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000360:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000362:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000366:	2d06      	cmp	r5, #6
 8000368:	6802      	ldr	r2, [r0, #0]
 800036a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800036e:	680c      	ldr	r4, [r1, #0]
 8000370:	d825      	bhi.n	80003be <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000372:	442b      	add	r3, r5
 8000374:	251f      	movs	r5, #31
 8000376:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000378:	3b05      	subs	r3, #5
 800037a:	409d      	lsls	r5, r3
 800037c:	ea26 0505 	bic.w	r5, r6, r5
 8000380:	fa04 f303 	lsl.w	r3, r4, r3
 8000384:	432b      	orrs	r3, r5
 8000386:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000388:	2c09      	cmp	r4, #9
 800038a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800038e:	688d      	ldr	r5, [r1, #8]
 8000390:	d92f      	bls.n	80003f2 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000392:	2607      	movs	r6, #7
 8000394:	4423      	add	r3, r4
 8000396:	68d1      	ldr	r1, [r2, #12]
 8000398:	3b1e      	subs	r3, #30
 800039a:	409e      	lsls	r6, r3
 800039c:	ea21 0106 	bic.w	r1, r1, r6
 80003a0:	fa05 f303 	lsl.w	r3, r5, r3
 80003a4:	430b      	orrs	r3, r1
 80003a6:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003a8:	f1a4 0310 	sub.w	r3, r4, #16
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d92b      	bls.n	8000408 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003b0:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	b002      	add	sp, #8
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80003be:	2d0c      	cmp	r5, #12
 80003c0:	d80b      	bhi.n	80003da <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80003c2:	442b      	add	r3, r5
 80003c4:	251f      	movs	r5, #31
 80003c6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80003c8:	3b23      	subs	r3, #35	; 0x23
 80003ca:	409d      	lsls	r5, r3
 80003cc:	ea26 0505 	bic.w	r5, r6, r5
 80003d0:	fa04 f303 	lsl.w	r3, r4, r3
 80003d4:	432b      	orrs	r3, r5
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
 80003d8:	e7d6      	b.n	8000388 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003da:	442b      	add	r3, r5
 80003dc:	251f      	movs	r5, #31
 80003de:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003e0:	3b41      	subs	r3, #65	; 0x41
 80003e2:	409d      	lsls	r5, r3
 80003e4:	ea26 0505 	bic.w	r5, r6, r5
 80003e8:	fa04 f303 	lsl.w	r3, r4, r3
 80003ec:	432b      	orrs	r3, r5
 80003ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003f0:	e7ca      	b.n	8000388 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80003f2:	2607      	movs	r6, #7
 80003f4:	6911      	ldr	r1, [r2, #16]
 80003f6:	4423      	add	r3, r4
 80003f8:	409e      	lsls	r6, r3
 80003fa:	ea21 0106 	bic.w	r1, r1, r6
 80003fe:	fa05 f303 	lsl.w	r3, r5, r3
 8000402:	430b      	orrs	r3, r1
 8000404:	6113      	str	r3, [r2, #16]
 8000406:	e7cf      	b.n	80003a8 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000408:	4b10      	ldr	r3, [pc, #64]	; (800044c <HAL_ADC_ConfigChannel+0xfc>)
 800040a:	429a      	cmp	r2, r3
 800040c:	d116      	bne.n	800043c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800040e:	6893      	ldr	r3, [r2, #8]
 8000410:	021b      	lsls	r3, r3, #8
 8000412:	d4cd      	bmi.n	80003b0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000414:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000416:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800041c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800041e:	d1c7      	bne.n	80003b0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <HAL_ADC_ConfigChannel+0x100>)
 8000422:	4a0c      	ldr	r2, [pc, #48]	; (8000454 <HAL_ADC_ConfigChannel+0x104>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	fbb3 f2f2 	udiv	r2, r3, r2
 800042a:	230a      	movs	r3, #10
 800042c:	4353      	muls	r3, r2
            wait_loop_index--;
 800042e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000430:	9b01      	ldr	r3, [sp, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0bc      	beq.n	80003b0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000436:	9b01      	ldr	r3, [sp, #4]
 8000438:	3b01      	subs	r3, #1
 800043a:	e7f8      	b.n	800042e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800043c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000444:	2301      	movs	r3, #1
 8000446:	e7b4      	b.n	80003b2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000448:	2302      	movs	r3, #2
 800044a:	e7b5      	b.n	80003b8 <HAL_ADC_ConfigChannel+0x68>
 800044c:	40012400 	.word	0x40012400
 8000450:	20000020 	.word	0x20000020
 8000454:	000f4240 	.word	0x000f4240

08000458 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000458:	2300      	movs	r3, #0
{
 800045a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800045c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800045e:	6803      	ldr	r3, [r0, #0]
{
 8000460:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	07d2      	lsls	r2, r2, #31
 8000466:	d502      	bpl.n	800046e <ADC_Enable+0x16>
  return HAL_OK;
 8000468:	2000      	movs	r0, #0
}
 800046a:	b002      	add	sp, #8
 800046c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800046e:	689a      	ldr	r2, [r3, #8]
 8000470:	f042 0201 	orr.w	r2, r2, #1
 8000474:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <ADC_Enable+0x68>)
 8000478:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <ADC_Enable+0x6c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000480:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000482:	9b01      	ldr	r3, [sp, #4]
 8000484:	b9c3      	cbnz	r3, 80004b8 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000486:	f7ff feab 	bl	80001e0 <HAL_GetTick>
 800048a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800048c:	6823      	ldr	r3, [r4, #0]
 800048e:	689d      	ldr	r5, [r3, #8]
 8000490:	f015 0501 	ands.w	r5, r5, #1
 8000494:	d1e8      	bne.n	8000468 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000496:	f7ff fea3 	bl	80001e0 <HAL_GetTick>
 800049a:	1b80      	subs	r0, r0, r6
 800049c:	2802      	cmp	r0, #2
 800049e:	d9f5      	bls.n	800048c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80004a2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80004ae:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004b6:	e7d8      	b.n	800046a <ADC_Enable+0x12>
      wait_loop_index--;
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	e7e0      	b.n	8000480 <ADC_Enable+0x28>
 80004be:	bf00      	nop
 80004c0:	20000020 	.word	0x20000020
 80004c4:	000f4240 	.word	0x000f4240

080004c8 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 80004c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80004cc:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80004ce:	2b01      	cmp	r3, #1
{
 80004d0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80004d2:	d058      	beq.n	8000586 <HAL_ADC_Start_IT+0xbe>
 80004d4:	2301      	movs	r3, #1
 80004d6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80004da:	f7ff ffbd 	bl	8000458 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80004de:	2800      	cmp	r0, #0
 80004e0:	d14d      	bne.n	800057e <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 80004e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004e4:	4a29      	ldr	r2, [pc, #164]	; (800058c <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 80004e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80004ea:	f023 0301 	bic.w	r3, r3, #1
 80004ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d104      	bne.n	8000504 <HAL_ADC_Start_IT+0x3c>
 80004fa:	4925      	ldr	r1, [pc, #148]	; (8000590 <HAL_ADC_Start_IT+0xc8>)
 80004fc:	684a      	ldr	r2, [r1, #4]
 80004fe:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000502:	d132      	bne.n	800056a <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000504:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000506:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800050a:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800050c:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800050e:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000510:	bf41      	itttt	mi
 8000512:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000514:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000518:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800051c:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800051e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000524:	bf1c      	itt	ne
 8000526:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000528:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800052c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800052e:	2200      	movs	r2, #0
 8000530:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000534:	f06f 0202 	mvn.w	r2, #2
 8000538:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	f042 0220 	orr.w	r2, r2, #32
 8000540:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000548:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800054c:	d113      	bne.n	8000576 <HAL_ADC_Start_IT+0xae>
 800054e:	4a0f      	ldr	r2, [pc, #60]	; (800058c <HAL_ADC_Start_IT+0xc4>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d105      	bne.n	8000560 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000554:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000558:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800055a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800055e:	d10a      	bne.n	8000576 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000560:	689a      	ldr	r2, [r3, #8]
 8000562:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800056a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800056c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000570:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000572:	684a      	ldr	r2, [r1, #4]
 8000574:	e7cb      	b.n	800050e <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800057c:	e7f3      	b.n	8000566 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 800057e:	2300      	movs	r3, #0
 8000580:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000584:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000586:	2002      	movs	r0, #2
}
 8000588:	bd10      	pop	{r4, pc}
 800058a:	bf00      	nop
 800058c:	40012800 	.word	0x40012800
 8000590:	40012400 	.word	0x40012400

08000594 <HAL_ADC_Start_DMA>:
{
 8000594:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8000598:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800059a:	4b40      	ldr	r3, [pc, #256]	; (800069c <HAL_ADC_Start_DMA+0x108>)
 800059c:	6802      	ldr	r2, [r0, #0]
{
 800059e:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80005a0:	429a      	cmp	r2, r3
{
 80005a2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80005a4:	d002      	beq.n	80005ac <HAL_ADC_Start_DMA+0x18>
 80005a6:	493e      	ldr	r1, [pc, #248]	; (80006a0 <HAL_ADC_Start_DMA+0x10c>)
 80005a8:	428a      	cmp	r2, r1
 80005aa:	d103      	bne.n	80005b4 <HAL_ADC_Start_DMA+0x20>
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80005b2:	d16e      	bne.n	8000692 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80005b4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d06c      	beq.n	8000696 <HAL_ADC_Start_DMA+0x102>
 80005bc:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80005be:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80005c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80005c4:	f7ff ff48 	bl	8000458 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80005c8:	4606      	mov	r6, r0
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d15d      	bne.n	800068a <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80005ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005d0:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80005d2:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80005d8:	f020 0001 	bic.w	r0, r0, #1
 80005dc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005e0:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80005e2:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005e4:	d104      	bne.n	80005f0 <HAL_ADC_Start_DMA+0x5c>
 80005e6:	4a2d      	ldr	r2, [pc, #180]	; (800069c <HAL_ADC_Start_DMA+0x108>)
 80005e8:	6853      	ldr	r3, [r2, #4]
 80005ea:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80005ee:	d13e      	bne.n	800066e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005f6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005f8:	684b      	ldr	r3, [r1, #4]
 80005fa:	055a      	lsls	r2, r3, #21
 80005fc:	d505      	bpl.n	800060a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80005fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000608:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800060a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800060c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800060e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000612:	bf18      	it	ne
 8000614:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000616:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000618:	bf18      	it	ne
 800061a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800061e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000620:	2300      	movs	r3, #0
 8000622:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000628:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800062a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <HAL_ADC_Start_DMA+0x114>)
 800062e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <HAL_ADC_Start_DMA+0x118>)
 8000632:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000634:	f06f 0302 	mvn.w	r3, #2
 8000638:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800063c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000644:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000648:	4643      	mov	r3, r8
 800064a:	f000 f983 	bl	8000954 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800064e:	6823      	ldr	r3, [r4, #0]
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000656:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	bf0c      	ite	eq
 800065e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000662:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000666:	609a      	str	r2, [r3, #8]
}
 8000668:	4630      	mov	r0, r6
 800066a:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800066e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000674:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000676:	6853      	ldr	r3, [r2, #4]
 8000678:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800067a:	bf41      	itttt	mi
 800067c:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800067e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000682:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000686:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8000688:	e7bf      	b.n	800060a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800068a:	2300      	movs	r3, #0
 800068c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000690:	e7ea      	b.n	8000668 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000692:	2601      	movs	r6, #1
 8000694:	e7e8      	b.n	8000668 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8000696:	2602      	movs	r6, #2
 8000698:	e7e6      	b.n	8000668 <HAL_ADC_Start_DMA+0xd4>
 800069a:	bf00      	nop
 800069c:	40012400 	.word	0x40012400
 80006a0:	40012800 	.word	0x40012800
 80006a4:	080001ed 	.word	0x080001ed
 80006a8:	0800023d 	.word	0x0800023d
 80006ac:	08000337 	.word	0x08000337

080006b0 <ADC_ConversionStop_Disable>:
{
 80006b0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006b2:	6803      	ldr	r3, [r0, #0]
{
 80006b4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	07d2      	lsls	r2, r2, #31
 80006ba:	d401      	bmi.n	80006c0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80006bc:	2000      	movs	r0, #0
 80006be:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	f022 0201 	bic.w	r2, r2, #1
 80006c6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80006c8:	f7ff fd8a 	bl	80001e0 <HAL_GetTick>
 80006cc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	07db      	lsls	r3, r3, #31
 80006d4:	d5f2      	bpl.n	80006bc <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80006d6:	f7ff fd83 	bl	80001e0 <HAL_GetTick>
 80006da:	1b40      	subs	r0, r0, r5
 80006dc:	2802      	cmp	r0, #2
 80006de:	d9f6      	bls.n	80006ce <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006e2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006e4:	f043 0310 	orr.w	r3, r3, #16
 80006e8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006f2:	bd38      	pop	{r3, r4, r5, pc}

080006f4 <HAL_ADC_Init>:
{
 80006f4:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80006f6:	4604      	mov	r4, r0
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d071      	beq.n	80007e0 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80006fe:	b923      	cbnz	r3, 800070a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000702:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000706:	f002 fb9f 	bl	8002e48 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800070a:	4620      	mov	r0, r4
 800070c:	f7ff ffd0 	bl	80006b0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000712:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000716:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000718:	d164      	bne.n	80007e4 <HAL_ADC_Init+0xf0>
 800071a:	2800      	cmp	r0, #0
 800071c:	d162      	bne.n	80007e4 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800071e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000720:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000724:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000726:	f023 0302 	bic.w	r3, r3, #2
 800072a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800072e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000730:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000732:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000734:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000736:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800073a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800073e:	d038      	beq.n	80007b2 <HAL_ADC_Init+0xbe>
 8000740:	2901      	cmp	r1, #1
 8000742:	bf14      	ite	ne
 8000744:	4606      	movne	r6, r0
 8000746:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800074a:	6965      	ldr	r5, [r4, #20]
 800074c:	2d01      	cmp	r5, #1
 800074e:	d107      	bne.n	8000760 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000750:	2b00      	cmp	r3, #0
 8000752:	d130      	bne.n	80007b6 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000754:	69a3      	ldr	r3, [r4, #24]
 8000756:	3b01      	subs	r3, #1
 8000758:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800075c:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000760:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000762:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000766:	685d      	ldr	r5, [r3, #4]
 8000768:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800076c:	ea45 0506 	orr.w	r5, r5, r6
 8000770:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000772:	689e      	ldr	r6, [r3, #8]
 8000774:	4d1d      	ldr	r5, [pc, #116]	; (80007ec <HAL_ADC_Init+0xf8>)
 8000776:	ea05 0506 	and.w	r5, r5, r6
 800077a:	ea45 0502 	orr.w	r5, r5, r2
 800077e:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000780:	d001      	beq.n	8000786 <HAL_ADC_Init+0x92>
 8000782:	2901      	cmp	r1, #1
 8000784:	d120      	bne.n	80007c8 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000786:	6921      	ldr	r1, [r4, #16]
 8000788:	3901      	subs	r1, #1
 800078a:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800078c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800078e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000792:	4329      	orrs	r1, r5
 8000794:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000796:	6899      	ldr	r1, [r3, #8]
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_ADC_Init+0xfc>)
 800079a:	400b      	ands	r3, r1
 800079c:	429a      	cmp	r2, r3
 800079e:	d115      	bne.n	80007cc <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80007a0:	2300      	movs	r3, #0
 80007a2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80007a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007a6:	f023 0303 	bic.w	r3, r3, #3
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007b2:	460e      	mov	r6, r1
 80007b4:	e7c9      	b.n	800074a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007b8:	f043 0320 	orr.w	r3, r3, #32
 80007bc:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007c6:	e7cb      	b.n	8000760 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80007c8:	2100      	movs	r1, #0
 80007ca:	e7df      	b.n	800078c <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80007cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007ce:	f023 0312 	bic.w	r3, r3, #18
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80007e0:	2001      	movs	r0, #1
}
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80007ea:	e7f9      	b.n	80007e0 <HAL_ADC_Init+0xec>
 80007ec:	ffe1f7fd 	.word	0xffe1f7fd
 80007f0:	ff1f0efe 	.word	0xff1f0efe

080007f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007f4:	4770      	bx	lr
	...

080007f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007fa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000802:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000806:	041b      	lsls	r3, r3, #16
 8000808:	0c1b      	lsrs	r3, r3, #16
 800080a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800080e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000812:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000814:	60d3      	str	r3, [r2, #12]
 8000816:	4770      	bx	lr
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	68dc      	ldr	r4, [r3, #12]
 8000822:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000826:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082c:	2b04      	cmp	r3, #4
 800082e:	bf28      	it	cs
 8000830:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000838:	bf98      	it	ls
 800083a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	fa05 f303 	lsl.w	r3, r5, r3
 8000840:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000844:	bf88      	it	hi
 8000846:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4019      	ands	r1, r3
 800084a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800084c:	fa05 f404 	lsl.w	r4, r5, r4
 8000850:	3c01      	subs	r4, #1
 8000852:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000854:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000856:	ea42 0201 	orr.w	r2, r2, r1
 800085a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	bfaf      	iteee	ge
 8000860:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	4b06      	ldrlt	r3, [pc, #24]	; (8000880 <HAL_NVIC_SetPriority+0x64>)
 8000866:	f000 000f 	andlt.w	r0, r0, #15
 800086a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086c:	bfa5      	ittet	ge
 800086e:	b2d2      	uxtbge	r2, r2
 8000870:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800087a:	bd30      	pop	{r4, r5, pc}
 800087c:	e000ed00 	.word	0xe000ed00
 8000880:	e000ed14 	.word	0xe000ed14

08000884 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000884:	2301      	movs	r3, #1
 8000886:	0942      	lsrs	r2, r0, #5
 8000888:	f000 001f 	and.w	r0, r0, #31
 800088c:	fa03 f000 	lsl.w	r0, r3, r0
 8000890:	4b01      	ldr	r3, [pc, #4]	; (8000898 <HAL_NVIC_EnableIRQ+0x14>)
 8000892:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100

0800089c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	3801      	subs	r0, #1
 800089e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008a2:	d20a      	bcs.n	80008ba <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008ca:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	bf0c      	ite	eq
 80008d0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008d4:	f022 0204 	bicne.w	r2, r2, #4
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	4770      	bx	lr
 80008dc:	e000e010 	.word	0xe000e010

080008e0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008e0:	4770      	bx	lr

080008e2 <HAL_SYSTICK_IRQHandler>:
{
 80008e2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008e4:	f7ff fffc 	bl	80008e0 <HAL_SYSTICK_Callback>
 80008e8:	bd08      	pop	{r3, pc}
	...

080008ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008ec:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80008ee:	b350      	cbz	r0, 8000946 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008f0:	2214      	movs	r2, #20
 80008f2:	6801      	ldr	r1, [r0, #0]
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008f6:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008f8:	440b      	add	r3, r1
 80008fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8000904:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000906:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000908:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800090a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800090e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000910:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000912:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000916:	4323      	orrs	r3, r4
 8000918:	6904      	ldr	r4, [r0, #16]
 800091a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800091c:	6944      	ldr	r4, [r0, #20]
 800091e:	4323      	orrs	r3, r4
 8000920:	6984      	ldr	r4, [r0, #24]
 8000922:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000924:	69c4      	ldr	r4, [r0, #28]
 8000926:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000928:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800092a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800092c:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 800092e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000930:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8000934:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000936:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000938:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800093a:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800093c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800093e:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8000942:	4618      	mov	r0, r3
 8000944:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000946:	2001      	movs	r0, #1
}
 8000948:	bd10      	pop	{r4, pc}
 800094a:	bf00      	nop
 800094c:	bffdfff8 	.word	0xbffdfff8
 8000950:	40020000 	.word	0x40020000

08000954 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000956:	f890 4020 	ldrb.w	r4, [r0, #32]
 800095a:	2c01      	cmp	r4, #1
 800095c:	d035      	beq.n	80009ca <HAL_DMA_Start_IT+0x76>
 800095e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000960:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000964:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000968:	42a5      	cmp	r5, r4
 800096a:	f04f 0600 	mov.w	r6, #0
 800096e:	f04f 0402 	mov.w	r4, #2
 8000972:	d128      	bne.n	80009c6 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000974:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000978:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800097a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800097c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800097e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000980:	f026 0601 	bic.w	r6, r6, #1
 8000984:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000986:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000988:	40bd      	lsls	r5, r7
 800098a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800098c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800098e:	6843      	ldr	r3, [r0, #4]
 8000990:	6805      	ldr	r5, [r0, #0]
 8000992:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000994:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000996:	bf0b      	itete	eq
 8000998:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800099a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800099c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800099e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80009a0:	b14b      	cbz	r3, 80009b6 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009a8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80009aa:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009ac:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	602b      	str	r3, [r5, #0]
 80009b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	f023 0304 	bic.w	r3, r3, #4
 80009bc:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	f043 030a 	orr.w	r3, r3, #10
 80009c4:	e7f0      	b.n	80009a8 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80009c6:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80009ca:	2002      	movs	r0, #2
}
 80009cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080009d0 <HAL_DMA_IRQHandler>:
{
 80009d0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80009d2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80009d4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80009d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80009d8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80009da:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80009dc:	4095      	lsls	r5, r2
 80009de:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80009e0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80009e2:	d032      	beq.n	8000a4a <HAL_DMA_IRQHandler+0x7a>
 80009e4:	074d      	lsls	r5, r1, #29
 80009e6:	d530      	bpl.n	8000a4a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009ec:	bf5e      	ittt	pl
 80009ee:	681a      	ldrpl	r2, [r3, #0]
 80009f0:	f022 0204 	bicpl.w	r2, r2, #4
 80009f4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009f6:	4a3e      	ldr	r2, [pc, #248]	; (8000af0 <HAL_DMA_IRQHandler+0x120>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d019      	beq.n	8000a30 <HAL_DMA_IRQHandler+0x60>
 80009fc:	3214      	adds	r2, #20
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d018      	beq.n	8000a34 <HAL_DMA_IRQHandler+0x64>
 8000a02:	3214      	adds	r2, #20
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d017      	beq.n	8000a38 <HAL_DMA_IRQHandler+0x68>
 8000a08:	3214      	adds	r2, #20
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d017      	beq.n	8000a3e <HAL_DMA_IRQHandler+0x6e>
 8000a0e:	3214      	adds	r2, #20
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d017      	beq.n	8000a44 <HAL_DMA_IRQHandler+0x74>
 8000a14:	3214      	adds	r2, #20
 8000a16:	4293      	cmp	r3, r2
 8000a18:	bf0c      	ite	eq
 8000a1a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000a1e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000a22:	4a34      	ldr	r2, [pc, #208]	; (8000af4 <HAL_DMA_IRQHandler+0x124>)
 8000a24:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000a26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d05e      	beq.n	8000aea <HAL_DMA_IRQHandler+0x11a>
}
 8000a2c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000a2e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a30:	2304      	movs	r3, #4
 8000a32:	e7f6      	b.n	8000a22 <HAL_DMA_IRQHandler+0x52>
 8000a34:	2340      	movs	r3, #64	; 0x40
 8000a36:	e7f4      	b.n	8000a22 <HAL_DMA_IRQHandler+0x52>
 8000a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3c:	e7f1      	b.n	8000a22 <HAL_DMA_IRQHandler+0x52>
 8000a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a42:	e7ee      	b.n	8000a22 <HAL_DMA_IRQHandler+0x52>
 8000a44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a48:	e7eb      	b.n	8000a22 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000a4a:	2502      	movs	r5, #2
 8000a4c:	4095      	lsls	r5, r2
 8000a4e:	4225      	tst	r5, r4
 8000a50:	d035      	beq.n	8000abe <HAL_DMA_IRQHandler+0xee>
 8000a52:	078d      	lsls	r5, r1, #30
 8000a54:	d533      	bpl.n	8000abe <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	0694      	lsls	r4, r2, #26
 8000a5a:	d406      	bmi.n	8000a6a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	f022 020a 	bic.w	r2, r2, #10
 8000a62:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000a64:	2201      	movs	r2, #1
 8000a66:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a6a:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <HAL_DMA_IRQHandler+0x120>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d019      	beq.n	8000aa4 <HAL_DMA_IRQHandler+0xd4>
 8000a70:	3214      	adds	r2, #20
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d018      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0xd8>
 8000a76:	3214      	adds	r2, #20
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d017      	beq.n	8000aac <HAL_DMA_IRQHandler+0xdc>
 8000a7c:	3214      	adds	r2, #20
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d017      	beq.n	8000ab2 <HAL_DMA_IRQHandler+0xe2>
 8000a82:	3214      	adds	r2, #20
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d017      	beq.n	8000ab8 <HAL_DMA_IRQHandler+0xe8>
 8000a88:	3214      	adds	r2, #20
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	bf0c      	ite	eq
 8000a8e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000a92:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_DMA_IRQHandler+0x124>)
 8000a98:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000aa0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000aa2:	e7c1      	b.n	8000a28 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e7f6      	b.n	8000a96 <HAL_DMA_IRQHandler+0xc6>
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	e7f4      	b.n	8000a96 <HAL_DMA_IRQHandler+0xc6>
 8000aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ab0:	e7f1      	b.n	8000a96 <HAL_DMA_IRQHandler+0xc6>
 8000ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab6:	e7ee      	b.n	8000a96 <HAL_DMA_IRQHandler+0xc6>
 8000ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000abc:	e7eb      	b.n	8000a96 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000abe:	2508      	movs	r5, #8
 8000ac0:	4095      	lsls	r5, r2
 8000ac2:	4225      	tst	r5, r4
 8000ac4:	d011      	beq.n	8000aea <HAL_DMA_IRQHandler+0x11a>
 8000ac6:	0709      	lsls	r1, r1, #28
 8000ac8:	d50f      	bpl.n	8000aea <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aca:	6819      	ldr	r1, [r3, #0]
 8000acc:	f021 010e 	bic.w	r1, r1, #14
 8000ad0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	fa03 f202 	lsl.w	r2, r3, r2
 8000ad8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ada:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000adc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000ae6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ae8:	e79e      	b.n	8000a28 <HAL_DMA_IRQHandler+0x58>
}
 8000aea:	bc70      	pop	{r4, r5, r6}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40020008 	.word	0x40020008
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000afc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000afe:	4616      	mov	r6, r2
 8000b00:	4b65      	ldr	r3, [pc, #404]	; (8000c98 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b02:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000ca8 <HAL_GPIO_Init+0x1b0>
 8000b06:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000cac <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000b0a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000b10:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b14:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	d17f      	bne.n	8000c1c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000b1c:	684d      	ldr	r5, [r1, #4]
 8000b1e:	2d12      	cmp	r5, #18
 8000b20:	f000 80af 	beq.w	8000c82 <HAL_GPIO_Init+0x18a>
 8000b24:	f200 8088 	bhi.w	8000c38 <HAL_GPIO_Init+0x140>
 8000b28:	2d02      	cmp	r5, #2
 8000b2a:	f000 80a7 	beq.w	8000c7c <HAL_GPIO_Init+0x184>
 8000b2e:	d87c      	bhi.n	8000c2a <HAL_GPIO_Init+0x132>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	f000 808e 	beq.w	8000c52 <HAL_GPIO_Init+0x15a>
 8000b36:	2d01      	cmp	r5, #1
 8000b38:	f000 809e 	beq.w	8000c78 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b3c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b40:	2cff      	cmp	r4, #255	; 0xff
 8000b42:	bf93      	iteet	ls
 8000b44:	4682      	movls	sl, r0
 8000b46:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000b4a:	3d08      	subhi	r5, #8
 8000b4c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000b50:	bf92      	itee	ls
 8000b52:	00b5      	lslls	r5, r6, #2
 8000b54:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000b58:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b5a:	fa09 f805 	lsl.w	r8, r9, r5
 8000b5e:	ea2b 0808 	bic.w	r8, fp, r8
 8000b62:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b66:	bf88      	it	hi
 8000b68:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b6c:	ea48 0505 	orr.w	r5, r8, r5
 8000b70:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b74:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000b78:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000b7c:	d04e      	beq.n	8000c1c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b7e:	4d47      	ldr	r5, [pc, #284]	; (8000c9c <HAL_GPIO_Init+0x1a4>)
 8000b80:	4f46      	ldr	r7, [pc, #280]	; (8000c9c <HAL_GPIO_Init+0x1a4>)
 8000b82:	69ad      	ldr	r5, [r5, #24]
 8000b84:	f026 0803 	bic.w	r8, r6, #3
 8000b88:	f045 0501 	orr.w	r5, r5, #1
 8000b8c:	61bd      	str	r5, [r7, #24]
 8000b8e:	69bd      	ldr	r5, [r7, #24]
 8000b90:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000b94:	f005 0501 	and.w	r5, r5, #1
 8000b98:	9501      	str	r5, [sp, #4]
 8000b9a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b9e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ba4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000ba8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bac:	fa09 f90b 	lsl.w	r9, r9, fp
 8000bb0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb4:	4d3a      	ldr	r5, [pc, #232]	; (8000ca0 <HAL_GPIO_Init+0x1a8>)
 8000bb6:	42a8      	cmp	r0, r5
 8000bb8:	d068      	beq.n	8000c8c <HAL_GPIO_Init+0x194>
 8000bba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bbe:	42a8      	cmp	r0, r5
 8000bc0:	d066      	beq.n	8000c90 <HAL_GPIO_Init+0x198>
 8000bc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bc6:	42a8      	cmp	r0, r5
 8000bc8:	d064      	beq.n	8000c94 <HAL_GPIO_Init+0x19c>
 8000bca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bce:	42a8      	cmp	r0, r5
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2503      	moveq	r5, #3
 8000bd4:	2504      	movne	r5, #4
 8000bd6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bda:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000bde:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000be8:	bf14      	ite	ne
 8000bea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bec:	43a5      	biceq	r5, r4
 8000bee:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf6:	bf14      	ite	ne
 8000bf8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfa:	43a5      	biceq	r5, r4
 8000bfc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bfe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c00:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c04:	bf14      	ite	ne
 8000c06:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c08:	43a5      	biceq	r5, r4
 8000c0a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c0c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c0e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c12:	bf14      	ite	ne
 8000c14:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c16:	ea25 0404 	biceq.w	r4, r5, r4
 8000c1a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c1c:	3601      	adds	r6, #1
 8000c1e:	2e10      	cmp	r6, #16
 8000c20:	f47f af73 	bne.w	8000b0a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000c24:	b003      	add	sp, #12
 8000c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000c2a:	2d03      	cmp	r5, #3
 8000c2c:	d022      	beq.n	8000c74 <HAL_GPIO_Init+0x17c>
 8000c2e:	2d11      	cmp	r5, #17
 8000c30:	d184      	bne.n	8000b3c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c32:	68ca      	ldr	r2, [r1, #12]
 8000c34:	3204      	adds	r2, #4
          break;
 8000c36:	e781      	b.n	8000b3c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000c38:	4f1a      	ldr	r7, [pc, #104]	; (8000ca4 <HAL_GPIO_Init+0x1ac>)
 8000c3a:	42bd      	cmp	r5, r7
 8000c3c:	d009      	beq.n	8000c52 <HAL_GPIO_Init+0x15a>
 8000c3e:	d812      	bhi.n	8000c66 <HAL_GPIO_Init+0x16e>
 8000c40:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000cb0 <HAL_GPIO_Init+0x1b8>
 8000c44:	454d      	cmp	r5, r9
 8000c46:	d004      	beq.n	8000c52 <HAL_GPIO_Init+0x15a>
 8000c48:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000c4c:	454d      	cmp	r5, r9
 8000c4e:	f47f af75 	bne.w	8000b3c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c52:	688a      	ldr	r2, [r1, #8]
 8000c54:	b1c2      	cbz	r2, 8000c88 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c56:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000c58:	bf0c      	ite	eq
 8000c5a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c5e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c62:	2208      	movs	r2, #8
 8000c64:	e76a      	b.n	8000b3c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000c66:	4575      	cmp	r5, lr
 8000c68:	d0f3      	beq.n	8000c52 <HAL_GPIO_Init+0x15a>
 8000c6a:	4565      	cmp	r5, ip
 8000c6c:	d0f1      	beq.n	8000c52 <HAL_GPIO_Init+0x15a>
 8000c6e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000cb4 <HAL_GPIO_Init+0x1bc>
 8000c72:	e7eb      	b.n	8000c4c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c74:	2200      	movs	r2, #0
 8000c76:	e761      	b.n	8000b3c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c78:	68ca      	ldr	r2, [r1, #12]
          break;
 8000c7a:	e75f      	b.n	8000b3c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c7c:	68ca      	ldr	r2, [r1, #12]
 8000c7e:	3208      	adds	r2, #8
          break;
 8000c80:	e75c      	b.n	8000b3c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c82:	68ca      	ldr	r2, [r1, #12]
 8000c84:	320c      	adds	r2, #12
          break;
 8000c86:	e759      	b.n	8000b3c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c88:	2204      	movs	r2, #4
 8000c8a:	e757      	b.n	8000b3c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c8c:	2500      	movs	r5, #0
 8000c8e:	e7a2      	b.n	8000bd6 <HAL_GPIO_Init+0xde>
 8000c90:	2501      	movs	r5, #1
 8000c92:	e7a0      	b.n	8000bd6 <HAL_GPIO_Init+0xde>
 8000c94:	2502      	movs	r5, #2
 8000c96:	e79e      	b.n	8000bd6 <HAL_GPIO_Init+0xde>
 8000c98:	40010400 	.word	0x40010400
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	10210000 	.word	0x10210000
 8000ca8:	10310000 	.word	0x10310000
 8000cac:	10320000 	.word	0x10320000
 8000cb0:	10110000 	.word	0x10110000
 8000cb4:	10220000 	.word	0x10220000

08000cb8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cb8:	b10a      	cbz	r2, 8000cbe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cba:	6101      	str	r1, [r0, #16]
 8000cbc:	4770      	bx	lr
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	e7fb      	b.n	8000cba <HAL_GPIO_WritePin+0x2>
	...

08000cc4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc4:	6803      	ldr	r3, [r0, #0]
{
 8000cc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cca:	07db      	lsls	r3, r3, #31
{
 8000ccc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cce:	d410      	bmi.n	8000cf2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd0:	682b      	ldr	r3, [r5, #0]
 8000cd2:	079f      	lsls	r7, r3, #30
 8000cd4:	d45e      	bmi.n	8000d94 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cd6:	682b      	ldr	r3, [r5, #0]
 8000cd8:	0719      	lsls	r1, r3, #28
 8000cda:	f100 8095 	bmi.w	8000e08 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cde:	682b      	ldr	r3, [r5, #0]
 8000ce0:	075a      	lsls	r2, r3, #29
 8000ce2:	f100 80bf 	bmi.w	8000e64 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ce6:	69ea      	ldr	r2, [r5, #28]
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 812d 	bne.w	8000f48 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cee:	2000      	movs	r0, #0
 8000cf0:	e014      	b.n	8000d1c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cf2:	4c90      	ldr	r4, [pc, #576]	; (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000cf4:	6863      	ldr	r3, [r4, #4]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d007      	beq.n	8000d0e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cfe:	6863      	ldr	r3, [r4, #4]
 8000d00:	f003 030c 	and.w	r3, r3, #12
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d10c      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5e>
 8000d08:	6863      	ldr	r3, [r4, #4]
 8000d0a:	03de      	lsls	r6, r3, #15
 8000d0c:	d509      	bpl.n	8000d22 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	039c      	lsls	r4, r3, #14
 8000d12:	d5dd      	bpl.n	8000cd0 <HAL_RCC_OscConfig+0xc>
 8000d14:	686b      	ldr	r3, [r5, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1da      	bne.n	8000cd0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d1a:	2001      	movs	r0, #1
}
 8000d1c:	b002      	add	sp, #8
 8000d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d22:	686b      	ldr	r3, [r5, #4]
 8000d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d28:	d110      	bne.n	8000d4c <HAL_RCC_OscConfig+0x88>
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d30:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d32:	f7ff fa55 	bl	80001e0 <HAL_GetTick>
 8000d36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	0398      	lsls	r0, r3, #14
 8000d3c:	d4c8      	bmi.n	8000cd0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3e:	f7ff fa4f 	bl	80001e0 <HAL_GetTick>
 8000d42:	1b80      	subs	r0, r0, r6
 8000d44:	2864      	cmp	r0, #100	; 0x64
 8000d46:	d9f7      	bls.n	8000d38 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d48:	2003      	movs	r0, #3
 8000d4a:	e7e7      	b.n	8000d1c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4c:	b99b      	cbnz	r3, 8000d76 <HAL_RCC_OscConfig+0xb2>
 8000d4e:	6823      	ldr	r3, [r4, #0]
 8000d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d54:	6023      	str	r3, [r4, #0]
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d5e:	f7ff fa3f 	bl	80001e0 <HAL_GetTick>
 8000d62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	0399      	lsls	r1, r3, #14
 8000d68:	d5b2      	bpl.n	8000cd0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fa39 	bl	80001e0 <HAL_GetTick>
 8000d6e:	1b80      	subs	r0, r0, r6
 8000d70:	2864      	cmp	r0, #100	; 0x64
 8000d72:	d9f7      	bls.n	8000d64 <HAL_RCC_OscConfig+0xa0>
 8000d74:	e7e8      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	d103      	bne.n	8000d86 <HAL_RCC_OscConfig+0xc2>
 8000d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d82:	6023      	str	r3, [r4, #0]
 8000d84:	e7d1      	b.n	8000d2a <HAL_RCC_OscConfig+0x66>
 8000d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8a:	6023      	str	r3, [r4, #0]
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d92:	e7cd      	b.n	8000d30 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d94:	4c67      	ldr	r4, [pc, #412]	; (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000d96:	6863      	ldr	r3, [r4, #4]
 8000d98:	f013 0f0c 	tst.w	r3, #12
 8000d9c:	d007      	beq.n	8000dae <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d9e:	6863      	ldr	r3, [r4, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d110      	bne.n	8000dca <HAL_RCC_OscConfig+0x106>
 8000da8:	6863      	ldr	r3, [r4, #4]
 8000daa:	03da      	lsls	r2, r3, #15
 8000dac:	d40d      	bmi.n	8000dca <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	079b      	lsls	r3, r3, #30
 8000db2:	d502      	bpl.n	8000dba <HAL_RCC_OscConfig+0xf6>
 8000db4:	692b      	ldr	r3, [r5, #16]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d1af      	bne.n	8000d1a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	696a      	ldr	r2, [r5, #20]
 8000dbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000dc6:	6023      	str	r3, [r4, #0]
 8000dc8:	e785      	b.n	8000cd6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dca:	692a      	ldr	r2, [r5, #16]
 8000dcc:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000dce:	b16a      	cbz	r2, 8000dec <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fa04 	bl	80001e0 <HAL_GetTick>
 8000dd8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	079f      	lsls	r7, r3, #30
 8000dde:	d4ec      	bmi.n	8000dba <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de0:	f7ff f9fe 	bl	80001e0 <HAL_GetTick>
 8000de4:	1b80      	subs	r0, r0, r6
 8000de6:	2802      	cmp	r0, #2
 8000de8:	d9f7      	bls.n	8000dda <HAL_RCC_OscConfig+0x116>
 8000dea:	e7ad      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000dec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dee:	f7ff f9f7 	bl	80001e0 <HAL_GetTick>
 8000df2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	0798      	lsls	r0, r3, #30
 8000df8:	f57f af6d 	bpl.w	8000cd6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfc:	f7ff f9f0 	bl	80001e0 <HAL_GetTick>
 8000e00:	1b80      	subs	r0, r0, r6
 8000e02:	2802      	cmp	r0, #2
 8000e04:	d9f6      	bls.n	8000df4 <HAL_RCC_OscConfig+0x130>
 8000e06:	e79f      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e08:	69aa      	ldr	r2, [r5, #24]
 8000e0a:	4c4a      	ldr	r4, [pc, #296]	; (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e0c:	4b4b      	ldr	r3, [pc, #300]	; (8000f3c <HAL_RCC_OscConfig+0x278>)
 8000e0e:	b1da      	cbz	r2, 8000e48 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e14:	f7ff f9e4 	bl	80001e0 <HAL_GetTick>
 8000e18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e1c:	079b      	lsls	r3, r3, #30
 8000e1e:	d50d      	bpl.n	8000e3c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e24:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <HAL_RCC_OscConfig+0x27c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e2c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000e2e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000e30:	9b01      	ldr	r3, [sp, #4]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	9201      	str	r2, [sp, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f9      	bne.n	8000e2e <HAL_RCC_OscConfig+0x16a>
 8000e3a:	e750      	b.n	8000cde <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3c:	f7ff f9d0 	bl	80001e0 <HAL_GetTick>
 8000e40:	1b80      	subs	r0, r0, r6
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d9e9      	bls.n	8000e1a <HAL_RCC_OscConfig+0x156>
 8000e46:	e77f      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e48:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e4a:	f7ff f9c9 	bl	80001e0 <HAL_GetTick>
 8000e4e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e52:	079f      	lsls	r7, r3, #30
 8000e54:	f57f af43 	bpl.w	8000cde <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e58:	f7ff f9c2 	bl	80001e0 <HAL_GetTick>
 8000e5c:	1b80      	subs	r0, r0, r6
 8000e5e:	2802      	cmp	r0, #2
 8000e60:	d9f6      	bls.n	8000e50 <HAL_RCC_OscConfig+0x18c>
 8000e62:	e771      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e64:	4c33      	ldr	r4, [pc, #204]	; (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e66:	69e3      	ldr	r3, [r4, #28]
 8000e68:	00d8      	lsls	r0, r3, #3
 8000e6a:	d424      	bmi.n	8000eb6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e6c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	69e3      	ldr	r3, [r4, #28]
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61e3      	str	r3, [r4, #28]
 8000e76:	69e3      	ldr	r3, [r4, #28]
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e80:	4e30      	ldr	r6, [pc, #192]	; (8000f44 <HAL_RCC_OscConfig+0x280>)
 8000e82:	6833      	ldr	r3, [r6, #0]
 8000e84:	05d9      	lsls	r1, r3, #23
 8000e86:	d518      	bpl.n	8000eba <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e88:	68eb      	ldr	r3, [r5, #12]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d126      	bne.n	8000edc <HAL_RCC_OscConfig+0x218>
 8000e8e:	6a23      	ldr	r3, [r4, #32]
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e96:	f7ff f9a3 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e9a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e9e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea0:	6a23      	ldr	r3, [r4, #32]
 8000ea2:	079b      	lsls	r3, r3, #30
 8000ea4:	d53f      	bpl.n	8000f26 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000ea6:	2f00      	cmp	r7, #0
 8000ea8:	f43f af1d 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eac:	69e3      	ldr	r3, [r4, #28]
 8000eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	61e3      	str	r3, [r4, #28]
 8000eb4:	e717      	b.n	8000ce6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000eb6:	2700      	movs	r7, #0
 8000eb8:	e7e2      	b.n	8000e80 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eba:	6833      	ldr	r3, [r6, #0]
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ec2:	f7ff f98d 	bl	80001e0 <HAL_GetTick>
 8000ec6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec8:	6833      	ldr	r3, [r6, #0]
 8000eca:	05da      	lsls	r2, r3, #23
 8000ecc:	d4dc      	bmi.n	8000e88 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ece:	f7ff f987 	bl	80001e0 <HAL_GetTick>
 8000ed2:	eba0 0008 	sub.w	r0, r0, r8
 8000ed6:	2864      	cmp	r0, #100	; 0x64
 8000ed8:	d9f6      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x204>
 8000eda:	e735      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000edc:	b9ab      	cbnz	r3, 8000f0a <HAL_RCC_OscConfig+0x246>
 8000ede:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6223      	str	r3, [r4, #32]
 8000eea:	6a23      	ldr	r3, [r4, #32]
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ef2:	f7ff f975 	bl	80001e0 <HAL_GetTick>
 8000ef6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef8:	6a23      	ldr	r3, [r4, #32]
 8000efa:	0798      	lsls	r0, r3, #30
 8000efc:	d5d3      	bpl.n	8000ea6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff f96f 	bl	80001e0 <HAL_GetTick>
 8000f02:	1b80      	subs	r0, r0, r6
 8000f04:	4540      	cmp	r0, r8
 8000f06:	d9f7      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x234>
 8000f08:	e71e      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0a:	2b05      	cmp	r3, #5
 8000f0c:	6a23      	ldr	r3, [r4, #32]
 8000f0e:	d103      	bne.n	8000f18 <HAL_RCC_OscConfig+0x254>
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6223      	str	r3, [r4, #32]
 8000f16:	e7ba      	b.n	8000e8e <HAL_RCC_OscConfig+0x1ca>
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6223      	str	r3, [r4, #32]
 8000f1e:	6a23      	ldr	r3, [r4, #32]
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	e7b6      	b.n	8000e94 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f26:	f7ff f95b 	bl	80001e0 <HAL_GetTick>
 8000f2a:	eba0 0008 	sub.w	r0, r0, r8
 8000f2e:	42b0      	cmp	r0, r6
 8000f30:	d9b6      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x1dc>
 8000f32:	e709      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
 8000f34:	40021000 	.word	0x40021000
 8000f38:	42420000 	.word	0x42420000
 8000f3c:	42420480 	.word	0x42420480
 8000f40:	20000020 	.word	0x20000020
 8000f44:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f48:	4c22      	ldr	r4, [pc, #136]	; (8000fd4 <HAL_RCC_OscConfig+0x310>)
 8000f4a:	6863      	ldr	r3, [r4, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	f43f aee2 	beq.w	8000d1a <HAL_RCC_OscConfig+0x56>
 8000f56:	2300      	movs	r3, #0
 8000f58:	4e1f      	ldr	r6, [pc, #124]	; (8000fd8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f5c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5e:	d12b      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f60:	f7ff f93e 	bl	80001e0 <HAL_GetTick>
 8000f64:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	0199      	lsls	r1, r3, #6
 8000f6a:	d41f      	bmi.n	8000fac <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f6c:	6a2b      	ldr	r3, [r5, #32]
 8000f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f72:	d105      	bne.n	8000f80 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f74:	6862      	ldr	r2, [r4, #4]
 8000f76:	68a9      	ldr	r1, [r5, #8]
 8000f78:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f80:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f82:	6862      	ldr	r2, [r4, #4]
 8000f84:	430b      	orrs	r3, r1
 8000f86:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f8e:	2301      	movs	r3, #1
 8000f90:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f92:	f7ff f925 	bl	80001e0 <HAL_GetTick>
 8000f96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	019a      	lsls	r2, r3, #6
 8000f9c:	f53f aea7 	bmi.w	8000cee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa0:	f7ff f91e 	bl	80001e0 <HAL_GetTick>
 8000fa4:	1b40      	subs	r0, r0, r5
 8000fa6:	2802      	cmp	r0, #2
 8000fa8:	d9f6      	bls.n	8000f98 <HAL_RCC_OscConfig+0x2d4>
 8000faa:	e6cd      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fac:	f7ff f918 	bl	80001e0 <HAL_GetTick>
 8000fb0:	1bc0      	subs	r0, r0, r7
 8000fb2:	2802      	cmp	r0, #2
 8000fb4:	d9d7      	bls.n	8000f66 <HAL_RCC_OscConfig+0x2a2>
 8000fb6:	e6c7      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000fb8:	f7ff f912 	bl	80001e0 <HAL_GetTick>
 8000fbc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	f57f ae94 	bpl.w	8000cee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff f90b 	bl	80001e0 <HAL_GetTick>
 8000fca:	1b40      	subs	r0, r0, r5
 8000fcc:	2802      	cmp	r0, #2
 8000fce:	d9f6      	bls.n	8000fbe <HAL_RCC_OscConfig+0x2fa>
 8000fd0:	e6ba      	b.n	8000d48 <HAL_RCC_OscConfig+0x84>
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	42420060 	.word	0x42420060

08000fdc <HAL_RCC_GetSysClockFreq>:
{
 8000fdc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000fe0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fe2:	ac02      	add	r4, sp, #8
 8000fe4:	f103 0510 	add.w	r5, r3, #16
 8000fe8:	4622      	mov	r2, r4
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	6859      	ldr	r1, [r3, #4]
 8000fee:	3308      	adds	r3, #8
 8000ff0:	c203      	stmia	r2!, {r0, r1}
 8000ff2:	42ab      	cmp	r3, r5
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	d1f7      	bne.n	8000fe8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f88d 3004 	strb.w	r3, [sp, #4]
 8000ffe:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001000:	4911      	ldr	r1, [pc, #68]	; (8001048 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001002:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001006:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001008:	f003 020c 	and.w	r2, r3, #12
 800100c:	2a08      	cmp	r2, #8
 800100e:	d117      	bne.n	8001040 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001010:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001014:	a806      	add	r0, sp, #24
 8001016:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001018:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800101a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800101e:	d50c      	bpl.n	800103a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001020:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001022:	480a      	ldr	r0, [pc, #40]	; (800104c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001024:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001028:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800102a:	aa06      	add	r2, sp, #24
 800102c:	4413      	add	r3, r2
 800102e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001032:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001036:	b007      	add	sp, #28
 8001038:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_RCC_GetSysClockFreq+0x74>)
 800103c:	4350      	muls	r0, r2
 800103e:	e7fa      	b.n	8001036 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001042:	e7f8      	b.n	8001036 <HAL_RCC_GetSysClockFreq+0x5a>
 8001044:	08003880 	.word	0x08003880
 8001048:	40021000 	.word	0x40021000
 800104c:	007a1200 	.word	0x007a1200
 8001050:	003d0900 	.word	0x003d0900

08001054 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001054:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_RCC_ClockConfig+0x138>)
{
 8001056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800105a:	6813      	ldr	r3, [r2, #0]
{
 800105c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	428b      	cmp	r3, r1
{
 8001064:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001066:	d328      	bcc.n	80010ba <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001068:	682a      	ldr	r2, [r5, #0]
 800106a:	0791      	lsls	r1, r2, #30
 800106c:	d432      	bmi.n	80010d4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800106e:	07d2      	lsls	r2, r2, #31
 8001070:	d438      	bmi.n	80010e4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001072:	4a46      	ldr	r2, [pc, #280]	; (800118c <HAL_RCC_ClockConfig+0x138>)
 8001074:	6813      	ldr	r3, [r2, #0]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	429e      	cmp	r6, r3
 800107c:	d373      	bcc.n	8001166 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107e:	682a      	ldr	r2, [r5, #0]
 8001080:	4c43      	ldr	r4, [pc, #268]	; (8001190 <HAL_RCC_ClockConfig+0x13c>)
 8001082:	f012 0f04 	tst.w	r2, #4
 8001086:	d179      	bne.n	800117c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001088:	0713      	lsls	r3, r2, #28
 800108a:	d506      	bpl.n	800109a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800108c:	6863      	ldr	r3, [r4, #4]
 800108e:	692a      	ldr	r2, [r5, #16]
 8001090:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001094:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001098:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800109a:	f7ff ff9f 	bl	8000fdc <HAL_RCC_GetSysClockFreq>
 800109e:	6863      	ldr	r3, [r4, #4]
 80010a0:	4a3c      	ldr	r2, [pc, #240]	; (8001194 <HAL_RCC_ClockConfig+0x140>)
 80010a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	40d8      	lsrs	r0, r3
 80010aa:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <HAL_RCC_ClockConfig+0x144>)
 80010ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff f854 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80010b4:	2000      	movs	r0, #0
}
 80010b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	f023 0307 	bic.w	r3, r3, #7
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	4299      	cmp	r1, r3
 80010cc:	d0cc      	beq.n	8001068 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80010ce:	2001      	movs	r0, #1
 80010d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d4:	492e      	ldr	r1, [pc, #184]	; (8001190 <HAL_RCC_ClockConfig+0x13c>)
 80010d6:	68a8      	ldr	r0, [r5, #8]
 80010d8:	684b      	ldr	r3, [r1, #4]
 80010da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010de:	4303      	orrs	r3, r0
 80010e0:	604b      	str	r3, [r1, #4]
 80010e2:	e7c4      	b.n	800106e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e4:	686a      	ldr	r2, [r5, #4]
 80010e6:	4c2a      	ldr	r4, [pc, #168]	; (8001190 <HAL_RCC_ClockConfig+0x13c>)
 80010e8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ec:	d11c      	bne.n	8001128 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f2:	d0ec      	beq.n	80010ce <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010f4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010fa:	f023 0303 	bic.w	r3, r3, #3
 80010fe:	4313      	orrs	r3, r2
 8001100:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001102:	f7ff f86d 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001108:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110a:	2b01      	cmp	r3, #1
 800110c:	d114      	bne.n	8001138 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800110e:	6863      	ldr	r3, [r4, #4]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b04      	cmp	r3, #4
 8001116:	d0ac      	beq.n	8001072 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001118:	f7ff f862 	bl	80001e0 <HAL_GetTick>
 800111c:	1bc0      	subs	r0, r0, r7
 800111e:	4540      	cmp	r0, r8
 8001120:	d9f5      	bls.n	800110e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001122:	2003      	movs	r0, #3
 8001124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001128:	2a02      	cmp	r2, #2
 800112a:	d102      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800112c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001130:	e7df      	b.n	80010f2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001132:	f013 0f02 	tst.w	r3, #2
 8001136:	e7dc      	b.n	80010f2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001138:	2b02      	cmp	r3, #2
 800113a:	d10f      	bne.n	800115c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	f003 030c 	and.w	r3, r3, #12
 8001142:	2b08      	cmp	r3, #8
 8001144:	d095      	beq.n	8001072 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001146:	f7ff f84b 	bl	80001e0 <HAL_GetTick>
 800114a:	1bc0      	subs	r0, r0, r7
 800114c:	4540      	cmp	r0, r8
 800114e:	d9f5      	bls.n	800113c <HAL_RCC_ClockConfig+0xe8>
 8001150:	e7e7      	b.n	8001122 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001152:	f7ff f845 	bl	80001e0 <HAL_GetTick>
 8001156:	1bc0      	subs	r0, r0, r7
 8001158:	4540      	cmp	r0, r8
 800115a:	d8e2      	bhi.n	8001122 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800115c:	6863      	ldr	r3, [r4, #4]
 800115e:	f013 0f0c 	tst.w	r3, #12
 8001162:	d1f6      	bne.n	8001152 <HAL_RCC_ClockConfig+0xfe>
 8001164:	e785      	b.n	8001072 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	6813      	ldr	r3, [r2, #0]
 8001168:	f023 0307 	bic.w	r3, r3, #7
 800116c:	4333      	orrs	r3, r6
 800116e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001170:	6813      	ldr	r3, [r2, #0]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	429e      	cmp	r6, r3
 8001178:	d1a9      	bne.n	80010ce <HAL_RCC_ClockConfig+0x7a>
 800117a:	e780      	b.n	800107e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	68e9      	ldr	r1, [r5, #12]
 8001180:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001184:	430b      	orrs	r3, r1
 8001186:	6063      	str	r3, [r4, #4]
 8001188:	e77e      	b.n	8001088 <HAL_RCC_ClockConfig+0x34>
 800118a:	bf00      	nop
 800118c:	40022000 	.word	0x40022000
 8001190:	40021000 	.word	0x40021000
 8001194:	08003f27 	.word	0x08003f27
 8001198:	20000020 	.word	0x20000020

0800119c <HAL_RCC_GetHCLKFreq>:
}
 800119c:	4b01      	ldr	r3, [pc, #4]	; (80011a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000020 	.word	0x20000020

080011a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011a8:	6803      	ldr	r3, [r0, #0]
{
 80011aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011ae:	07d9      	lsls	r1, r3, #31
{
 80011b0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011b2:	d520      	bpl.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b4:	4c35      	ldr	r4, [pc, #212]	; (800128c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011b6:	69e3      	ldr	r3, [r4, #28]
 80011b8:	00da      	lsls	r2, r3, #3
 80011ba:	d432      	bmi.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011bc:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	69e3      	ldr	r3, [r4, #28]
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	61e3      	str	r3, [r4, #28]
 80011c6:	69e3      	ldr	r3, [r4, #28]
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	4e2f      	ldr	r6, [pc, #188]	; (8001290 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011d2:	6833      	ldr	r3, [r6, #0]
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	d526      	bpl.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011d8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011de:	d136      	bne.n	800124e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011e0:	6a23      	ldr	r3, [r4, #32]
 80011e2:	686a      	ldr	r2, [r5, #4]
 80011e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011e8:	4313      	orrs	r3, r2
 80011ea:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ec:	b11f      	cbz	r7, 80011f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ee:	69e3      	ldr	r3, [r4, #28]
 80011f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80011f6:	6828      	ldr	r0, [r5, #0]
 80011f8:	0783      	lsls	r3, r0, #30
 80011fa:	d506      	bpl.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80011fc:	4a23      	ldr	r2, [pc, #140]	; (800128c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011fe:	68a9      	ldr	r1, [r5, #8]
 8001200:	6853      	ldr	r3, [r2, #4]
 8001202:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001206:	430b      	orrs	r3, r1
 8001208:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800120a:	f010 0010 	ands.w	r0, r0, #16
 800120e:	d01b      	beq.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001210:	4a1e      	ldr	r2, [pc, #120]	; (800128c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001212:	68e9      	ldr	r1, [r5, #12]
 8001214:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001216:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001218:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800121c:	430b      	orrs	r3, r1
 800121e:	6053      	str	r3, [r2, #4]
 8001220:	e012      	b.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2700      	movs	r7, #0
 8001224:	e7d4      	b.n	80011d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	6833      	ldr	r3, [r6, #0]
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800122e:	f7fe ffd7 	bl	80001e0 <HAL_GetTick>
 8001232:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	05d8      	lsls	r0, r3, #23
 8001238:	d4ce      	bmi.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123a:	f7fe ffd1 	bl	80001e0 <HAL_GetTick>
 800123e:	eba0 0008 	sub.w	r0, r0, r8
 8001242:	2864      	cmp	r0, #100	; 0x64
 8001244:	d9f6      	bls.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001246:	2003      	movs	r0, #3
}
 8001248:	b002      	add	sp, #8
 800124a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800124e:	686a      	ldr	r2, [r5, #4]
 8001250:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001254:	4293      	cmp	r3, r2
 8001256:	d0c3      	beq.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001258:	2001      	movs	r0, #1
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800125c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800125e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001260:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001262:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001266:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001268:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800126a:	07d9      	lsls	r1, r3, #31
 800126c:	d5b8      	bpl.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800126e:	f7fe ffb7 	bl	80001e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001276:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	6a23      	ldr	r3, [r4, #32]
 800127a:	079a      	lsls	r2, r3, #30
 800127c:	d4b0      	bmi.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7fe ffaf 	bl	80001e0 <HAL_GetTick>
 8001282:	1b80      	subs	r0, r0, r6
 8001284:	4540      	cmp	r0, r8
 8001286:	d9f7      	bls.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001288:	e7dd      	b.n	8001246 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	40007000 	.word	0x40007000
 8001294:	42420440 	.word	0x42420440

08001298 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 0 */
uint32_t val_adc1; // valor lido no conv ADC
uint32_t val_adc2; // valor lido no conv ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)	{
	if(hadc->Instance == ADC1)	{
 8001298:	6802      	ldr	r2, [r0, #0]
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_ADC_ConvCpltCallback+0x20>)
 800129c:	429a      	cmp	r2, r3
 800129e:	d109      	bne.n	80012b4 <HAL_ADC_ConvCpltCallback+0x1c>
		val_adc1 = ADC_BUF[0];
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_ADC_ConvCpltCallback+0x24>)
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x28>)
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	6011      	str	r1, [r2, #0]
		val_adc2 = ADC_BUF[1];
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80012ac:	601a      	str	r2, [r3, #0]
		flag_adc = 0;
 80012ae:	2200      	movs	r2, #0
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x30>)
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40012400 	.word	0x40012400
 80012bc:	2000015c 	.word	0x2000015c
 80012c0:	200000c8 	.word	0x200000c8
 80012c4:	200000d0 	.word	0x200000d0
 80012c8:	2000001c 	.word	0x2000001c

080012cc <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 80012d0:	b510      	push	{r4, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d4:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d8:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012dc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012e6:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ec:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ee:	f7ff fce9 	bl	8000cc4 <HAL_RCC_OscConfig>
 80012f2:	b100      	cbz	r0, 80012f6 <SystemClock_Config+0x2a>
 80012f4:	e7fe      	b.n	80012f4 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f6:	230f      	movs	r3, #15
 80012f8:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fe:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001302:	4621      	mov	r1, r4
 8001304:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001306:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001308:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130a:	f7ff fea3 	bl	8001054 <HAL_RCC_ClockConfig>
 800130e:	b100      	cbz	r0, 8001312 <SystemClock_Config+0x46>
 8001310:	e7fe      	b.n	8001310 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001316:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001318:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800131a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131c:	f7ff ff44 	bl	80011a8 <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4604      	mov	r4, r0
 8001322:	b100      	cbz	r0, 8001326 <SystemClock_Config+0x5a>
 8001324:	e7fe      	b.n	8001324 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001326:	f7ff ff39 	bl	800119c <HAL_RCC_GetHCLKFreq>
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001332:	f7ff fab3 	bl	800089c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001336:	2004      	movs	r0, #4
 8001338:	f7ff fac6 	bl	80008c8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800133c:	4622      	mov	r2, r4
 800133e:	4621      	mov	r1, r4
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff fa6a 	bl	800081c <HAL_NVIC_SetPriority>
}
 8001348:	b014      	add	sp, #80	; 0x50
 800134a:	bd10      	pop	{r4, pc}

0800134c <rd_idle>:
void rd_active() {
	HAL_GPIO_WritePin(RD_PORT, RD_PIN, GPIO_PIN_RESET);
}

void rd_idle() {
	HAL_GPIO_WritePin(RD_PORT, RD_PIN, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	4802      	ldr	r0, [pc, #8]	; (8001358 <rd_idle+0xc>)
 8001350:	4611      	mov	r1, r2
 8001352:	f7ff bcb1 	b.w	8000cb8 <HAL_GPIO_WritePin>
 8001356:	bf00      	nop
 8001358:	40010800 	.word	0x40010800

0800135c <wr_active>:
}

void wr_active() {
	HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2102      	movs	r1, #2
 8001360:	4801      	ldr	r0, [pc, #4]	; (8001368 <wr_active+0xc>)
 8001362:	f7ff bca9 	b.w	8000cb8 <HAL_GPIO_WritePin>
 8001366:	bf00      	nop
 8001368:	40010800 	.word	0x40010800

0800136c <wr_idle>:
}

void wr_idle() {
	HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2102      	movs	r1, #2
 8001370:	4801      	ldr	r0, [pc, #4]	; (8001378 <wr_idle+0xc>)
 8001372:	f7ff bca1 	b.w	8000cb8 <HAL_GPIO_WritePin>
 8001376:	bf00      	nop
 8001378:	40010800 	.word	0x40010800

0800137c <rs_cmd>:
}

void rs_cmd() {
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2104      	movs	r1, #4
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <rs_cmd+0xc>)
 8001382:	f7ff bc99 	b.w	8000cb8 <HAL_GPIO_WritePin>
 8001386:	bf00      	nop
 8001388:	40010800 	.word	0x40010800

0800138c <rs_data>:
}

void rs_data() {
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2104      	movs	r1, #4
 8001390:	4801      	ldr	r0, [pc, #4]	; (8001398 <rs_data+0xc>)
 8001392:	f7ff bc91 	b.w	8000cb8 <HAL_GPIO_WritePin>
 8001396:	bf00      	nop
 8001398:	40010800 	.word	0x40010800

0800139c <cs_active>:
}

void cs_active() {
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2108      	movs	r1, #8
 80013a0:	4801      	ldr	r0, [pc, #4]	; (80013a8 <cs_active+0xc>)
 80013a2:	f7ff bc89 	b.w	8000cb8 <HAL_GPIO_WritePin>
 80013a6:	bf00      	nop
 80013a8:	40010800 	.word	0x40010800

080013ac <cs_idle>:
}

void cs_idle() {
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2108      	movs	r1, #8
 80013b0:	4801      	ldr	r0, [pc, #4]	; (80013b8 <cs_idle+0xc>)
 80013b2:	f7ff bc81 	b.w	8000cb8 <HAL_GPIO_WritePin>
 80013b6:	bf00      	nop
 80013b8:	40010800 	.word	0x40010800

080013bc <reset_active>:
}

void reset_active() {
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2110      	movs	r1, #16
 80013c0:	4801      	ldr	r0, [pc, #4]	; (80013c8 <reset_active+0xc>)
 80013c2:	f7ff bc79 	b.w	8000cb8 <HAL_GPIO_WritePin>
 80013c6:	bf00      	nop
 80013c8:	40010800 	.word	0x40010800

080013cc <reset_idle>:
}

void reset_idle() {
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2110      	movs	r1, #16
 80013d0:	4801      	ldr	r0, [pc, #4]	; (80013d8 <reset_idle+0xc>)
 80013d2:	f7ff bc71 	b.w	8000cb8 <HAL_GPIO_WritePin>
 80013d6:	bf00      	nop
 80013d8:	40010800 	.word	0x40010800

080013dc <wr_strobe>:
}

void wr_strobe() {
 80013dc:	b508      	push	{r3, lr}
	wr_active();
 80013de:	f7ff ffbd 	bl	800135c <wr_active>
	wr_idle();
}
 80013e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wr_idle();
 80013e6:	f7ff bfc1 	b.w	800136c <wr_idle>
	...

080013ec <write_8>:
	wr_strobe();
	wr_idle();
}

void write_8(uint8_t x) {
	GPIOB->BSRR = 0x0FF0<< 16;
 80013ec:	f04f 637f 	mov.w	r3, #267386880	; 0xff00000
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <write_8+0x24>)
	aux1 = ((x) & 0x03)<<8;
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <write_8+0x28>)
	GPIOB->BSRR = 0x0FF0<< 16;
 80013f4:	6113      	str	r3, [r2, #16]
	aux1 = ((x) & 0x03)<<8;
 80013f6:	0203      	lsls	r3, r0, #8
 80013f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
	aux2 = (x) & 0xFC;
 80013fc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
	aux1 = ((x) & 0x03)<<8;
 8001400:	800b      	strh	r3, [r1, #0]
	aux2 = (x) & 0xFC;
 8001402:	4905      	ldr	r1, [pc, #20]	; (8001418 <write_8+0x2c>)
	GPIOB->BSRR = ((aux2 | aux1)<<2) & 0x0FF0;
 8001404:	4303      	orrs	r3, r0
 8001406:	009b      	lsls	r3, r3, #2
	aux2 = (x) & 0xFC;
 8001408:	8008      	strh	r0, [r1, #0]
	GPIOB->BSRR = ((aux2 | aux1)<<2) & 0x0FF0;
 800140a:	6113      	str	r3, [r2, #16]
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40010c00 	.word	0x40010c00
 8001414:	20000164 	.word	0x20000164
 8001418:	200000d4 	.word	0x200000d4

0800141c <write8>:
void write8(uint8_t x) {
 800141c:	b508      	push	{r3, lr}
	write_8(x);
 800141e:	f7ff ffe5 	bl	80013ec <write_8>
	wr_strobe();
 8001422:	f7ff ffdb 	bl	80013dc <wr_strobe>
}
 8001426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wr_idle();
 800142a:	f7ff bf9f 	b.w	800136c <wr_idle>

0800142e <write16>:
void write16(uint16_t x) {
 800142e:	b510      	push	{r4, lr}
 8001430:	4604      	mov	r4, r0
	write8(h);
 8001432:	0a00      	lsrs	r0, r0, #8
 8001434:	f7ff fff2 	bl	800141c <write8>
	write8(l);
 8001438:	b2e0      	uxtb	r0, r4
}
 800143a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write8(l);
 800143e:	f7ff bfed 	b.w	800141c <write8>

08001442 <writeCmd>:
	HAL_ADC_Start_IT(&hadc1);
	rs_output();

}

void writeCmd (uint16_t cmd) {
 8001442:	b510      	push	{r4, lr}
 8001444:	4604      	mov	r4, r0
	rs_cmd();
 8001446:	f7ff ff99 	bl	800137c <rs_cmd>
	write16(cmd);
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff ffef 	bl	800142e <write16>
	rs_data();
}
 8001450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rs_data();
 8001454:	f7ff bf9a 	b.w	800138c <rs_data>

08001458 <writeCmdData>:
{
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4605      	mov	r5, r0
 800145c:	460c      	mov	r4, r1
    cs_active();
 800145e:	f7ff ff9d 	bl	800139c <cs_active>
    writeCmd(cmd);
 8001462:	4628      	mov	r0, r5
 8001464:	f7ff ffed 	bl	8001442 <writeCmd>

void writeData(uint16_t data) {
	write16(data);
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff ffe0 	bl	800142e <write16>
}
 800146e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cs_idle();
 8001472:	f7ff bf9b 	b.w	80013ac <cs_idle>
	...

08001478 <invertDisplay>:
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <invertDisplay+0x30>)
 800147a:	8819      	ldrh	r1, [r3, #0]
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <invertDisplay+0x34>)
 800147e:	f3c1 3100 	ubfx	r1, r1, #12, #1
 8001482:	ea81 0200 	eor.w	r2, r1, r0
 8001486:	801a      	strh	r2, [r3, #0]
    _lcd_drivOut &= ~(1 << 13);
 8001488:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <invertDisplay+0x38>)
	if (_lcd_rev)
 800148a:	4281      	cmp	r1, r0
    _lcd_drivOut &= ~(1 << 13);
 800148c:	8813      	ldrh	r3, [r2, #0]
	writeCmdData(0x01, _lcd_drivOut);
 800148e:	f04f 0001 	mov.w	r0, #1
    _lcd_drivOut &= ~(1 << 13);
 8001492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001496:	b29b      	uxth	r3, r3
		_lcd_drivOut |= (1 << 13);
 8001498:	bf18      	it	ne
 800149a:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800149e:	8013      	strh	r3, [r2, #0]
	writeCmdData(0x01, _lcd_drivOut);
 80014a0:	8811      	ldrh	r1, [r2, #0]
 80014a2:	f7ff bfd9 	b.w	8001458 <writeCmdData>
 80014a6:	bf00      	nop
 80014a8:	200000c2 	.word	0x200000c2
 80014ac:	200000cc 	.word	0x200000cc
 80014b0:	200000c0 	.word	0x200000c0

080014b4 <init_table16>:
void init_table16(const uint16_t table[], int16_t size) {
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	4606      	mov	r6, r0
 80014b8:	460d      	mov	r5, r1
	int16_t i = 0;
 80014ba:	2400      	movs	r4, #0
	while (size > 0) {
 80014bc:	2d00      	cmp	r5, #0
 80014be:	dc00      	bgt.n	80014c2 <init_table16+0xe>
}
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
		int16_t d = table[i+1];
 80014c2:	eb06 0344 	add.w	r3, r6, r4, lsl #1
		writeCmdData(cmd, d);                      //static function
 80014c6:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 80014ca:	8859      	ldrh	r1, [r3, #2]
 80014cc:	3d04      	subs	r5, #4
 80014ce:	3402      	adds	r4, #2
 80014d0:	f7ff ffc2 	bl	8001458 <writeCmdData>
 80014d4:	b22d      	sxth	r5, r5
 80014d6:	b224      	sxth	r4, r4
 80014d8:	e7f0      	b.n	80014bc <init_table16+0x8>

080014da <vertScroll>:
void vertScroll (int16_t top, int16_t scrollines, int16_t offset) {
 80014da:	460b      	mov	r3, r1
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 80014dc:	4249      	negs	r1, r1
 80014de:	428a      	cmp	r2, r1
 80014e0:	dd0b      	ble.n	80014fa <vertScroll+0x20>
 80014e2:	429a      	cmp	r2, r3
 80014e4:	bfa8      	it	ge
 80014e6:	2200      	movge	r2, #0
    vsp = top + offset; // vertical start position
 80014e8:	4410      	add	r0, r2
 80014ea:	b281      	uxth	r1, r0
	if (offset < 0)
 80014ec:	2a00      	cmp	r2, #0
		vsp += scrollines;          //keep in unsigned range
 80014ee:	bfbc      	itt	lt
 80014f0:	18c9      	addlt	r1, r1, r3
 80014f2:	b289      	uxthlt	r1, r1
	writeCmdData(0x41, vsp);        //VL#
 80014f4:	2041      	movs	r0, #65	; 0x41
 80014f6:	f7ff bfaf 	b.w	8001458 <writeCmdData>
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 80014fa:	2200      	movs	r2, #0
 80014fc:	e7f4      	b.n	80014e8 <vertScroll+0xe>
	...

08001500 <setAddrWindow>:
void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1) {
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	460e      	mov	r6, r1
 8001504:	4617      	mov	r7, r2
 8001506:	4604      	mov	r4, r0
 8001508:	461d      	mov	r5, r3
    writeCmdData(_MC, x);
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <setAddrWindow+0x78>)
 800150c:	b281      	uxth	r1, r0
 800150e:	8818      	ldrh	r0, [r3, #0]
 8001510:	f7ff ffa2 	bl	8001458 <writeCmdData>
    writeCmdData(_MP, y);
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <setAddrWindow+0x7c>)
 8001516:	b2b1      	uxth	r1, r6
 8001518:	8818      	ldrh	r0, [r3, #0]
 800151a:	f7ff ff9d 	bl	8001458 <writeCmdData>
    if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800151e:	42bc      	cmp	r4, r7
 8001520:	d101      	bne.n	8001526 <setAddrWindow+0x26>
 8001522:	42ae      	cmp	r6, r5
 8001524:	d026      	beq.n	8001574 <setAddrWindow+0x74>
        if (_lcd_capable & XSA_XEA_16BIT) {
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <setAddrWindow+0x80>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	069a      	lsls	r2, r3, #26
 800152c:	d50c      	bpl.n	8001548 <setAddrWindow+0x48>
            if (rotation & 1)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <setAddrWindow+0x84>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	07db      	lsls	r3, r3, #31
                y1 = y = (y1 << 8) | y;
 8001534:	bf4b      	itete	mi
 8001536:	ea46 2505 	orrmi.w	r5, r6, r5, lsl #8
                x1 = x = (x1 << 8) | x;
 800153a:	ea44 2407 	orrpl.w	r4, r4, r7, lsl #8
                y1 = y = (y1 << 8) | y;
 800153e:	b22e      	sxthmi	r6, r5
                x1 = x = (x1 << 8) | x;
 8001540:	b224      	sxthpl	r4, r4
                y1 = y = (y1 << 8) | y;
 8001542:	bf4c      	ite	mi
 8001544:	4635      	movmi	r5, r6
                x1 = x = (x1 << 8) | x;
 8001546:	4627      	movpl	r7, r4
        writeCmdData(_SC, x);
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <setAddrWindow+0x88>)
 800154a:	b2a1      	uxth	r1, r4
 800154c:	8800      	ldrh	r0, [r0, #0]
 800154e:	f7ff ff83 	bl	8001458 <writeCmdData>
        writeCmdData(_SP, y);
 8001552:	480e      	ldr	r0, [pc, #56]	; (800158c <setAddrWindow+0x8c>)
 8001554:	b2b1      	uxth	r1, r6
 8001556:	8800      	ldrh	r0, [r0, #0]
 8001558:	f7ff ff7e 	bl	8001458 <writeCmdData>
        writeCmdData(_EC, x1);
 800155c:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <setAddrWindow+0x90>)
 800155e:	b2b9      	uxth	r1, r7
 8001560:	8810      	ldrh	r0, [r2, #0]
 8001562:	f7ff ff79 	bl	8001458 <writeCmdData>
        writeCmdData(_EP, y1);
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <setAddrWindow+0x94>)
 8001568:	b2a9      	uxth	r1, r5
 800156a:	8818      	ldrh	r0, [r3, #0]
}
 800156c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        writeCmdData(_EP, y1);
 8001570:	f7ff bf72 	b.w	8001458 <writeCmdData>
 8001574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001576:	bf00      	nop
 8001578:	20000010 	.word	0x20000010
 800157c:	20000012 	.word	0x20000012
 8001580:	200000c2 	.word	0x200000c2
 8001584:	2000014c 	.word	0x2000014c
 8001588:	20000016 	.word	0x20000016
 800158c:	20000018 	.word	0x20000018
 8001590:	2000000c 	.word	0x2000000c
 8001594:	2000000e 	.word	0x2000000e

08001598 <drawPixel>:
{
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	4614      	mov	r4, r2
    if (x < 0 || y < 0 || x >= WIDTH || y >= HEIGHT)
 800159c:	1e02      	subs	r2, r0, #0
{
 800159e:	460b      	mov	r3, r1
    if (x < 0 || y < 0 || x >= WIDTH || y >= HEIGHT)
 80015a0:	db12      	blt.n	80015c8 <drawPixel+0x30>
 80015a2:	2900      	cmp	r1, #0
 80015a4:	db10      	blt.n	80015c8 <drawPixel+0x30>
 80015a6:	4d09      	ldr	r5, [pc, #36]	; (80015cc <drawPixel+0x34>)
 80015a8:	882d      	ldrh	r5, [r5, #0]
 80015aa:	42aa      	cmp	r2, r5
 80015ac:	da0c      	bge.n	80015c8 <drawPixel+0x30>
 80015ae:	4d08      	ldr	r5, [pc, #32]	; (80015d0 <drawPixel+0x38>)
 80015b0:	882d      	ldrh	r5, [r5, #0]
 80015b2:	42a9      	cmp	r1, r5
 80015b4:	da08      	bge.n	80015c8 <drawPixel+0x30>
    setAddrWindow(x, y, x, y);
 80015b6:	f7ff ffa3 	bl	8001500 <setAddrWindow>
    writeCmdData(_MW, color);
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <drawPixel+0x3c>)
 80015bc:	4621      	mov	r1, r4
 80015be:	8818      	ldrh	r0, [r3, #0]
}
 80015c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeCmdData(_MW, color);
 80015c4:	f7ff bf48 	b.w	8001458 <writeCmdData>
 80015c8:	bd38      	pop	{r3, r4, r5, pc}
 80015ca:	bf00      	nop
 80015cc:	2000000a 	.word	0x2000000a
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000014 	.word	0x20000014

080015d8 <drawHLine>:
void drawHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80015d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015dc:	4606      	mov	r6, r0
 80015de:	460f      	mov	r7, r1
 80015e0:	4615      	mov	r5, r2
 80015e2:	4698      	mov	r8, r3
	for(int i = 0; i < w; i++) {
 80015e4:	2400      	movs	r4, #0
 80015e6:	42ac      	cmp	r4, r5
 80015e8:	db01      	blt.n	80015ee <drawHLine+0x16>
}
 80015ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		drawPixel(x+i, y, color);
 80015ee:	1930      	adds	r0, r6, r4
 80015f0:	4642      	mov	r2, r8
 80015f2:	4639      	mov	r1, r7
 80015f4:	b200      	sxth	r0, r0
 80015f6:	f7ff ffcf 	bl	8001598 <drawPixel>
	for(int i = 0; i < w; i++) {
 80015fa:	3401      	adds	r4, #1
 80015fc:	e7f3      	b.n	80015e6 <drawHLine+0xe>

080015fe <drawVLine>:
void drawVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80015fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001602:	4606      	mov	r6, r0
 8001604:	460f      	mov	r7, r1
 8001606:	4615      	mov	r5, r2
 8001608:	4698      	mov	r8, r3
	for(int i = 0; i < h; i++) {
 800160a:	2400      	movs	r4, #0
 800160c:	42ac      	cmp	r4, r5
 800160e:	db01      	blt.n	8001614 <drawVLine+0x16>
}
 8001610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		drawPixel(x, y+i, color);
 8001614:	1939      	adds	r1, r7, r4
 8001616:	4642      	mov	r2, r8
 8001618:	b209      	sxth	r1, r1
 800161a:	4630      	mov	r0, r6
 800161c:	f7ff ffbc 	bl	8001598 <drawPixel>
	for(int i = 0; i < h; i++) {
 8001620:	3401      	adds	r4, #1
 8001622:	e7f3      	b.n	800160c <drawVLine+0xe>

08001624 <drawRect>:
void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001628:	461f      	mov	r7, r3
 800162a:	460e      	mov	r6, r1
 800162c:	4680      	mov	r8, r0
 800162e:	4614      	mov	r4, r2
 8001630:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	drawHLine(x, y, w, color);
 8001634:	462b      	mov	r3, r5
 8001636:	f7ff ffcf 	bl	80015d8 <drawHLine>
	drawHLine(x, y+h-1, w, color);
 800163a:	1e79      	subs	r1, r7, #1
 800163c:	4431      	add	r1, r6
 800163e:	462b      	mov	r3, r5
 8001640:	4622      	mov	r2, r4
 8001642:	4640      	mov	r0, r8
 8001644:	b209      	sxth	r1, r1
 8001646:	f7ff ffc7 	bl	80015d8 <drawHLine>
	drawVLine(x, y, h, color);
 800164a:	462b      	mov	r3, r5
 800164c:	463a      	mov	r2, r7
 800164e:	4631      	mov	r1, r6
 8001650:	4640      	mov	r0, r8
 8001652:	f7ff ffd4 	bl	80015fe <drawVLine>
	drawVLine(x+w-1, y, h, color);
 8001656:	1e60      	subs	r0, r4, #1
 8001658:	4440      	add	r0, r8
 800165a:	462b      	mov	r3, r5
 800165c:	463a      	mov	r2, r7
 800165e:	4631      	mov	r1, r6
}
 8001660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	drawVLine(x+w-1, y, h, color);
 8001664:	b200      	sxth	r0, r0
 8001666:	f7ff bfca 	b.w	80015fe <drawVLine>
	...

0800166c <setRotation>:
	uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800166c:	4b5d      	ldr	r3, [pc, #372]	; (80017e4 <setRotation+0x178>)
void setRotation(uint8_t r) {
 800166e:	b570      	push	{r4, r5, r6, lr}
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8001670:	4c5d      	ldr	r4, [pc, #372]	; (80017e8 <setRotation+0x17c>)
	uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8001672:	881d      	ldrh	r5, [r3, #0]
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8001674:	f000 0303 	and.w	r3, r0, #3
    if (rotation & 1) {
 8001678:	f010 0001 	ands.w	r0, r0, #1
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
 800167c:	7023      	strb	r3, [r4, #0]
    if (rotation & 1) {
 800167e:	f000 8093 	beq.w	80017a8 <setRotation+0x13c>
    	HEIGHT = _WIDTH;
 8001682:	21f0      	movs	r1, #240	; 0xf0
 8001684:	4a59      	ldr	r2, [pc, #356]	; (80017ec <setRotation+0x180>)
    switch (rotation) {
 8001686:	2b02      	cmp	r3, #2
    	HEIGHT = _WIDTH;
 8001688:	8011      	strh	r1, [r2, #0]
    	WIDTH = _HEIGHT;
 800168a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800168e:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <setRotation+0x184>)
 8001690:	8011      	strh	r1, [r2, #0]
    switch (rotation) {
 8001692:	d005      	beq.n	80016a0 <setRotation+0x34>
 8001694:	2b03      	cmp	r3, #3
 8001696:	d06f      	beq.n	8001778 <setRotation+0x10c>
 8001698:	2b01      	cmp	r3, #1
 800169a:	d16f      	bne.n	800177c <setRotation+0x110>
        val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 800169c:	2328      	movs	r3, #40	; 0x28
 800169e:	e000      	b.n	80016a2 <setRotation+0x36>
        val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 80016a0:	2398      	movs	r3, #152	; 0x98
	_MC = 0x4E, _MP = 0x4F, _MW = 0x22, _SC = 0x44, _EC = 0x44, _SP = 0x45, _EP = 0x46;
 80016a2:	214e      	movs	r1, #78	; 0x4e
 80016a4:	4a53      	ldr	r2, [pc, #332]	; (80017f4 <setRotation+0x188>)
 80016a6:	8011      	strh	r1, [r2, #0]
 80016a8:	214f      	movs	r1, #79	; 0x4f
 80016aa:	4a53      	ldr	r2, [pc, #332]	; (80017f8 <setRotation+0x18c>)
 80016ac:	8011      	strh	r1, [r2, #0]
 80016ae:	2122      	movs	r1, #34	; 0x22
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <setRotation+0x190>)
 80016b2:	8011      	strh	r1, [r2, #0]
 80016b4:	2244      	movs	r2, #68	; 0x44
 80016b6:	4952      	ldr	r1, [pc, #328]	; (8001800 <setRotation+0x194>)
 80016b8:	800a      	strh	r2, [r1, #0]
 80016ba:	4952      	ldr	r1, [pc, #328]	; (8001804 <setRotation+0x198>)
 80016bc:	800a      	strh	r2, [r1, #0]
 80016be:	2145      	movs	r1, #69	; 0x45
 80016c0:	4a51      	ldr	r2, [pc, #324]	; (8001808 <setRotation+0x19c>)
 80016c2:	8011      	strh	r1, [r2, #0]
 80016c4:	2146      	movs	r1, #70	; 0x46
 80016c6:	4a51      	ldr	r2, [pc, #324]	; (800180c <setRotation+0x1a0>)
 80016c8:	8011      	strh	r1, [r2, #0]
    if (rotation & 1)
 80016ca:	b108      	cbz	r0, 80016d0 <setRotation+0x64>
    	val ^= 0xD0;    // exchange Landscape modes
 80016cc:	f083 03d0 	eor.w	r3, r3, #208	; 0xd0
	GS = (val & 0x80) ? (1 << 14) | (1 << 12) : 0;      //called TB (top-bottom)
 80016d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016d4:	bf14      	ite	ne
 80016d6:	f44f 42a0 	movne.w	r2, #20480	; 0x5000
 80016da:	2200      	moveq	r2, #0
	SS_v = (val & 0x40) ? (1 << 9) : 0;   //called RL (right-left)
 80016dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80016e0:	bf14      	ite	ne
 80016e2:	f44f 7000 	movne.w	r0, #512	; 0x200
 80016e6:	2000      	moveq	r0, #0
	_lcd_drivOut = GS | SS_v | (REV << 13) | 0x013F;      //REV=0, BGR=0, MUX=319
 80016e8:	f240 113f 	movw	r1, #319	; 0x13f
	ORG = (val & 0x20) ? (1 << 3) : 0;  //called AM
 80016ec:	f013 0f20 	tst.w	r3, #32
 80016f0:	bf14      	ite	ne
 80016f2:	2608      	movne	r6, #8
 80016f4:	2600      	moveq	r6, #0
	_lcd_drivOut = GS | SS_v | (REV << 13) | 0x013F;      //REV=0, BGR=0, MUX=319
 80016f6:	ea42 0300 	orr.w	r3, r2, r0
 80016fa:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
 80016fe:	4319      	orrs	r1, r3
		_lcd_drivOut |= 0x0800; //BGR
 8001700:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001704:	4b42      	ldr	r3, [pc, #264]	; (8001810 <setRotation+0x1a4>)
 8001706:	b289      	uxth	r1, r1
	writeCmdData(0x01, _lcd_drivOut);   // set Driver Output Control
 8001708:	2001      	movs	r0, #1
		_lcd_drivOut |= 0x0800; //BGR
 800170a:	8019      	strh	r1, [r3, #0]
	writeCmdData(0x01, _lcd_drivOut);   // set Driver Output Control
 800170c:	f7ff fea4 	bl	8001458 <writeCmdData>
	writeCmdData(0x11, ORG | 0x6070);   // set GRAM write direction.
 8001710:	f446 41c0 	orr.w	r1, r6, #24576	; 0x6000
 8001714:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8001718:	2011      	movs	r0, #17
 800171a:	f7ff fe9d 	bl	8001458 <writeCmdData>
    if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 800171e:	7823      	ldrb	r3, [r4, #0]
 8001720:	07da      	lsls	r2, r3, #31
 8001722:	d515      	bpl.n	8001750 <setRotation+0xe4>
 8001724:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <setRotation+0x1a8>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	055b      	lsls	r3, r3, #21
 800172a:	d411      	bmi.n	8001750 <setRotation+0xe4>
        x = _MC, _MC = _MP, _MP = x;
 800172c:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <setRotation+0x188>)
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <setRotation+0x18c>)
 8001730:	8811      	ldrh	r1, [r2, #0]
 8001732:	8818      	ldrh	r0, [r3, #0]
 8001734:	8019      	strh	r1, [r3, #0]
 8001736:	8010      	strh	r0, [r2, #0]
        x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <setRotation+0x19c>)
 800173a:	4a31      	ldr	r2, [pc, #196]	; (8001800 <setRotation+0x194>)
 800173c:	8818      	ldrh	r0, [r3, #0]
 800173e:	8811      	ldrh	r1, [r2, #0]
 8001740:	8010      	strh	r0, [r2, #0]
 8001742:	8019      	strh	r1, [r3, #0]
        x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8001744:	4a2f      	ldr	r2, [pc, #188]	; (8001804 <setRotation+0x198>)
 8001746:	4b31      	ldr	r3, [pc, #196]	; (800180c <setRotation+0x1a0>)
 8001748:	8811      	ldrh	r1, [r2, #0]
 800174a:	8818      	ldrh	r0, [r3, #0]
 800174c:	8019      	strh	r1, [r3, #0]
 800174e:	8010      	strh	r0, [r2, #0]
    setAddrWindow(0, 0, WIDTH - 1, HEIGHT - 1);
 8001750:	2100      	movs	r1, #0
 8001752:	4c26      	ldr	r4, [pc, #152]	; (80017ec <setRotation+0x180>)
 8001754:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <setRotation+0x184>)
 8001756:	8823      	ldrh	r3, [r4, #0]
 8001758:	8812      	ldrh	r2, [r2, #0]
 800175a:	3b01      	subs	r3, #1
 800175c:	3a01      	subs	r2, #1
 800175e:	4608      	mov	r0, r1
 8001760:	b212      	sxth	r2, r2
 8001762:	b21b      	sxth	r3, r3
 8001764:	f7ff fecc 	bl	8001500 <setAddrWindow>
    vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8001768:	2200      	movs	r2, #0
 800176a:	f9b4 1000 	ldrsh.w	r1, [r4]
 800176e:	4610      	mov	r0, r2
}
 8001770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8001774:	f7ff beb1 	b.w	80014da <vertScroll>
        val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8001778:	23f8      	movs	r3, #248	; 0xf8
        break;
 800177a:	e792      	b.n	80016a2 <setRotation+0x36>
	_MC = 0x4E, _MP = 0x4F, _MW = 0x22, _SC = 0x44, _EC = 0x44, _SP = 0x45, _EP = 0x46;
 800177c:	224e      	movs	r2, #78	; 0x4e
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <setRotation+0x188>)
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	224f      	movs	r2, #79	; 0x4f
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <setRotation+0x18c>)
 8001786:	801a      	strh	r2, [r3, #0]
 8001788:	2222      	movs	r2, #34	; 0x22
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <setRotation+0x190>)
 800178c:	801a      	strh	r2, [r3, #0]
 800178e:	2344      	movs	r3, #68	; 0x44
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <setRotation+0x194>)
 8001792:	8013      	strh	r3, [r2, #0]
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <setRotation+0x198>)
 8001796:	8013      	strh	r3, [r2, #0]
 8001798:	2245      	movs	r2, #69	; 0x45
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <setRotation+0x19c>)
 800179c:	801a      	strh	r2, [r3, #0]
 800179e:	2246      	movs	r2, #70	; 0x46
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <setRotation+0x1a0>)
 80017a2:	801a      	strh	r2, [r3, #0]
        val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80017a4:	2348      	movs	r3, #72	; 0x48
 80017a6:	e791      	b.n	80016cc <setRotation+0x60>
    switch (rotation) {
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	f43f af79 	beq.w	80016a0 <setRotation+0x34>
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d0e2      	beq.n	8001778 <setRotation+0x10c>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	f43f af72 	beq.w	800169c <setRotation+0x30>
	_MC = 0x4E, _MP = 0x4F, _MW = 0x22, _SC = 0x44, _EC = 0x44, _SP = 0x45, _EP = 0x46;
 80017b8:	224e      	movs	r2, #78	; 0x4e
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <setRotation+0x188>)
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	224f      	movs	r2, #79	; 0x4f
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <setRotation+0x18c>)
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	2222      	movs	r2, #34	; 0x22
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <setRotation+0x190>)
 80017c8:	801a      	strh	r2, [r3, #0]
 80017ca:	2344      	movs	r3, #68	; 0x44
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <setRotation+0x194>)
 80017ce:	8013      	strh	r3, [r2, #0]
 80017d0:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <setRotation+0x198>)
 80017d2:	8013      	strh	r3, [r2, #0]
 80017d4:	2245      	movs	r2, #69	; 0x45
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <setRotation+0x19c>)
 80017d8:	801a      	strh	r2, [r3, #0]
 80017da:	2246      	movs	r2, #70	; 0x46
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <setRotation+0x1a0>)
 80017de:	801a      	strh	r2, [r3, #0]
        val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80017e0:	2348      	movs	r3, #72	; 0x48
 80017e2:	e775      	b.n	80016d0 <setRotation+0x64>
 80017e4:	200000cc 	.word	0x200000cc
 80017e8:	2000014c 	.word	0x2000014c
 80017ec:	20000008 	.word	0x20000008
 80017f0:	2000000a 	.word	0x2000000a
 80017f4:	20000010 	.word	0x20000010
 80017f8:	20000012 	.word	0x20000012
 80017fc:	20000014 	.word	0x20000014
 8001800:	20000016 	.word	0x20000016
 8001804:	2000000c 	.word	0x2000000c
 8001808:	20000018 	.word	0x20000018
 800180c:	2000000e 	.word	0x2000000e
 8001810:	200000c0 	.word	0x200000c0
 8001814:	200000c2 	.word	0x200000c2

08001818 <fillRect>:
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (w < 0) {
 800181c:	2a00      	cmp	r2, #0
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800181e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
	if (w < 0) {
 8001822:	da04      	bge.n	800182e <fillRect+0x16>
		w = -w;
 8001824:	b295      	uxth	r5, r2
 8001826:	426a      	negs	r2, r5
		x -= w;
 8001828:	4428      	add	r0, r5
		w = -w;
 800182a:	b212      	sxth	r2, r2
		x -= w;
 800182c:	b200      	sxth	r0, r0
	if (end > WIDTH)
 800182e:	4d35      	ldr	r5, [pc, #212]	; (8001904 <fillRect+0xec>)
	end = x + w;
 8001830:	4402      	add	r2, r0
	if (end > WIDTH)
 8001832:	882e      	ldrh	r6, [r5, #0]
	end = x + w;
 8001834:	b212      	sxth	r2, r2
	if (end > WIDTH)
 8001836:	42b2      	cmp	r2, r6
		end = WIDTH;
 8001838:	bfc8      	it	gt
 800183a:	b232      	sxthgt	r2, r6
 800183c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	w = end - x;
 8001840:	b292      	uxth	r2, r2
 8001842:	1a16      	subs	r6, r2, r0
	if (h < 0) {
 8001844:	2b00      	cmp	r3, #0
	w = end - x;
 8001846:	b236      	sxth	r6, r6
	if (h < 0) {
 8001848:	da04      	bge.n	8001854 <fillRect+0x3c>
		h = -h;
 800184a:	b29f      	uxth	r7, r3
 800184c:	427b      	negs	r3, r7
		y -= h;
 800184e:	4439      	add	r1, r7
		h = -h;
 8001850:	b21b      	sxth	r3, r3
		y -= h;
 8001852:	b209      	sxth	r1, r1
	if (end > HEIGHT)
 8001854:	4f2c      	ldr	r7, [pc, #176]	; (8001908 <fillRect+0xf0>)
	end = y + h;
 8001856:	440b      	add	r3, r1
	if (end > HEIGHT)
 8001858:	f8b7 e000 	ldrh.w	lr, [r7]
	end = y + h;
 800185c:	b21b      	sxth	r3, r3
	if (end > HEIGHT)
 800185e:	4573      	cmp	r3, lr
		end = HEIGHT;
 8001860:	bfc8      	it	gt
 8001862:	fa0f f38e 	sxthgt.w	r3, lr
 8001866:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	h = end - y;
 800186a:	b29b      	uxth	r3, r3
 800186c:	eba3 0801 	sub.w	r8, r3, r1
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001870:	3a01      	subs	r2, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	b21b      	sxth	r3, r3
 8001876:	b212      	sxth	r2, r2
 8001878:	f7ff fe42 	bl	8001500 <setAddrWindow>
	cs_active();
 800187c:	f7ff fd8e 	bl	800139c <cs_active>
	writeCmd(_MW);
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <fillRect+0xf4>)
	h = end - y;
 8001882:	fa0f f888 	sxth.w	r8, r8
	writeCmd(_MW);
 8001886:	8818      	ldrh	r0, [r3, #0]
 8001888:	f7ff fddb 	bl	8001442 <writeCmd>
	if (h > w) {
 800188c:	4546      	cmp	r6, r8
 800188e:	bfbe      	ittt	lt
 8001890:	4633      	movlt	r3, r6
 8001892:	4646      	movlt	r6, r8
 8001894:	4698      	movlt	r8, r3
	uint8_t hi = color >> 8, lo = color & 0xFF;
 8001896:	ea4f 2a19 	mov.w	sl, r9, lsr #8
 800189a:	fa5f f989 	uxtb.w	r9, r9
 800189e:	fa1f f888 	uxth.w	r8, r8
	while (h-- > 0) {
 80018a2:	fa0f f388 	sxth.w	r3, r8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	dc1b      	bgt.n	80018e2 <fillRect+0xca>
    cs_idle();
 80018aa:	f7ff fd7f 	bl	80013ac <cs_idle>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <fillRect+0xf8>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	07da      	lsls	r2, r3, #31
 80018b4:	d509      	bpl.n	80018ca <fillRect+0xb2>
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <fillRect+0xfc>)
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	f241 5326 	movw	r3, #5414	; 0x1526
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11d      	bne.n	80018fe <fillRect+0xe6>
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <fillRect+0x100>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	07db      	lsls	r3, r3, #31
 80018c8:	d519      	bpl.n	80018fe <fillRect+0xe6>
        setAddrWindow(0, 0, WIDTH - 1, HEIGHT - 1);
 80018ca:	2100      	movs	r1, #0
 80018cc:	883b      	ldrh	r3, [r7, #0]
 80018ce:	882a      	ldrh	r2, [r5, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	3a01      	subs	r2, #1
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	b212      	sxth	r2, r2
 80018d8:	4608      	mov	r0, r1
}
 80018da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        setAddrWindow(0, 0, WIDTH - 1, HEIGHT - 1);
 80018de:	f7ff be0f 	b.w	8001500 <setAddrWindow>
 80018e2:	4634      	mov	r4, r6
			write8(hi);
 80018e4:	4650      	mov	r0, sl
 80018e6:	3c01      	subs	r4, #1
 80018e8:	f7ff fd98 	bl	800141c <write8>
 80018ec:	b224      	sxth	r4, r4
			write8(lo);
 80018ee:	4648      	mov	r0, r9
 80018f0:	f7ff fd94 	bl	800141c <write8>
		} while (--end != 0);
 80018f4:	2c00      	cmp	r4, #0
 80018f6:	d1f5      	bne.n	80018e4 <fillRect+0xcc>
 80018f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80018fc:	e7cf      	b.n	800189e <fillRect+0x86>
 80018fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001902:	bf00      	nop
 8001904:	2000000a 	.word	0x2000000a
 8001908:	20000008 	.word	0x20000008
 800190c:	20000014 	.word	0x20000014
 8001910:	200000c2 	.word	0x200000c2
 8001914:	2000014e 	.word	0x2000014e
 8001918:	2000014c 	.word	0x2000014c

0800191c <fillScreen>:
void fillScreen(uint16_t color) {
 800191c:	b507      	push	{r0, r1, r2, lr}
	fillRect(0, 0, WIDTH, HEIGHT, color);
 800191e:	2100      	movs	r1, #0
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <fillScreen+0x20>)
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <fillScreen+0x24>)
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	f9b2 2000 	ldrsh.w	r2, [r2]
 800192c:	9000      	str	r0, [sp, #0]
 800192e:	4608      	mov	r0, r1
 8001930:	f7ff ff72 	bl	8001818 <fillRect>
}
 8001934:	b003      	add	sp, #12
 8001936:	f85d fb04 	ldr.w	pc, [sp], #4
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008
 8001940:	2000000a 	.word	0x2000000a

08001944 <drawChar>:
#ifndef DRAW_CHAR_H_
#define DRAW_CHAR_H_

#include "main.h"

void drawChar(uint16_t WIDTH, uint16_t HEIGHT, int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t textbgcolor, uint8_t size) {
 8001944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if((x >= WIDTH)            || // Clip right
 8001948:	4282      	cmp	r2, r0
void drawChar(uint16_t WIDTH, uint16_t HEIGHT, int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t textbgcolor, uint8_t size) {
 800194a:	b085      	sub	sp, #20
 800194c:	4615      	mov	r5, r2
 800194e:	461e      	mov	r6, r3
 8001950:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
 8001954:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
 8001958:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
	if((x >= WIDTH)            || // Clip right
 800195c:	f280 85ef 	bge.w	800253e <drawChar+0xbfa>
 8001960:	428b      	cmp	r3, r1
 8001962:	f280 85ec 	bge.w	800253e <drawChar+0xbfa>
	   (y >= HEIGHT)           || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 8001966:	2306      	movs	r3, #6
 8001968:	fb03 2304 	mla	r3, r3, r4, r2
	   (y >= HEIGHT)           || // Clip bottom
 800196c:	2b00      	cmp	r3, #0
 800196e:	f340 85e6 	ble.w	800253e <drawChar+0xbfa>
	   ((y + 8 * size - 1) < 0))   // Clip top
 8001972:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
	   ((x + 6 * size - 1) < 0) || // Clip left
 8001976:	2b00      	cmp	r3, #0
 8001978:	f340 85e1 	ble.w	800253e <drawChar+0xbfa>
		return;
	switch(c) {
 800197c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001980:	3b21      	subs	r3, #33	; 0x21
 8001982:	2b53      	cmp	r3, #83	; 0x53
 8001984:	f200 85de 	bhi.w	8002544 <drawChar+0xc00>
 8001988:	e8df f013 	tbh	[pc, r3, lsl #1]
 800198c:	05dc05b3 	.word	0x05dc05b3
 8001990:	05dc05dc 	.word	0x05dc05dc
 8001994:	05dc05dc 	.word	0x05dc05dc
 8001998:	05dc05dc 	.word	0x05dc05dc
 800199c:	05dc05dc 	.word	0x05dc05dc
 80019a0:	05dc05dc 	.word	0x05dc05dc
 80019a4:	05dc058c 	.word	0x05dc058c
 80019a8:	056505dc 	.word	0x056505dc
 80019ac:	0503053e 	.word	0x0503053e
 80019b0:	04b504dc 	.word	0x04b504dc
 80019b4:	0466048e 	.word	0x0466048e
 80019b8:	0416043e 	.word	0x0416043e
 80019bc:	03c603ee 	.word	0x03c603ee
 80019c0:	05dc05dc 	.word	0x05dc05dc
 80019c4:	05dc05dc 	.word	0x05dc05dc
 80019c8:	05dc05dc 	.word	0x05dc05dc
 80019cc:	0362039e 	.word	0x0362039e
 80019d0:	05dc033a 	.word	0x05dc033a
 80019d4:	02ea0312 	.word	0x02ea0312
 80019d8:	02c205dc 	.word	0x02c205dc
 80019dc:	05dc05dc 	.word	0x05dc05dc
 80019e0:	029a05dc 	.word	0x029a05dc
 80019e4:	05dc05dc 	.word	0x05dc05dc
 80019e8:	024a0272 	.word	0x024a0272
 80019ec:	05dc05dc 	.word	0x05dc05dc
 80019f0:	01fa0222 	.word	0x01fa0222
 80019f4:	05dc01be 	.word	0x05dc01be
 80019f8:	019505dc 	.word	0x019505dc
 80019fc:	05dc016c 	.word	0x05dc016c
 8001a00:	05dc05dc 	.word	0x05dc05dc
 8001a04:	05dc05dc 	.word	0x05dc05dc
 8001a08:	05dc05dc 	.word	0x05dc05dc
 8001a0c:	011c0144 	.word	0x011c0144
 8001a10:	05dc00f4 	.word	0x05dc00f4
 8001a14:	00a400cc 	.word	0x00a400cc
 8001a18:	05dc05dc 	.word	0x05dc05dc
 8001a1c:	05dc05dc 	.word	0x05dc05dc
 8001a20:	05dc05dc 	.word	0x05dc05dc
 8001a24:	05dc05dc 	.word	0x05dc05dc
 8001a28:	05dc007c 	.word	0x05dc007c
 8001a2c:	05dc05dc 	.word	0x05dc05dc
 8001a30:	005405dc 	.word	0x005405dc
 8001a34:	46b3      	mov	fp, r6
 8001a36:	f04f 0800 	mov.w	r8, #0
 8001a3a:	46aa      	mov	sl, r5
 8001a3c:	f04f 0900 	mov.w	r9, #0
	case 't':
		for(int8_t i=0; i<8; i++) {
			for(int8_t j=0; j<5; j++) {
				if(char_t[j][7-i] == 1) {
					if (size == 1)
						drawPixel(x+j, y+i, color);
 8001a40:	eb08 0306 	add.w	r3, r8, r6
 8001a44:	9302      	str	r3, [sp, #8]
				if(char_t[j][7-i] == 1) {
 8001a46:	4ac4      	ldr	r2, [pc, #784]	; (8001d58 <drawChar+0x414>)
 8001a48:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d108      	bne.n	8001a68 <drawChar+0x124>
					if (size == 1)
 8001a56:	2c01      	cmp	r4, #1
 8001a58:	f040 86aa 	bne.w	80027b0 <drawChar+0xe6c>
						drawPixel(x+j, y+i, color);
 8001a5c:	463a      	mov	r2, r7
 8001a5e:	9902      	ldr	r1, [sp, #8]
 8001a60:	eb09 0005 	add.w	r0, r9, r5
 8001a64:	f7ff fd98 	bl	8001598 <drawPixel>
 8001a68:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 8001a6c:	f1b9 0f05 	cmp.w	r9, #5
 8001a70:	44a2      	add	sl, r4
 8001a72:	d1e8      	bne.n	8001a46 <drawChar+0x102>
 8001a74:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 8001a78:	f1b8 0f08 	cmp.w	r8, #8
 8001a7c:	44a3      	add	fp, r4
 8001a7e:	d1dc      	bne.n	8001a3a <drawChar+0xf6>
 8001a80:	f000 bd5d 	b.w	800253e <drawChar+0xbfa>
	switch(c) {
 8001a84:	46b3      	mov	fp, r6
 8001a86:	f04f 0800 	mov.w	r8, #0
 8001a8a:	46aa      	mov	sl, r5
 8001a8c:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8001a90:	eb08 0306 	add.w	r3, r8, r6
 8001a94:	9302      	str	r3, [sp, #8]
				if(char_o[j][7-i] == 1) {
 8001a96:	4ab1      	ldr	r2, [pc, #708]	; (8001d5c <drawChar+0x418>)
 8001a98:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d108      	bne.n	8001ab8 <drawChar+0x174>
					if (size == 1)
 8001aa6:	2c01      	cmp	r4, #1
 8001aa8:	f040 8679 	bne.w	800279e <drawChar+0xe5a>
						drawPixel(x+j, y+i, color);
 8001aac:	463a      	mov	r2, r7
 8001aae:	9902      	ldr	r1, [sp, #8]
 8001ab0:	eb09 0005 	add.w	r0, r9, r5
 8001ab4:	f7ff fd70 	bl	8001598 <drawPixel>
 8001ab8:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 8001abc:	f1b9 0f05 	cmp.w	r9, #5
 8001ac0:	44a2      	add	sl, r4
 8001ac2:	d1e8      	bne.n	8001a96 <drawChar+0x152>
 8001ac4:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 8001ac8:	f1b8 0f08 	cmp.w	r8, #8
 8001acc:	44a3      	add	fp, r4
 8001ace:	d1dc      	bne.n	8001a8a <drawChar+0x146>
 8001ad0:	f000 bd35 	b.w	800253e <drawChar+0xbfa>
	switch(c) {
 8001ad4:	46b3      	mov	fp, r6
 8001ad6:	f04f 0800 	mov.w	r8, #0
 8001ada:	46aa      	mov	sl, r5
 8001adc:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8001ae0:	eb08 0306 	add.w	r3, r8, r6
 8001ae4:	9302      	str	r3, [sp, #8]
				if(char_f[j][7-i] == 1) {
 8001ae6:	4a9e      	ldr	r2, [pc, #632]	; (8001d60 <drawChar+0x41c>)
 8001ae8:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 8001aec:	4413      	add	r3, r2
 8001aee:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <drawChar+0x1c4>
					if (size == 1)
 8001af6:	2c01      	cmp	r4, #1
 8001af8:	f040 8648 	bne.w	800278c <drawChar+0xe48>
						drawPixel(x+j, y+i, color);
 8001afc:	463a      	mov	r2, r7
 8001afe:	9902      	ldr	r1, [sp, #8]
 8001b00:	eb09 0005 	add.w	r0, r9, r5
 8001b04:	f7ff fd48 	bl	8001598 <drawPixel>
 8001b08:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 8001b0c:	f1b9 0f05 	cmp.w	r9, #5
 8001b10:	44a2      	add	sl, r4
 8001b12:	d1e8      	bne.n	8001ae6 <drawChar+0x1a2>
 8001b14:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 8001b18:	f1b8 0f08 	cmp.w	r8, #8
 8001b1c:	44a3      	add	fp, r4
 8001b1e:	d1dc      	bne.n	8001ada <drawChar+0x196>
 8001b20:	f000 bd0d 	b.w	800253e <drawChar+0xbfa>
	switch(c) {
 8001b24:	46b3      	mov	fp, r6
 8001b26:	f04f 0800 	mov.w	r8, #0
 8001b2a:	46aa      	mov	sl, r5
 8001b2c:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8001b30:	eb08 0306 	add.w	r3, r8, r6
 8001b34:	9302      	str	r3, [sp, #8]
				if(char_e[j][7-i] == 1) {
 8001b36:	4a8b      	ldr	r2, [pc, #556]	; (8001d64 <drawChar+0x420>)
 8001b38:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <drawChar+0x214>
					if (size == 1)
 8001b46:	2c01      	cmp	r4, #1
 8001b48:	f040 8617 	bne.w	800277a <drawChar+0xe36>
						drawPixel(x+j, y+i, color);
 8001b4c:	463a      	mov	r2, r7
 8001b4e:	9902      	ldr	r1, [sp, #8]
 8001b50:	eb09 0005 	add.w	r0, r9, r5
 8001b54:	f7ff fd20 	bl	8001598 <drawPixel>
 8001b58:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 8001b5c:	f1b9 0f05 	cmp.w	r9, #5
 8001b60:	44a2      	add	sl, r4
 8001b62:	d1e8      	bne.n	8001b36 <drawChar+0x1f2>
 8001b64:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 8001b68:	f1b8 0f08 	cmp.w	r8, #8
 8001b6c:	44a3      	add	fp, r4
 8001b6e:	d1dc      	bne.n	8001b2a <drawChar+0x1e6>
 8001b70:	f000 bce5 	b.w	800253e <drawChar+0xbfa>
	switch(c) {
 8001b74:	46b3      	mov	fp, r6
 8001b76:	f04f 0800 	mov.w	r8, #0
 8001b7a:	46aa      	mov	sl, r5
 8001b7c:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8001b80:	eb08 0306 	add.w	r3, r8, r6
 8001b84:	9302      	str	r3, [sp, #8]
				if(char_c[j][7-i] == 1) {
 8001b86:	4a78      	ldr	r2, [pc, #480]	; (8001d68 <drawChar+0x424>)
 8001b88:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <drawChar+0x264>
					if (size == 1)
 8001b96:	2c01      	cmp	r4, #1
 8001b98:	f040 85e6 	bne.w	8002768 <drawChar+0xe24>
						drawPixel(x+j, y+i, color);
 8001b9c:	463a      	mov	r2, r7
 8001b9e:	9902      	ldr	r1, [sp, #8]
 8001ba0:	eb09 0005 	add.w	r0, r9, r5
 8001ba4:	f7ff fcf8 	bl	8001598 <drawPixel>
 8001ba8:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 8001bac:	f1b9 0f05 	cmp.w	r9, #5
 8001bb0:	44a2      	add	sl, r4
 8001bb2:	d1e8      	bne.n	8001b86 <drawChar+0x242>
 8001bb4:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 8001bb8:	f1b8 0f08 	cmp.w	r8, #8
 8001bbc:	44a3      	add	fp, r4
 8001bbe:	d1dc      	bne.n	8001b7a <drawChar+0x236>
 8001bc0:	f000 bcbd 	b.w	800253e <drawChar+0xbfa>
	switch(c) {
 8001bc4:	46b3      	mov	fp, r6
 8001bc6:	f04f 0800 	mov.w	r8, #0
 8001bca:	46aa      	mov	sl, r5
 8001bcc:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8001bd0:	eb08 0306 	add.w	r3, r8, r6
 8001bd4:	9302      	str	r3, [sp, #8]
				if(char_b[j][7-i] == 1) {
 8001bd6:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <drawChar+0x428>)
 8001bd8:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <drawChar+0x2b4>
					if (size == 1)
 8001be6:	2c01      	cmp	r4, #1
 8001be8:	f040 85ac 	bne.w	8002744 <drawChar+0xe00>
						drawPixel(x+j, y+i, color);
 8001bec:	463a      	mov	r2, r7
 8001bee:	9902      	ldr	r1, [sp, #8]
 8001bf0:	eb09 0005 	add.w	r0, r9, r5
 8001bf4:	f7ff fcd0 	bl	8001598 <drawPixel>
 8001bf8:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 8001bfc:	f1b9 0f05 	cmp.w	r9, #5
 8001c00:	44a2      	add	sl, r4
 8001c02:	d1e8      	bne.n	8001bd6 <drawChar+0x292>
 8001c04:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 8001c08:	f1b8 0f08 	cmp.w	r8, #8
 8001c0c:	44a3      	add	fp, r4
 8001c0e:	d1dc      	bne.n	8001bca <drawChar+0x286>
 8001c10:	f000 bc95 	b.w	800253e <drawChar+0xbfa>
	switch(c) {
 8001c14:	46b3      	mov	fp, r6
 8001c16:	f04f 0800 	mov.w	r8, #0
 8001c1a:	46aa      	mov	sl, r5
 8001c1c:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8001c20:	eb08 0306 	add.w	r3, r8, r6
 8001c24:	9302      	str	r3, [sp, #8]
				if(char_a[j][7-i] == 1) {
 8001c26:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <drawChar+0x42c>)
 8001c28:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d108      	bne.n	8001c48 <drawChar+0x304>
					if (size == 1)
 8001c36:	2c01      	cmp	r4, #1
 8001c38:	f040 857b 	bne.w	8002732 <drawChar+0xdee>
						drawPixel(x+j, y+i, color);
 8001c3c:	463a      	mov	r2, r7
 8001c3e:	9902      	ldr	r1, [sp, #8]
 8001c40:	eb09 0005 	add.w	r0, r9, r5
 8001c44:	f7ff fca8 	bl	8001598 <drawPixel>
 8001c48:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 8001c4c:	f1b9 0f05 	cmp.w	r9, #5
 8001c50:	44a2      	add	sl, r4
 8001c52:	d1e8      	bne.n	8001c26 <drawChar+0x2e2>
 8001c54:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 8001c58:	f1b8 0f08 	cmp.w	r8, #8
 8001c5c:	44a3      	add	fp, r4
 8001c5e:	d1dc      	bne.n	8001c1a <drawChar+0x2d6>
 8001c60:	f000 bc6d 	b.w	800253e <drawChar+0xbfa>
	switch(c) {
 8001c64:	46ab      	mov	fp, r5
 8001c66:	f04f 0900 	mov.w	r9, #0
 8001c6a:	46b2      	mov	sl, r6
 8001c6c:	f04f 0800 	mov.w	r8, #0
				if(char_Y[j][i] == 1) {
 8001c70:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <drawChar+0x430>)
 8001c72:	444b      	add	r3, r9
 8001c74:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001c76:	eb09 0305 	add.w	r3, r9, r5
 8001c7a:	9303      	str	r3, [sp, #12]
				if(char_Y[j][i] == 1) {
 8001c7c:	9a02      	ldr	r2, [sp, #8]
 8001c7e:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001c82:	56d3      	ldrsb	r3, [r2, r3]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <drawChar+0x356>
					if (size == 1)
 8001c88:	2c01      	cmp	r4, #1
 8001c8a:	f040 8549 	bne.w	8002720 <drawChar+0xddc>
						drawPixel(x+i, y+j, color);
 8001c8e:	463a      	mov	r2, r7
 8001c90:	eb08 0106 	add.w	r1, r8, r6
 8001c94:	9803      	ldr	r0, [sp, #12]
 8001c96:	f7ff fc7f 	bl	8001598 <drawPixel>
 8001c9a:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001c9e:	f1b8 0f08 	cmp.w	r8, #8
 8001ca2:	44a2      	add	sl, r4
 8001ca4:	d1ea      	bne.n	8001c7c <drawChar+0x338>
 8001ca6:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001caa:	f1b9 0f05 	cmp.w	r9, #5
 8001cae:	44a3      	add	fp, r4
 8001cb0:	d1db      	bne.n	8001c6a <drawChar+0x326>
 8001cb2:	f000 bc44 	b.w	800253e <drawChar+0xbfa>
	switch(c) {
 8001cb6:	46ab      	mov	fp, r5
 8001cb8:	f04f 0900 	mov.w	r9, #0
 8001cbc:	46b2      	mov	sl, r6
 8001cbe:	f04f 0800 	mov.w	r8, #0
				if(char_X[j][i] == 1) {
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <drawChar+0x434>)
 8001cc4:	444b      	add	r3, r9
 8001cc6:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001cc8:	eb09 0305 	add.w	r3, r9, r5
 8001ccc:	9303      	str	r3, [sp, #12]
				if(char_X[j][i] == 1) {
 8001cce:	9a02      	ldr	r2, [sp, #8]
 8001cd0:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001cd4:	56d3      	ldrsb	r3, [r2, r3]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d108      	bne.n	8001cec <drawChar+0x3a8>
					if (size == 1)
 8001cda:	2c01      	cmp	r4, #1
 8001cdc:	f040 8517 	bne.w	800270e <drawChar+0xdca>
						drawPixel(x+i, y+j, color);
 8001ce0:	463a      	mov	r2, r7
 8001ce2:	eb08 0106 	add.w	r1, r8, r6
 8001ce6:	9803      	ldr	r0, [sp, #12]
 8001ce8:	f7ff fc56 	bl	8001598 <drawPixel>
 8001cec:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001cf0:	f1b8 0f08 	cmp.w	r8, #8
 8001cf4:	44a2      	add	sl, r4
 8001cf6:	d1ea      	bne.n	8001cce <drawChar+0x38a>
 8001cf8:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001cfc:	f1b9 0f05 	cmp.w	r9, #5
 8001d00:	44a3      	add	fp, r4
 8001d02:	d1db      	bne.n	8001cbc <drawChar+0x378>
 8001d04:	f000 bc1b 	b.w	800253e <drawChar+0xbfa>
	switch(c) {
 8001d08:	46ab      	mov	fp, r5
 8001d0a:	f04f 0900 	mov.w	r9, #0
 8001d0e:	46b2      	mov	sl, r6
 8001d10:	f04f 0800 	mov.w	r8, #0
				if(char_U[j][i] == 1) {
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <drawChar+0x438>)
 8001d16:	444b      	add	r3, r9
 8001d18:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001d1a:	eb09 0305 	add.w	r3, r9, r5
 8001d1e:	9303      	str	r3, [sp, #12]
				if(char_U[j][i] == 1) {
 8001d20:	9a02      	ldr	r2, [sp, #8]
 8001d22:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001d26:	56d3      	ldrsb	r3, [r2, r3]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d108      	bne.n	8001d3e <drawChar+0x3fa>
					if (size == 1)
 8001d2c:	2c01      	cmp	r4, #1
 8001d2e:	f040 84e5 	bne.w	80026fc <drawChar+0xdb8>
						drawPixel(x+i, y+j, color);
 8001d32:	463a      	mov	r2, r7
 8001d34:	eb08 0106 	add.w	r1, r8, r6
 8001d38:	9803      	ldr	r0, [sp, #12]
 8001d3a:	f7ff fc2d 	bl	8001598 <drawPixel>
 8001d3e:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001d42:	f1b8 0f08 	cmp.w	r8, #8
 8001d46:	44a2      	add	sl, r4
 8001d48:	d1ea      	bne.n	8001d20 <drawChar+0x3dc>
 8001d4a:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001d4e:	f1b9 0f05 	cmp.w	r9, #5
 8001d52:	44a3      	add	fp, r4
 8001d54:	d1db      	bne.n	8001d0e <drawChar+0x3ca>
 8001d56:	e3f2      	b.n	800253e <drawChar+0xbfa>
 8001d58:	08003ec5 	.word	0x08003ec5
 8001d5c:	08003e9d 	.word	0x08003e9d
 8001d60:	08003e75 	.word	0x08003e75
 8001d64:	08003e4d 	.word	0x08003e4d
 8001d68:	08003e25 	.word	0x08003e25
 8001d6c:	08003dfd 	.word	0x08003dfd
 8001d70:	08003dd5 	.word	0x08003dd5
 8001d74:	08003da8 	.word	0x08003da8
 8001d78:	08003d7b 	.word	0x08003d7b
 8001d7c:	08003d4e 	.word	0x08003d4e
	switch(c) {
 8001d80:	46ab      	mov	fp, r5
 8001d82:	f04f 0900 	mov.w	r9, #0
 8001d86:	46b2      	mov	sl, r6
 8001d88:	f04f 0800 	mov.w	r8, #0
				if(char_T[j][i] == 1) {
 8001d8c:	4bc4      	ldr	r3, [pc, #784]	; (80020a0 <drawChar+0x75c>)
 8001d8e:	444b      	add	r3, r9
 8001d90:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001d92:	eb09 0305 	add.w	r3, r9, r5
 8001d96:	9303      	str	r3, [sp, #12]
				if(char_T[j][i] == 1) {
 8001d98:	9a02      	ldr	r2, [sp, #8]
 8001d9a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001d9e:	56d3      	ldrsb	r3, [r2, r3]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <drawChar+0x472>
					if (size == 1)
 8001da4:	2c01      	cmp	r4, #1
 8001da6:	f040 84a0 	bne.w	80026ea <drawChar+0xda6>
						drawPixel(x+i, y+j, color);
 8001daa:	463a      	mov	r2, r7
 8001dac:	eb08 0106 	add.w	r1, r8, r6
 8001db0:	9803      	ldr	r0, [sp, #12]
 8001db2:	f7ff fbf1 	bl	8001598 <drawPixel>
 8001db6:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001dba:	f1b8 0f08 	cmp.w	r8, #8
 8001dbe:	44a2      	add	sl, r4
 8001dc0:	d1ea      	bne.n	8001d98 <drawChar+0x454>
 8001dc2:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001dc6:	f1b9 0f05 	cmp.w	r9, #5
 8001dca:	44a3      	add	fp, r4
 8001dcc:	d1db      	bne.n	8001d86 <drawChar+0x442>
 8001dce:	e3b6      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8001dd0:	46ab      	mov	fp, r5
 8001dd2:	f04f 0900 	mov.w	r9, #0
 8001dd6:	46b2      	mov	sl, r6
 8001dd8:	f04f 0800 	mov.w	r8, #0
				if(char_S[j][i] == 1) {
 8001ddc:	4bb1      	ldr	r3, [pc, #708]	; (80020a4 <drawChar+0x760>)
 8001dde:	444b      	add	r3, r9
 8001de0:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001de2:	eb09 0305 	add.w	r3, r9, r5
 8001de6:	9303      	str	r3, [sp, #12]
				if(char_S[j][i] == 1) {
 8001de8:	9a02      	ldr	r2, [sp, #8]
 8001dea:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001dee:	56d3      	ldrsb	r3, [r2, r3]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d108      	bne.n	8001e06 <drawChar+0x4c2>
					if (size == 1)
 8001df4:	2c01      	cmp	r4, #1
 8001df6:	f040 846f 	bne.w	80026d8 <drawChar+0xd94>
						drawPixel(x+i, y+j, color);
 8001dfa:	463a      	mov	r2, r7
 8001dfc:	eb08 0106 	add.w	r1, r8, r6
 8001e00:	9803      	ldr	r0, [sp, #12]
 8001e02:	f7ff fbc9 	bl	8001598 <drawPixel>
 8001e06:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001e0a:	f1b8 0f08 	cmp.w	r8, #8
 8001e0e:	44a2      	add	sl, r4
 8001e10:	d1ea      	bne.n	8001de8 <drawChar+0x4a4>
 8001e12:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001e16:	f1b9 0f05 	cmp.w	r9, #5
 8001e1a:	44a3      	add	fp, r4
 8001e1c:	d1db      	bne.n	8001dd6 <drawChar+0x492>
 8001e1e:	e38e      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8001e20:	46ab      	mov	fp, r5
 8001e22:	f04f 0900 	mov.w	r9, #0
 8001e26:	46b2      	mov	sl, r6
 8001e28:	f04f 0800 	mov.w	r8, #0
				if(char_P[j][i] == 1) {
 8001e2c:	4b9e      	ldr	r3, [pc, #632]	; (80020a8 <drawChar+0x764>)
 8001e2e:	444b      	add	r3, r9
 8001e30:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001e32:	eb09 0305 	add.w	r3, r9, r5
 8001e36:	9303      	str	r3, [sp, #12]
				if(char_P[j][i] == 1) {
 8001e38:	9a02      	ldr	r2, [sp, #8]
 8001e3a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001e3e:	56d3      	ldrsb	r3, [r2, r3]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <drawChar+0x512>
					if (size == 1)
 8001e44:	2c01      	cmp	r4, #1
 8001e46:	f040 843e 	bne.w	80026c6 <drawChar+0xd82>
						drawPixel(x+i, y+j, color);
 8001e4a:	463a      	mov	r2, r7
 8001e4c:	eb08 0106 	add.w	r1, r8, r6
 8001e50:	9803      	ldr	r0, [sp, #12]
 8001e52:	f7ff fba1 	bl	8001598 <drawPixel>
 8001e56:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001e5a:	f1b8 0f08 	cmp.w	r8, #8
 8001e5e:	44a2      	add	sl, r4
 8001e60:	d1ea      	bne.n	8001e38 <drawChar+0x4f4>
 8001e62:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001e66:	f1b9 0f05 	cmp.w	r9, #5
 8001e6a:	44a3      	add	fp, r4
 8001e6c:	d1db      	bne.n	8001e26 <drawChar+0x4e2>
 8001e6e:	e366      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8001e70:	46ab      	mov	fp, r5
 8001e72:	f04f 0900 	mov.w	r9, #0
 8001e76:	46b2      	mov	sl, r6
 8001e78:	f04f 0800 	mov.w	r8, #0
				if(char_O[j][i] == 1) {
 8001e7c:	4b8b      	ldr	r3, [pc, #556]	; (80020ac <drawChar+0x768>)
 8001e7e:	444b      	add	r3, r9
 8001e80:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001e82:	eb09 0305 	add.w	r3, r9, r5
 8001e86:	9303      	str	r3, [sp, #12]
				if(char_O[j][i] == 1) {
 8001e88:	9a02      	ldr	r2, [sp, #8]
 8001e8a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001e8e:	56d3      	ldrsb	r3, [r2, r3]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d108      	bne.n	8001ea6 <drawChar+0x562>
					if (size == 1)
 8001e94:	2c01      	cmp	r4, #1
 8001e96:	f040 840d 	bne.w	80026b4 <drawChar+0xd70>
						drawPixel(x+i, y+j, color);
 8001e9a:	463a      	mov	r2, r7
 8001e9c:	eb08 0106 	add.w	r1, r8, r6
 8001ea0:	9803      	ldr	r0, [sp, #12]
 8001ea2:	f7ff fb79 	bl	8001598 <drawPixel>
 8001ea6:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001eaa:	f1b8 0f08 	cmp.w	r8, #8
 8001eae:	44a2      	add	sl, r4
 8001eb0:	d1ea      	bne.n	8001e88 <drawChar+0x544>
 8001eb2:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001eb6:	f1b9 0f05 	cmp.w	r9, #5
 8001eba:	44a3      	add	fp, r4
 8001ebc:	d1db      	bne.n	8001e76 <drawChar+0x532>
 8001ebe:	e33e      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8001ec0:	46ab      	mov	fp, r5
 8001ec2:	f04f 0900 	mov.w	r9, #0
 8001ec6:	46b2      	mov	sl, r6
 8001ec8:	f04f 0800 	mov.w	r8, #0
				if(char_L[j][i] == 1) {
 8001ecc:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <drawChar+0x76c>)
 8001ece:	444b      	add	r3, r9
 8001ed0:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001ed2:	eb09 0305 	add.w	r3, r9, r5
 8001ed6:	9303      	str	r3, [sp, #12]
				if(char_L[j][i] == 1) {
 8001ed8:	9a02      	ldr	r2, [sp, #8]
 8001eda:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001ede:	56d3      	ldrsb	r3, [r2, r3]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d108      	bne.n	8001ef6 <drawChar+0x5b2>
					if (size == 1)
 8001ee4:	2c01      	cmp	r4, #1
 8001ee6:	f040 83dd 	bne.w	80026a4 <drawChar+0xd60>
						drawPixel(x+i, y+j, color);
 8001eea:	463a      	mov	r2, r7
 8001eec:	eb08 0106 	add.w	r1, r8, r6
 8001ef0:	9803      	ldr	r0, [sp, #12]
 8001ef2:	f7ff fb51 	bl	8001598 <drawPixel>
 8001ef6:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001efa:	f1b8 0f08 	cmp.w	r8, #8
 8001efe:	44a2      	add	sl, r4
 8001f00:	d1ea      	bne.n	8001ed8 <drawChar+0x594>
 8001f02:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001f06:	f1b9 0f05 	cmp.w	r9, #5
 8001f0a:	44a3      	add	fp, r4
 8001f0c:	d1db      	bne.n	8001ec6 <drawChar+0x582>
 8001f0e:	e316      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8001f10:	46ab      	mov	fp, r5
 8001f12:	f04f 0900 	mov.w	r9, #0
 8001f16:	46b2      	mov	sl, r6
 8001f18:	f04f 0800 	mov.w	r8, #0
				if(char_H[j][i] == 1) {
 8001f1c:	4b65      	ldr	r3, [pc, #404]	; (80020b4 <drawChar+0x770>)
 8001f1e:	444b      	add	r3, r9
 8001f20:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001f22:	eb09 0305 	add.w	r3, r9, r5
 8001f26:	9303      	str	r3, [sp, #12]
				if(char_H[j][i] == 1) {
 8001f28:	9a02      	ldr	r2, [sp, #8]
 8001f2a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001f2e:	56d3      	ldrsb	r3, [r2, r3]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d108      	bne.n	8001f46 <drawChar+0x602>
					if (size == 1)
 8001f34:	2c01      	cmp	r4, #1
 8001f36:	f040 83ad 	bne.w	8002694 <drawChar+0xd50>
						drawPixel(x+i, y+j, color);
 8001f3a:	463a      	mov	r2, r7
 8001f3c:	eb08 0106 	add.w	r1, r8, r6
 8001f40:	9803      	ldr	r0, [sp, #12]
 8001f42:	f7ff fb29 	bl	8001598 <drawPixel>
 8001f46:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001f4a:	f1b8 0f08 	cmp.w	r8, #8
 8001f4e:	44a2      	add	sl, r4
 8001f50:	d1ea      	bne.n	8001f28 <drawChar+0x5e4>
 8001f52:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001f56:	f1b9 0f05 	cmp.w	r9, #5
 8001f5a:	44a3      	add	fp, r4
 8001f5c:	d1db      	bne.n	8001f16 <drawChar+0x5d2>
 8001f5e:	e2ee      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8001f60:	46ab      	mov	fp, r5
 8001f62:	f04f 0900 	mov.w	r9, #0
 8001f66:	46b2      	mov	sl, r6
 8001f68:	f04f 0800 	mov.w	r8, #0
				if(char_F[j][i] == 1) {
 8001f6c:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <drawChar+0x774>)
 8001f6e:	444b      	add	r3, r9
 8001f70:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001f72:	eb09 0305 	add.w	r3, r9, r5
 8001f76:	9303      	str	r3, [sp, #12]
				if(char_F[j][i] == 1) {
 8001f78:	9a02      	ldr	r2, [sp, #8]
 8001f7a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001f7e:	56d3      	ldrsb	r3, [r2, r3]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d108      	bne.n	8001f96 <drawChar+0x652>
					if (size == 1)
 8001f84:	2c01      	cmp	r4, #1
 8001f86:	f040 837d 	bne.w	8002684 <drawChar+0xd40>
						drawPixel(x+i, y+j, color);
 8001f8a:	463a      	mov	r2, r7
 8001f8c:	eb08 0106 	add.w	r1, r8, r6
 8001f90:	9803      	ldr	r0, [sp, #12]
 8001f92:	f7ff fb01 	bl	8001598 <drawPixel>
 8001f96:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001f9a:	f1b8 0f08 	cmp.w	r8, #8
 8001f9e:	44a2      	add	sl, r4
 8001fa0:	d1ea      	bne.n	8001f78 <drawChar+0x634>
 8001fa2:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001fa6:	f1b9 0f05 	cmp.w	r9, #5
 8001faa:	44a3      	add	fp, r4
 8001fac:	d1db      	bne.n	8001f66 <drawChar+0x622>
 8001fae:	e2c6      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8001fb0:	46ab      	mov	fp, r5
 8001fb2:	f04f 0900 	mov.w	r9, #0
 8001fb6:	46b2      	mov	sl, r6
 8001fb8:	f04f 0800 	mov.w	r8, #0
				if(char_E[j][i] == 1) {
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <drawChar+0x778>)
 8001fbe:	444b      	add	r3, r9
 8001fc0:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8001fc2:	eb09 0305 	add.w	r3, r9, r5
 8001fc6:	9303      	str	r3, [sp, #12]
				if(char_E[j][i] == 1) {
 8001fc8:	9a02      	ldr	r2, [sp, #8]
 8001fca:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8001fce:	56d3      	ldrsb	r3, [r2, r3]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <drawChar+0x6a2>
					if (size == 1)
 8001fd4:	2c01      	cmp	r4, #1
 8001fd6:	f040 834d 	bne.w	8002674 <drawChar+0xd30>
						drawPixel(x+i, y+j, color);
 8001fda:	463a      	mov	r2, r7
 8001fdc:	eb08 0106 	add.w	r1, r8, r6
 8001fe0:	9803      	ldr	r0, [sp, #12]
 8001fe2:	f7ff fad9 	bl	8001598 <drawPixel>
 8001fe6:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8001fea:	f1b8 0f08 	cmp.w	r8, #8
 8001fee:	44a2      	add	sl, r4
 8001ff0:	d1ea      	bne.n	8001fc8 <drawChar+0x684>
 8001ff2:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8001ff6:	f1b9 0f05 	cmp.w	r9, #5
 8001ffa:	44a3      	add	fp, r4
 8001ffc:	d1db      	bne.n	8001fb6 <drawChar+0x672>
 8001ffe:	e29e      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8002000:	46ab      	mov	fp, r5
 8002002:	f04f 0900 	mov.w	r9, #0
 8002006:	46b2      	mov	sl, r6
 8002008:	f04f 0800 	mov.w	r8, #0
				if(char_C[j][i] == 1) {
 800200c:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <drawChar+0x77c>)
 800200e:	444b      	add	r3, r9
 8002010:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8002012:	eb09 0305 	add.w	r3, r9, r5
 8002016:	9303      	str	r3, [sp, #12]
				if(char_C[j][i] == 1) {
 8002018:	9a02      	ldr	r2, [sp, #8]
 800201a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 800201e:	56d3      	ldrsb	r3, [r2, r3]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d108      	bne.n	8002036 <drawChar+0x6f2>
					if (size == 1)
 8002024:	2c01      	cmp	r4, #1
 8002026:	f040 831d 	bne.w	8002664 <drawChar+0xd20>
						drawPixel(x+i, y+j, color);
 800202a:	463a      	mov	r2, r7
 800202c:	eb08 0106 	add.w	r1, r8, r6
 8002030:	9803      	ldr	r0, [sp, #12]
 8002032:	f7ff fab1 	bl	8001598 <drawPixel>
 8002036:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 800203a:	f1b8 0f08 	cmp.w	r8, #8
 800203e:	44a2      	add	sl, r4
 8002040:	d1ea      	bne.n	8002018 <drawChar+0x6d4>
 8002042:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8002046:	f1b9 0f05 	cmp.w	r9, #5
 800204a:	44a3      	add	fp, r4
 800204c:	d1db      	bne.n	8002006 <drawChar+0x6c2>
 800204e:	e276      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8002050:	46ab      	mov	fp, r5
 8002052:	f04f 0900 	mov.w	r9, #0
 8002056:	46b2      	mov	sl, r6
 8002058:	f04f 0800 	mov.w	r8, #0
				if(char_B[j][i] == 1) {
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <drawChar+0x780>)
 800205e:	444b      	add	r3, r9
 8002060:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8002062:	eb09 0305 	add.w	r3, r9, r5
 8002066:	9303      	str	r3, [sp, #12]
				if(char_B[j][i] == 1) {
 8002068:	9a02      	ldr	r2, [sp, #8]
 800206a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 800206e:	56d3      	ldrsb	r3, [r2, r3]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d108      	bne.n	8002086 <drawChar+0x742>
					if (size == 1)
 8002074:	2c01      	cmp	r4, #1
 8002076:	f040 82ed 	bne.w	8002654 <drawChar+0xd10>
						drawPixel(x+i, y+j, color);
 800207a:	463a      	mov	r2, r7
 800207c:	eb08 0106 	add.w	r1, r8, r6
 8002080:	9803      	ldr	r0, [sp, #12]
 8002082:	f7ff fa89 	bl	8001598 <drawPixel>
 8002086:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 800208a:	f1b8 0f08 	cmp.w	r8, #8
 800208e:	44a2      	add	sl, r4
 8002090:	d1ea      	bne.n	8002068 <drawChar+0x724>
 8002092:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8002096:	f1b9 0f05 	cmp.w	r9, #5
 800209a:	44a3      	add	fp, r4
 800209c:	d1db      	bne.n	8002056 <drawChar+0x712>
 800209e:	e24e      	b.n	800253e <drawChar+0xbfa>
 80020a0:	08003cf4 	.word	0x08003cf4
 80020a4:	08003cc7 	.word	0x08003cc7
 80020a8:	08003c9a 	.word	0x08003c9a
 80020ac:	08003c6d 	.word	0x08003c6d
 80020b0:	08003c13 	.word	0x08003c13
 80020b4:	08003be6 	.word	0x08003be6
 80020b8:	08003bb9 	.word	0x08003bb9
 80020bc:	08003b5f 	.word	0x08003b5f
 80020c0:	08003b32 	.word	0x08003b32
 80020c4:	08003b05 	.word	0x08003b05
	switch(c) {
 80020c8:	46ab      	mov	fp, r5
 80020ca:	f04f 0900 	mov.w	r9, #0
 80020ce:	46b2      	mov	sl, r6
 80020d0:	f04f 0800 	mov.w	r8, #0
				if(char_A[j][i] == 1) {
 80020d4:	4bc2      	ldr	r3, [pc, #776]	; (80023e0 <drawChar+0xa9c>)
 80020d6:	444b      	add	r3, r9
 80020d8:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 80020da:	eb09 0305 	add.w	r3, r9, r5
 80020de:	9303      	str	r3, [sp, #12]
				if(char_A[j][i] == 1) {
 80020e0:	9a02      	ldr	r2, [sp, #8]
 80020e2:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 80020e6:	56d3      	ldrsb	r3, [r2, r3]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d108      	bne.n	80020fe <drawChar+0x7ba>
					if (size == 1)
 80020ec:	2c01      	cmp	r4, #1
 80020ee:	f040 82a9 	bne.w	8002644 <drawChar+0xd00>
						drawPixel(x+i, y+j, color);
 80020f2:	463a      	mov	r2, r7
 80020f4:	eb08 0106 	add.w	r1, r8, r6
 80020f8:	9803      	ldr	r0, [sp, #12]
 80020fa:	f7ff fa4d 	bl	8001598 <drawPixel>
 80020fe:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8002102:	f1b8 0f08 	cmp.w	r8, #8
 8002106:	44a2      	add	sl, r4
 8002108:	d1ea      	bne.n	80020e0 <drawChar+0x79c>
 800210a:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 800210e:	f1b9 0f05 	cmp.w	r9, #5
 8002112:	44a3      	add	fp, r4
 8002114:	d1db      	bne.n	80020ce <drawChar+0x78a>
 8002116:	e212      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8002118:	46ab      	mov	fp, r5
 800211a:	f04f 0900 	mov.w	r9, #0
 800211e:	46b2      	mov	sl, r6
 8002120:	f04f 0800 	mov.w	r8, #0
				if(char_TWO[j][i] == 1) {
 8002124:	4baf      	ldr	r3, [pc, #700]	; (80023e4 <drawChar+0xaa0>)
 8002126:	444b      	add	r3, r9
 8002128:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 800212a:	eb09 0305 	add.w	r3, r9, r5
 800212e:	9303      	str	r3, [sp, #12]
				if(char_TWO[j][i] == 1) {
 8002130:	9a02      	ldr	r2, [sp, #8]
 8002132:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8002136:	56d3      	ldrsb	r3, [r2, r3]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <drawChar+0x80a>
					if (size == 1)
 800213c:	2c01      	cmp	r4, #1
 800213e:	f040 8221 	bne.w	8002584 <drawChar+0xc40>
						drawPixel(x+i, y+j, color);
 8002142:	463a      	mov	r2, r7
 8002144:	eb08 0106 	add.w	r1, r8, r6
 8002148:	9803      	ldr	r0, [sp, #12]
 800214a:	f7ff fa25 	bl	8001598 <drawPixel>
 800214e:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8002152:	f1b8 0f08 	cmp.w	r8, #8
 8002156:	44a2      	add	sl, r4
 8002158:	d1ea      	bne.n	8002130 <drawChar+0x7ec>
 800215a:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 800215e:	f1b9 0f05 	cmp.w	r9, #5
 8002162:	44a3      	add	fp, r4
 8002164:	d1db      	bne.n	800211e <drawChar+0x7da>
 8002166:	e1ea      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8002168:	46ab      	mov	fp, r5
 800216a:	f04f 0900 	mov.w	r9, #0
 800216e:	46b2      	mov	sl, r6
 8002170:	f04f 0800 	mov.w	r8, #0
				if(char_9[j][i] == 1) {
 8002174:	4b9c      	ldr	r3, [pc, #624]	; (80023e8 <drawChar+0xaa4>)
 8002176:	444b      	add	r3, r9
 8002178:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 800217a:	eb09 0305 	add.w	r3, r9, r5
 800217e:	9303      	str	r3, [sp, #12]
				if(char_9[j][i] == 1) {
 8002180:	9a02      	ldr	r2, [sp, #8]
 8002182:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8002186:	56d3      	ldrsb	r3, [r2, r3]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <drawChar+0x85a>
					if (size == 1)
 800218c:	2c01      	cmp	r4, #1
 800218e:	f040 8251 	bne.w	8002634 <drawChar+0xcf0>
						drawPixel(x+i, y+j, color);
 8002192:	463a      	mov	r2, r7
 8002194:	eb08 0106 	add.w	r1, r8, r6
 8002198:	9803      	ldr	r0, [sp, #12]
 800219a:	f7ff f9fd 	bl	8001598 <drawPixel>
 800219e:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 80021a2:	f1b8 0f08 	cmp.w	r8, #8
 80021a6:	44a2      	add	sl, r4
 80021a8:	d1ea      	bne.n	8002180 <drawChar+0x83c>
 80021aa:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 80021ae:	f1b9 0f05 	cmp.w	r9, #5
 80021b2:	44a3      	add	fp, r4
 80021b4:	d1db      	bne.n	800216e <drawChar+0x82a>
 80021b6:	e1c2      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 80021b8:	46ab      	mov	fp, r5
 80021ba:	f04f 0900 	mov.w	r9, #0
 80021be:	46b2      	mov	sl, r6
 80021c0:	f04f 0800 	mov.w	r8, #0
				if(char_8[j][i] == 1) {
 80021c4:	4b89      	ldr	r3, [pc, #548]	; (80023ec <drawChar+0xaa8>)
 80021c6:	444b      	add	r3, r9
 80021c8:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 80021ca:	eb09 0305 	add.w	r3, r9, r5
 80021ce:	9303      	str	r3, [sp, #12]
				if(char_8[j][i] == 1) {
 80021d0:	9a02      	ldr	r2, [sp, #8]
 80021d2:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 80021d6:	56d3      	ldrsb	r3, [r2, r3]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d108      	bne.n	80021ee <drawChar+0x8aa>
					if (size == 1)
 80021dc:	2c01      	cmp	r4, #1
 80021de:	f040 8221 	bne.w	8002624 <drawChar+0xce0>
						drawPixel(x+i, y+j, color);
 80021e2:	463a      	mov	r2, r7
 80021e4:	eb08 0106 	add.w	r1, r8, r6
 80021e8:	9803      	ldr	r0, [sp, #12]
 80021ea:	f7ff f9d5 	bl	8001598 <drawPixel>
 80021ee:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 80021f2:	f1b8 0f08 	cmp.w	r8, #8
 80021f6:	44a2      	add	sl, r4
 80021f8:	d1ea      	bne.n	80021d0 <drawChar+0x88c>
 80021fa:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 80021fe:	f1b9 0f05 	cmp.w	r9, #5
 8002202:	44a3      	add	fp, r4
 8002204:	d1db      	bne.n	80021be <drawChar+0x87a>
 8002206:	e19a      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8002208:	46ab      	mov	fp, r5
 800220a:	f04f 0900 	mov.w	r9, #0
 800220e:	46b2      	mov	sl, r6
 8002210:	f04f 0800 	mov.w	r8, #0
				if(char_7[j][i] == 1) {
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <drawChar+0xaac>)
 8002216:	444b      	add	r3, r9
 8002218:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 800221a:	eb09 0305 	add.w	r3, r9, r5
 800221e:	9303      	str	r3, [sp, #12]
				if(char_7[j][i] == 1) {
 8002220:	9a02      	ldr	r2, [sp, #8]
 8002222:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8002226:	56d3      	ldrsb	r3, [r2, r3]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d108      	bne.n	800223e <drawChar+0x8fa>
					if (size == 1)
 800222c:	2c01      	cmp	r4, #1
 800222e:	f040 81f1 	bne.w	8002614 <drawChar+0xcd0>
						drawPixel(x+i, y+j, color);
 8002232:	463a      	mov	r2, r7
 8002234:	eb08 0106 	add.w	r1, r8, r6
 8002238:	9803      	ldr	r0, [sp, #12]
 800223a:	f7ff f9ad 	bl	8001598 <drawPixel>
 800223e:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8002242:	f1b8 0f08 	cmp.w	r8, #8
 8002246:	44a2      	add	sl, r4
 8002248:	d1ea      	bne.n	8002220 <drawChar+0x8dc>
 800224a:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 800224e:	f1b9 0f05 	cmp.w	r9, #5
 8002252:	44a3      	add	fp, r4
 8002254:	d1db      	bne.n	800220e <drawChar+0x8ca>
 8002256:	e172      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8002258:	46ab      	mov	fp, r5
 800225a:	f04f 0900 	mov.w	r9, #0
 800225e:	46b2      	mov	sl, r6
 8002260:	f04f 0800 	mov.w	r8, #0
				if(char_6[j][i] == 1) {
 8002264:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <drawChar+0xab0>)
 8002266:	444b      	add	r3, r9
 8002268:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 800226a:	eb09 0305 	add.w	r3, r9, r5
 800226e:	9303      	str	r3, [sp, #12]
				if(char_6[j][i] == 1) {
 8002270:	9a02      	ldr	r2, [sp, #8]
 8002272:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8002276:	56d3      	ldrsb	r3, [r2, r3]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d108      	bne.n	800228e <drawChar+0x94a>
					if (size == 1)
 800227c:	2c01      	cmp	r4, #1
 800227e:	f040 81c1 	bne.w	8002604 <drawChar+0xcc0>
						drawPixel(x+i, y+j, color);
 8002282:	463a      	mov	r2, r7
 8002284:	eb06 0108 	add.w	r1, r6, r8
 8002288:	9803      	ldr	r0, [sp, #12]
 800228a:	f7ff f985 	bl	8001598 <drawPixel>
 800228e:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 8002292:	f1b8 0f08 	cmp.w	r8, #8
 8002296:	44a2      	add	sl, r4
 8002298:	d1ea      	bne.n	8002270 <drawChar+0x92c>
 800229a:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 800229e:	f1b9 0f05 	cmp.w	r9, #5
 80022a2:	44a3      	add	fp, r4
 80022a4:	d1db      	bne.n	800225e <drawChar+0x91a>
 80022a6:	e14a      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 80022a8:	46b3      	mov	fp, r6
 80022aa:	f04f 0800 	mov.w	r8, #0
 80022ae:	46aa      	mov	sl, r5
 80022b0:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 80022b4:	eb08 0306 	add.w	r3, r8, r6
 80022b8:	9302      	str	r3, [sp, #8]
				if(char_5[j][7-i] == 1) {
 80022ba:	4a4f      	ldr	r2, [pc, #316]	; (80023f8 <drawChar+0xab4>)
 80022bc:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 80022c0:	4413      	add	r3, r2
 80022c2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d108      	bne.n	80022dc <drawChar+0x998>
					if (size == 1)
 80022ca:	2c01      	cmp	r4, #1
 80022cc:	f040 8192 	bne.w	80025f4 <drawChar+0xcb0>
						drawPixel(x+j, y+i, color);
 80022d0:	463a      	mov	r2, r7
 80022d2:	9902      	ldr	r1, [sp, #8]
 80022d4:	eb05 0009 	add.w	r0, r5, r9
 80022d8:	f7ff f95e 	bl	8001598 <drawPixel>
 80022dc:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 80022e0:	f1b9 0f05 	cmp.w	r9, #5
 80022e4:	44a2      	add	sl, r4
 80022e6:	d1e8      	bne.n	80022ba <drawChar+0x976>
 80022e8:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 80022ec:	f1b8 0f08 	cmp.w	r8, #8
 80022f0:	44a3      	add	fp, r4
 80022f2:	d1dc      	bne.n	80022ae <drawChar+0x96a>
 80022f4:	e123      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 80022f6:	46b3      	mov	fp, r6
 80022f8:	f04f 0800 	mov.w	r8, #0
 80022fc:	46aa      	mov	sl, r5
 80022fe:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8002302:	eb06 0308 	add.w	r3, r6, r8
 8002306:	9302      	str	r3, [sp, #8]
				if(char_4[j][7-i] == 1) {
 8002308:	4a3c      	ldr	r2, [pc, #240]	; (80023fc <drawChar+0xab8>)
 800230a:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 800230e:	4413      	add	r3, r2
 8002310:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <drawChar+0x9e6>
					if (size == 1)
 8002318:	2c01      	cmp	r4, #1
 800231a:	f040 8163 	bne.w	80025e4 <drawChar+0xca0>
						drawPixel(x+j, y+i, color);
 800231e:	463a      	mov	r2, r7
 8002320:	9902      	ldr	r1, [sp, #8]
 8002322:	eb09 0005 	add.w	r0, r9, r5
 8002326:	f7ff f937 	bl	8001598 <drawPixel>
 800232a:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 800232e:	f1b9 0f05 	cmp.w	r9, #5
 8002332:	44a2      	add	sl, r4
 8002334:	d1e8      	bne.n	8002308 <drawChar+0x9c4>
 8002336:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 800233a:	f1b8 0f08 	cmp.w	r8, #8
 800233e:	44a3      	add	fp, r4
 8002340:	d1dc      	bne.n	80022fc <drawChar+0x9b8>
 8002342:	e0fc      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8002344:	46b3      	mov	fp, r6
 8002346:	f04f 0800 	mov.w	r8, #0
 800234a:	46aa      	mov	sl, r5
 800234c:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8002350:	eb06 0308 	add.w	r3, r6, r8
 8002354:	9302      	str	r3, [sp, #8]
				if(char_3[j][7-i] == 1) {
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <drawChar+0xabc>)
 8002358:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 800235c:	4413      	add	r3, r2
 800235e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d108      	bne.n	8002378 <drawChar+0xa34>
					if (size == 1)
 8002366:	2c01      	cmp	r4, #1
 8002368:	f040 8134 	bne.w	80025d4 <drawChar+0xc90>
						drawPixel(x+j, y+i, color);
 800236c:	463a      	mov	r2, r7
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	eb05 0009 	add.w	r0, r5, r9
 8002374:	f7ff f910 	bl	8001598 <drawPixel>
 8002378:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 800237c:	f1b9 0f05 	cmp.w	r9, #5
 8002380:	44a2      	add	sl, r4
 8002382:	d1e8      	bne.n	8002356 <drawChar+0xa12>
 8002384:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 8002388:	f1b8 0f08 	cmp.w	r8, #8
 800238c:	44a3      	add	fp, r4
 800238e:	d1dc      	bne.n	800234a <drawChar+0xa06>
 8002390:	e0d5      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8002392:	46b3      	mov	fp, r6
 8002394:	f04f 0800 	mov.w	r8, #0
 8002398:	46aa      	mov	sl, r5
 800239a:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 800239e:	eb08 0306 	add.w	r3, r8, r6
 80023a2:	9302      	str	r3, [sp, #8]
				if(char_2[j][7-i] == 1) {
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <drawChar+0xac0>)
 80023a6:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 80023aa:	4413      	add	r3, r2
 80023ac:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d108      	bne.n	80023c6 <drawChar+0xa82>
					if (size == 1)
 80023b4:	2c01      	cmp	r4, #1
 80023b6:	f040 8105 	bne.w	80025c4 <drawChar+0xc80>
						drawPixel(x+j, y+i, color);
 80023ba:	463a      	mov	r2, r7
 80023bc:	9902      	ldr	r1, [sp, #8]
 80023be:	eb09 0005 	add.w	r0, r9, r5
 80023c2:	f7ff f8e9 	bl	8001598 <drawPixel>
 80023c6:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 80023ca:	f1b9 0f05 	cmp.w	r9, #5
 80023ce:	44a2      	add	sl, r4
 80023d0:	d1e8      	bne.n	80023a4 <drawChar+0xa60>
 80023d2:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 80023d6:	f1b8 0f08 	cmp.w	r8, #8
 80023da:	44a3      	add	fp, r4
 80023dc:	d1dc      	bne.n	8002398 <drawChar+0xa54>
 80023de:	e0ae      	b.n	800253e <drawChar+0xbfa>
 80023e0:	08003ad8 	.word	0x08003ad8
 80023e4:	08003d21 	.word	0x08003d21
 80023e8:	08003aab 	.word	0x08003aab
 80023ec:	08003a7e 	.word	0x08003a7e
 80023f0:	08003a51 	.word	0x08003a51
 80023f4:	08003a24 	.word	0x08003a24
 80023f8:	080039fc 	.word	0x080039fc
 80023fc:	080039d4 	.word	0x080039d4
 8002400:	080039ac 	.word	0x080039ac
 8002404:	08003984 	.word	0x08003984
	switch(c) {
 8002408:	46b3      	mov	fp, r6
 800240a:	f04f 0800 	mov.w	r8, #0
 800240e:	46aa      	mov	sl, r5
 8002410:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8002414:	eb08 0306 	add.w	r3, r8, r6
 8002418:	9302      	str	r3, [sp, #8]
				if(char_1[j][7-i] == 1) {
 800241a:	4acf      	ldr	r2, [pc, #828]	; (8002758 <drawChar+0xe14>)
 800241c:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 8002420:	4413      	add	r3, r2
 8002422:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d108      	bne.n	800243c <drawChar+0xaf8>
					if (size == 1)
 800242a:	2c01      	cmp	r4, #1
 800242c:	f040 80c2 	bne.w	80025b4 <drawChar+0xc70>
						drawPixel(x+j, y+i, color);
 8002430:	463a      	mov	r2, r7
 8002432:	9902      	ldr	r1, [sp, #8]
 8002434:	eb05 0009 	add.w	r0, r5, r9
 8002438:	f7ff f8ae 	bl	8001598 <drawPixel>
 800243c:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 8002440:	f1b9 0f05 	cmp.w	r9, #5
 8002444:	44a2      	add	sl, r4
 8002446:	d1e8      	bne.n	800241a <drawChar+0xad6>
 8002448:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 800244c:	f1b8 0f08 	cmp.w	r8, #8
 8002450:	44a3      	add	fp, r4
 8002452:	d1dc      	bne.n	800240e <drawChar+0xaca>
 8002454:	e073      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 8002456:	46b3      	mov	fp, r6
 8002458:	f04f 0800 	mov.w	r8, #0
 800245c:	46aa      	mov	sl, r5
 800245e:	f04f 0900 	mov.w	r9, #0
						drawPixel(x+j, y+i, color);
 8002462:	eb06 0308 	add.w	r3, r6, r8
 8002466:	9302      	str	r3, [sp, #8]
				if(char_0[j][7-i] == 1) {
 8002468:	4abc      	ldr	r2, [pc, #752]	; (800275c <drawChar+0xe18>)
 800246a:	ebc8 03c9 	rsb	r3, r8, r9, lsl #3
 800246e:	4413      	add	r3, r2
 8002470:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d108      	bne.n	800248a <drawChar+0xb46>
					if (size == 1)
 8002478:	2c01      	cmp	r4, #1
 800247a:	f040 8093 	bne.w	80025a4 <drawChar+0xc60>
						drawPixel(x+j, y+i, color);
 800247e:	463a      	mov	r2, r7
 8002480:	9902      	ldr	r1, [sp, #8]
 8002482:	eb05 0009 	add.w	r0, r5, r9
 8002486:	f7ff f887 	bl	8001598 <drawPixel>
 800248a:	f109 0901 	add.w	r9, r9, #1
			for(int8_t j=0; j<5; j++) {
 800248e:	f1b9 0f05 	cmp.w	r9, #5
 8002492:	44a2      	add	sl, r4
 8002494:	d1e8      	bne.n	8002468 <drawChar+0xb24>
 8002496:	f108 0801 	add.w	r8, r8, #1
		for(int8_t i=0; i<8; i++) {
 800249a:	f1b8 0f08 	cmp.w	r8, #8
 800249e:	44a3      	add	fp, r4
 80024a0:	d1dc      	bne.n	800245c <drawChar+0xb18>
 80024a2:	e04c      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 80024a4:	46ab      	mov	fp, r5
 80024a6:	f04f 0900 	mov.w	r9, #0
 80024aa:	46b2      	mov	sl, r6
 80024ac:	f04f 0800 	mov.w	r8, #0
				if(char_MINUS[j][i] == 1) {
 80024b0:	4bab      	ldr	r3, [pc, #684]	; (8002760 <drawChar+0xe1c>)
 80024b2:	444b      	add	r3, r9
 80024b4:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 80024b6:	eb05 0309 	add.w	r3, r5, r9
 80024ba:	9303      	str	r3, [sp, #12]
				if(char_MINUS[j][i] == 1) {
 80024bc:	9a02      	ldr	r2, [sp, #8]
 80024be:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 80024c2:	56d3      	ldrsb	r3, [r2, r3]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <drawChar+0xb94>
					if (size == 1)
 80024c8:	2c01      	cmp	r4, #1
 80024ca:	d163      	bne.n	8002594 <drawChar+0xc50>
						drawPixel(x+i, y+j, color);
 80024cc:	463a      	mov	r2, r7
 80024ce:	eb08 0106 	add.w	r1, r8, r6
 80024d2:	9803      	ldr	r0, [sp, #12]
 80024d4:	f7ff f860 	bl	8001598 <drawPixel>
 80024d8:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 80024dc:	f1b8 0f08 	cmp.w	r8, #8
 80024e0:	44a2      	add	sl, r4
 80024e2:	d1eb      	bne.n	80024bc <drawChar+0xb78>
 80024e4:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 80024e8:	f1b9 0f05 	cmp.w	r9, #5
 80024ec:	44a3      	add	fp, r4
 80024ee:	d1dc      	bne.n	80024aa <drawChar+0xb66>
 80024f0:	e025      	b.n	800253e <drawChar+0xbfa>
	switch(c) {
 80024f2:	46ab      	mov	fp, r5
 80024f4:	f04f 0900 	mov.w	r9, #0
void drawChar(uint16_t WIDTH, uint16_t HEIGHT, int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t textbgcolor, uint8_t size) {
 80024f8:	46b2      	mov	sl, r6
 80024fa:	f04f 0800 	mov.w	r8, #0
				if(char_EX[j][i] == 1) {
 80024fe:	4b99      	ldr	r3, [pc, #612]	; (8002764 <drawChar+0xe20>)
 8002500:	444b      	add	r3, r9
 8002502:	9302      	str	r3, [sp, #8]
						drawPixel(x+i, y+j, color);
 8002504:	eb09 0305 	add.w	r3, r9, r5
 8002508:	9303      	str	r3, [sp, #12]
				if(char_EX[j][i] == 1) {
 800250a:	9a02      	ldr	r2, [sp, #8]
 800250c:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8002510:	56d3      	ldrsb	r3, [r2, r3]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <drawChar+0xbe2>
					if (size == 1)
 8002516:	2c01      	cmp	r4, #1
 8002518:	d12c      	bne.n	8002574 <drawChar+0xc30>
						drawPixel(x+i, y+j, color);
 800251a:	463a      	mov	r2, r7
 800251c:	eb08 0106 	add.w	r1, r8, r6
 8002520:	9803      	ldr	r0, [sp, #12]
 8002522:	f7ff f839 	bl	8001598 <drawPixel>
 8002526:	f108 0801 	add.w	r8, r8, #1
			for(int8_t j=0; j<8; j++) {
 800252a:	f1b8 0f08 	cmp.w	r8, #8
 800252e:	44a2      	add	sl, r4
 8002530:	d1eb      	bne.n	800250a <drawChar+0xbc6>
 8002532:	f109 0901 	add.w	r9, r9, #1
		for(int8_t i=0; i<5; i++) {
 8002536:	f1b9 0f05 	cmp.w	r9, #5
 800253a:	44a3      	add	fp, r4
 800253c:	d1dc      	bne.n	80024f8 <drawChar+0xbb4>
					fillRect(x+i*size, y+j*size, size, size, textbgcolor);
				}
			}
		break;
	}
}
 800253e:	b005      	add	sp, #20
 8002540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch(c) {
 8002544:	f04f 0805 	mov.w	r8, #5
 8002548:	46b2      	mov	sl, r6
					fillRect(x+i*size, y+j*size, size, size, textbgcolor);
 800254a:	2708      	movs	r7, #8
 800254c:	4651      	mov	r1, sl
 800254e:	f8cd 9000 	str.w	r9, [sp]
 8002552:	4623      	mov	r3, r4
 8002554:	4622      	mov	r2, r4
 8002556:	4628      	mov	r0, r5
 8002558:	3f01      	subs	r7, #1
 800255a:	f7ff f95d 	bl	8001818 <fillRect>
				for(int8_t j=0; j<8; j++) {
 800255e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8002562:	44a2      	add	sl, r4
 8002564:	d1f2      	bne.n	800254c <drawChar+0xc08>
 8002566:	f108 38ff 	add.w	r8, r8, #4294967295
		for(int8_t i=0; i<5; i++) {
 800256a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800256e:	4425      	add	r5, r4
 8002570:	d1ea      	bne.n	8002548 <drawChar+0xc04>
 8002572:	e7e4      	b.n	800253e <drawChar+0xbfa>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002574:	9700      	str	r7, [sp, #0]
 8002576:	4623      	mov	r3, r4
 8002578:	4622      	mov	r2, r4
 800257a:	4651      	mov	r1, sl
 800257c:	4658      	mov	r0, fp
 800257e:	f7ff f94b 	bl	8001818 <fillRect>
 8002582:	e7d0      	b.n	8002526 <drawChar+0xbe2>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002584:	9700      	str	r7, [sp, #0]
 8002586:	4623      	mov	r3, r4
 8002588:	4622      	mov	r2, r4
 800258a:	4651      	mov	r1, sl
 800258c:	4658      	mov	r0, fp
 800258e:	f7ff f943 	bl	8001818 <fillRect>
 8002592:	e5dc      	b.n	800214e <drawChar+0x80a>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002594:	9700      	str	r7, [sp, #0]
 8002596:	4623      	mov	r3, r4
 8002598:	4622      	mov	r2, r4
 800259a:	4651      	mov	r1, sl
 800259c:	4658      	mov	r0, fp
 800259e:	f7ff f93b 	bl	8001818 <fillRect>
 80025a2:	e799      	b.n	80024d8 <drawChar+0xb94>
						fillRect(x+j*size, y+i*size, size, size, color);
 80025a4:	9700      	str	r7, [sp, #0]
 80025a6:	4623      	mov	r3, r4
 80025a8:	4622      	mov	r2, r4
 80025aa:	4659      	mov	r1, fp
 80025ac:	4650      	mov	r0, sl
 80025ae:	f7ff f933 	bl	8001818 <fillRect>
 80025b2:	e76a      	b.n	800248a <drawChar+0xb46>
						fillRect(x+j*size, y+i*size, size, size, color);
 80025b4:	9700      	str	r7, [sp, #0]
 80025b6:	4623      	mov	r3, r4
 80025b8:	4622      	mov	r2, r4
 80025ba:	4659      	mov	r1, fp
 80025bc:	4650      	mov	r0, sl
 80025be:	f7ff f92b 	bl	8001818 <fillRect>
 80025c2:	e73b      	b.n	800243c <drawChar+0xaf8>
						fillRect(x+j*size, y+i*size, size, size, color);
 80025c4:	9700      	str	r7, [sp, #0]
 80025c6:	4623      	mov	r3, r4
 80025c8:	4622      	mov	r2, r4
 80025ca:	4659      	mov	r1, fp
 80025cc:	4650      	mov	r0, sl
 80025ce:	f7ff f923 	bl	8001818 <fillRect>
 80025d2:	e6f8      	b.n	80023c6 <drawChar+0xa82>
						fillRect(x+j*size, y+i*size, size, size, color);
 80025d4:	9700      	str	r7, [sp, #0]
 80025d6:	4623      	mov	r3, r4
 80025d8:	4622      	mov	r2, r4
 80025da:	4659      	mov	r1, fp
 80025dc:	4650      	mov	r0, sl
 80025de:	f7ff f91b 	bl	8001818 <fillRect>
 80025e2:	e6c9      	b.n	8002378 <drawChar+0xa34>
						fillRect(x+j*size, y+i*size, size, size, color);
 80025e4:	9700      	str	r7, [sp, #0]
 80025e6:	4623      	mov	r3, r4
 80025e8:	4622      	mov	r2, r4
 80025ea:	4659      	mov	r1, fp
 80025ec:	4650      	mov	r0, sl
 80025ee:	f7ff f913 	bl	8001818 <fillRect>
 80025f2:	e69a      	b.n	800232a <drawChar+0x9e6>
						fillRect(x+j*size, y+i*size, size, size, color);
 80025f4:	9700      	str	r7, [sp, #0]
 80025f6:	4623      	mov	r3, r4
 80025f8:	4622      	mov	r2, r4
 80025fa:	4659      	mov	r1, fp
 80025fc:	4650      	mov	r0, sl
 80025fe:	f7ff f90b 	bl	8001818 <fillRect>
 8002602:	e66b      	b.n	80022dc <drawChar+0x998>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002604:	9700      	str	r7, [sp, #0]
 8002606:	4623      	mov	r3, r4
 8002608:	4622      	mov	r2, r4
 800260a:	4651      	mov	r1, sl
 800260c:	4658      	mov	r0, fp
 800260e:	f7ff f903 	bl	8001818 <fillRect>
 8002612:	e63c      	b.n	800228e <drawChar+0x94a>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002614:	9700      	str	r7, [sp, #0]
 8002616:	4623      	mov	r3, r4
 8002618:	4622      	mov	r2, r4
 800261a:	4651      	mov	r1, sl
 800261c:	4658      	mov	r0, fp
 800261e:	f7ff f8fb 	bl	8001818 <fillRect>
 8002622:	e60c      	b.n	800223e <drawChar+0x8fa>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002624:	9700      	str	r7, [sp, #0]
 8002626:	4623      	mov	r3, r4
 8002628:	4622      	mov	r2, r4
 800262a:	4651      	mov	r1, sl
 800262c:	4658      	mov	r0, fp
 800262e:	f7ff f8f3 	bl	8001818 <fillRect>
 8002632:	e5dc      	b.n	80021ee <drawChar+0x8aa>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002634:	9700      	str	r7, [sp, #0]
 8002636:	4623      	mov	r3, r4
 8002638:	4622      	mov	r2, r4
 800263a:	4651      	mov	r1, sl
 800263c:	4658      	mov	r0, fp
 800263e:	f7ff f8eb 	bl	8001818 <fillRect>
 8002642:	e5ac      	b.n	800219e <drawChar+0x85a>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002644:	9700      	str	r7, [sp, #0]
 8002646:	4623      	mov	r3, r4
 8002648:	4622      	mov	r2, r4
 800264a:	4651      	mov	r1, sl
 800264c:	4658      	mov	r0, fp
 800264e:	f7ff f8e3 	bl	8001818 <fillRect>
 8002652:	e554      	b.n	80020fe <drawChar+0x7ba>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002654:	9700      	str	r7, [sp, #0]
 8002656:	4623      	mov	r3, r4
 8002658:	4622      	mov	r2, r4
 800265a:	4651      	mov	r1, sl
 800265c:	4658      	mov	r0, fp
 800265e:	f7ff f8db 	bl	8001818 <fillRect>
 8002662:	e510      	b.n	8002086 <drawChar+0x742>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002664:	9700      	str	r7, [sp, #0]
 8002666:	4623      	mov	r3, r4
 8002668:	4622      	mov	r2, r4
 800266a:	4651      	mov	r1, sl
 800266c:	4658      	mov	r0, fp
 800266e:	f7ff f8d3 	bl	8001818 <fillRect>
 8002672:	e4e0      	b.n	8002036 <drawChar+0x6f2>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002674:	9700      	str	r7, [sp, #0]
 8002676:	4623      	mov	r3, r4
 8002678:	4622      	mov	r2, r4
 800267a:	4651      	mov	r1, sl
 800267c:	4658      	mov	r0, fp
 800267e:	f7ff f8cb 	bl	8001818 <fillRect>
 8002682:	e4b0      	b.n	8001fe6 <drawChar+0x6a2>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002684:	9700      	str	r7, [sp, #0]
 8002686:	4623      	mov	r3, r4
 8002688:	4622      	mov	r2, r4
 800268a:	4651      	mov	r1, sl
 800268c:	4658      	mov	r0, fp
 800268e:	f7ff f8c3 	bl	8001818 <fillRect>
 8002692:	e480      	b.n	8001f96 <drawChar+0x652>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002694:	9700      	str	r7, [sp, #0]
 8002696:	4623      	mov	r3, r4
 8002698:	4622      	mov	r2, r4
 800269a:	4651      	mov	r1, sl
 800269c:	4658      	mov	r0, fp
 800269e:	f7ff f8bb 	bl	8001818 <fillRect>
 80026a2:	e450      	b.n	8001f46 <drawChar+0x602>
						fillRect(x+i*size, y+j*size, size, size, color);
 80026a4:	9700      	str	r7, [sp, #0]
 80026a6:	4623      	mov	r3, r4
 80026a8:	4622      	mov	r2, r4
 80026aa:	4651      	mov	r1, sl
 80026ac:	4658      	mov	r0, fp
 80026ae:	f7ff f8b3 	bl	8001818 <fillRect>
 80026b2:	e420      	b.n	8001ef6 <drawChar+0x5b2>
						fillRect(x+i*size, y+j*size, size, size, color);
 80026b4:	9700      	str	r7, [sp, #0]
 80026b6:	4623      	mov	r3, r4
 80026b8:	4622      	mov	r2, r4
 80026ba:	4651      	mov	r1, sl
 80026bc:	4658      	mov	r0, fp
 80026be:	f7ff f8ab 	bl	8001818 <fillRect>
 80026c2:	f7ff bbf0 	b.w	8001ea6 <drawChar+0x562>
						fillRect(x+i*size, y+j*size, size, size, color);
 80026c6:	9700      	str	r7, [sp, #0]
 80026c8:	4623      	mov	r3, r4
 80026ca:	4622      	mov	r2, r4
 80026cc:	4651      	mov	r1, sl
 80026ce:	4658      	mov	r0, fp
 80026d0:	f7ff f8a2 	bl	8001818 <fillRect>
 80026d4:	f7ff bbbf 	b.w	8001e56 <drawChar+0x512>
						fillRect(x+i*size, y+j*size, size, size, color);
 80026d8:	9700      	str	r7, [sp, #0]
 80026da:	4623      	mov	r3, r4
 80026dc:	4622      	mov	r2, r4
 80026de:	4651      	mov	r1, sl
 80026e0:	4658      	mov	r0, fp
 80026e2:	f7ff f899 	bl	8001818 <fillRect>
 80026e6:	f7ff bb8e 	b.w	8001e06 <drawChar+0x4c2>
						fillRect(x+i*size, y+j*size, size, size, color);
 80026ea:	9700      	str	r7, [sp, #0]
 80026ec:	4623      	mov	r3, r4
 80026ee:	4622      	mov	r2, r4
 80026f0:	4651      	mov	r1, sl
 80026f2:	4658      	mov	r0, fp
 80026f4:	f7ff f890 	bl	8001818 <fillRect>
 80026f8:	f7ff bb5d 	b.w	8001db6 <drawChar+0x472>
						fillRect(x+i*size, y+j*size, size, size, color);
 80026fc:	9700      	str	r7, [sp, #0]
 80026fe:	4623      	mov	r3, r4
 8002700:	4622      	mov	r2, r4
 8002702:	4651      	mov	r1, sl
 8002704:	4658      	mov	r0, fp
 8002706:	f7ff f887 	bl	8001818 <fillRect>
 800270a:	f7ff bb18 	b.w	8001d3e <drawChar+0x3fa>
						fillRect(x+i*size, y+j*size, size, size, color);
 800270e:	9700      	str	r7, [sp, #0]
 8002710:	4623      	mov	r3, r4
 8002712:	4622      	mov	r2, r4
 8002714:	4651      	mov	r1, sl
 8002716:	4658      	mov	r0, fp
 8002718:	f7ff f87e 	bl	8001818 <fillRect>
 800271c:	f7ff bae6 	b.w	8001cec <drawChar+0x3a8>
						fillRect(x+i*size, y+j*size, size, size, color);
 8002720:	9700      	str	r7, [sp, #0]
 8002722:	4623      	mov	r3, r4
 8002724:	4622      	mov	r2, r4
 8002726:	4651      	mov	r1, sl
 8002728:	4658      	mov	r0, fp
 800272a:	f7ff f875 	bl	8001818 <fillRect>
 800272e:	f7ff bab4 	b.w	8001c9a <drawChar+0x356>
						fillRect(x+j*size, y+i*size, size, size, color);
 8002732:	9700      	str	r7, [sp, #0]
 8002734:	4623      	mov	r3, r4
 8002736:	4622      	mov	r2, r4
 8002738:	4659      	mov	r1, fp
 800273a:	4650      	mov	r0, sl
 800273c:	f7ff f86c 	bl	8001818 <fillRect>
 8002740:	f7ff ba82 	b.w	8001c48 <drawChar+0x304>
						fillRect(x+j*size, y+i*size, size, size, color);
 8002744:	9700      	str	r7, [sp, #0]
 8002746:	4623      	mov	r3, r4
 8002748:	4622      	mov	r2, r4
 800274a:	4659      	mov	r1, fp
 800274c:	4650      	mov	r0, sl
 800274e:	f7ff f863 	bl	8001818 <fillRect>
 8002752:	f7ff ba51 	b.w	8001bf8 <drawChar+0x2b4>
 8002756:	bf00      	nop
 8002758:	0800395c 	.word	0x0800395c
 800275c:	08003934 	.word	0x08003934
 8002760:	08003c40 	.word	0x08003c40
 8002764:	08003b8c 	.word	0x08003b8c
						fillRect(x+j*size, y+i*size, size, size, color);
 8002768:	9700      	str	r7, [sp, #0]
 800276a:	4623      	mov	r3, r4
 800276c:	4622      	mov	r2, r4
 800276e:	4659      	mov	r1, fp
 8002770:	4650      	mov	r0, sl
 8002772:	f7ff f851 	bl	8001818 <fillRect>
 8002776:	f7ff ba17 	b.w	8001ba8 <drawChar+0x264>
						fillRect(x+j*size, y+i*size, size, size, color);
 800277a:	9700      	str	r7, [sp, #0]
 800277c:	4623      	mov	r3, r4
 800277e:	4622      	mov	r2, r4
 8002780:	4659      	mov	r1, fp
 8002782:	4650      	mov	r0, sl
 8002784:	f7ff f848 	bl	8001818 <fillRect>
 8002788:	f7ff b9e6 	b.w	8001b58 <drawChar+0x214>
						fillRect(x+j*size, y+i*size, size, size, color);
 800278c:	9700      	str	r7, [sp, #0]
 800278e:	4623      	mov	r3, r4
 8002790:	4622      	mov	r2, r4
 8002792:	4659      	mov	r1, fp
 8002794:	4650      	mov	r0, sl
 8002796:	f7ff f83f 	bl	8001818 <fillRect>
 800279a:	f7ff b9b5 	b.w	8001b08 <drawChar+0x1c4>
						fillRect(x+j*size, y+i*size, size, size, color);
 800279e:	9700      	str	r7, [sp, #0]
 80027a0:	4623      	mov	r3, r4
 80027a2:	4622      	mov	r2, r4
 80027a4:	4659      	mov	r1, fp
 80027a6:	4650      	mov	r0, sl
 80027a8:	f7ff f836 	bl	8001818 <fillRect>
 80027ac:	f7ff b984 	b.w	8001ab8 <drawChar+0x174>
						fillRect(x+j*size, y+i*size, size, size, color);
 80027b0:	9700      	str	r7, [sp, #0]
 80027b2:	4623      	mov	r3, r4
 80027b4:	4622      	mov	r2, r4
 80027b6:	4659      	mov	r1, fp
 80027b8:	4650      	mov	r0, sl
 80027ba:	f7ff f82d 	bl	8001818 <fillRect>
 80027be:	f7ff b953 	b.w	8001a68 <drawChar+0x124>
 80027c2:	bf00      	nop

080027c4 <write>:
void write(uint8_t c) {
 80027c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(c == '\n') {                        // Newline?
 80027c6:	280a      	cmp	r0, #10
void write(uint8_t c) {
 80027c8:	b085      	sub	sp, #20
    if(c == '\n') {                        // Newline?
 80027ca:	d10b      	bne.n	80027e4 <write+0x20>
        cursor_x  = 0;                     // Reset x to zero,
 80027cc:	2200      	movs	r2, #0
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <write+0x8c>)
 80027d0:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize * 8;          // advance y one line
 80027d2:	4a20      	ldr	r2, [pc, #128]	; (8002854 <write+0x90>)
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <write+0x94>)
 80027d6:	7819      	ldrb	r1, [r3, #0]
 80027d8:	8813      	ldrh	r3, [r2, #0]
 80027da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80027de:	8013      	strh	r3, [r2, #0]
}
 80027e0:	b005      	add	sp, #20
 80027e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(c != '\r') {                 // Ignore carriage returns
 80027e4:	280d      	cmp	r0, #13
 80027e6:	d0fb      	beq.n	80027e0 <write+0x1c>
        if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <write+0x98>)
 80027ea:	4c19      	ldr	r4, [pc, #100]	; (8002850 <write+0x8c>)
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	4d1a      	ldr	r5, [pc, #104]	; (8002858 <write+0x94>)
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <write+0x90>)
 80027f2:	b182      	cbz	r2, 8002816 <write+0x52>
 80027f4:	2106      	movs	r1, #6
 80027f6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80027fa:	782e      	ldrb	r6, [r5, #0]
 80027fc:	fb01 2106 	mla	r1, r1, r6, r2
 8002800:	4a17      	ldr	r2, [pc, #92]	; (8002860 <write+0x9c>)
 8002802:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002806:	4291      	cmp	r1, r2
 8002808:	dd05      	ble.n	8002816 <write+0x52>
            cursor_x  = 0;                 // Reset x to zero,
 800280a:	2200      	movs	r2, #0
 800280c:	8022      	strh	r2, [r4, #0]
            cursor_y += textsize * 8;      // advance y one line
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002814:	801a      	strh	r2, [r3, #0]
        drawChar(WIDTH, HEIGHT, cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8002816:	782f      	ldrb	r7, [r5, #0]
 8002818:	4912      	ldr	r1, [pc, #72]	; (8002864 <write+0xa0>)
 800281a:	4e13      	ldr	r6, [pc, #76]	; (8002868 <write+0xa4>)
 800281c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002820:	8836      	ldrh	r6, [r6, #0]
 8002822:	8809      	ldrh	r1, [r1, #0]
 8002824:	9703      	str	r7, [sp, #12]
 8002826:	4f11      	ldr	r7, [pc, #68]	; (800286c <write+0xa8>)
 8002828:	f9b4 2000 	ldrsh.w	r2, [r4]
 800282c:	883f      	ldrh	r7, [r7, #0]
 800282e:	9702      	str	r7, [sp, #8]
 8002830:	4f0f      	ldr	r7, [pc, #60]	; (8002870 <write+0xac>)
 8002832:	883f      	ldrh	r7, [r7, #0]
 8002834:	e88d 0081 	stmia.w	sp, {r0, r7}
 8002838:	4630      	mov	r0, r6
 800283a:	f7ff f883 	bl	8001944 <drawChar>
        cursor_x += textsize * 6;          // Advance x one char
 800283e:	782b      	ldrb	r3, [r5, #0]
 8002840:	8822      	ldrh	r2, [r4, #0]
 8002842:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002846:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800284a:	8023      	strh	r3, [r4, #0]
}
 800284c:	e7c8      	b.n	80027e0 <write+0x1c>
 800284e:	bf00      	nop
 8002850:	20000154 	.word	0x20000154
 8002854:	200000c4 	.word	0x200000c4
 8002858:	20000157 	.word	0x20000157
 800285c:	20000156 	.word	0x20000156
 8002860:	20000150 	.word	0x20000150
 8002864:	20000008 	.word	0x20000008
 8002868:	2000000a 	.word	0x2000000a
 800286c:	20000166 	.word	0x20000166
 8002870:	20000168 	.word	0x20000168

08002874 <print>:
void print(char c[]) {
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	4604      	mov	r4, r0
	size_t n = strlen(c);
 8002878:	f7fd fc68 	bl	800014c <strlen>
 800287c:	1825      	adds	r5, r4, r0
	for (size_t i = 0; i < n; i++) {
 800287e:	42ac      	cmp	r4, r5
 8002880:	d100      	bne.n	8002884 <print+0x10>
}
 8002882:	bd38      	pop	{r3, r4, r5, pc}
		write(c[i]);
 8002884:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002888:	f7ff ff9c 	bl	80027c4 <write>
 800288c:	e7f7      	b.n	800287e <print+0xa>
	...

08002890 <testDrawScreen>:
void testDrawScreen() {
 8002890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	textsize = (size > 0) ? size : 1;
 8002894:	2304      	movs	r3, #4
	textcolor = color;
 8002896:	241f      	movs	r4, #31
	cursor_x = x;
 8002898:	f04f 0b10 	mov.w	fp, #16
	textbgcolor = txtbgcolor;
 800289c:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
	cursor_x = x;
 80028a0:	f8df a134 	ldr.w	sl, [pc, #308]	; 80029d8 <testDrawScreen+0x148>
	cursor_y = y;
 80028a4:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80029dc <testDrawScreen+0x14c>
	textcolor = color;
 80028a8:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80029e0 <testDrawScreen+0x150>
	textbgcolor = txtbgcolor;
 80028ac:	4e40      	ldr	r6, [pc, #256]	; (80029b0 <testDrawScreen+0x120>)
	textsize = (size > 0) ? size : 1;
 80028ae:	4d41      	ldr	r5, [pc, #260]	; (80029b4 <testDrawScreen+0x124>)
void testDrawScreen() {
 80028b0:	b085      	sub	sp, #20
	print("UfAbC TeStE!!");
 80028b2:	4841      	ldr	r0, [pc, #260]	; (80029b8 <testDrawScreen+0x128>)
	cursor_x = x;
 80028b4:	f8aa b000 	strh.w	fp, [sl]
	cursor_y = y;
 80028b8:	f8a9 b000 	strh.w	fp, [r9]
	textcolor = color;
 80028bc:	f8a8 4000 	strh.w	r4, [r8]
	textsize = (size > 0) ? size : 1;
 80028c0:	702b      	strb	r3, [r5, #0]
 80028c2:	9303      	str	r3, [sp, #12]
	textbgcolor = txtbgcolor;
 80028c4:	8037      	strh	r7, [r6, #0]
	print("UfAbC TeStE!!");
 80028c6:	f7ff ffd5 	bl	8002874 <print>
	cursor_y = y;
 80028ca:	2246      	movs	r2, #70	; 0x46
	textsize = (size > 0) ? size : 1;
 80028cc:	9b03      	ldr	r3, [sp, #12]
	print("BoTaO 1");
 80028ce:	483b      	ldr	r0, [pc, #236]	; (80029bc <testDrawScreen+0x12c>)
	cursor_x = x;
 80028d0:	f8aa b000 	strh.w	fp, [sl]
	cursor_y = y;
 80028d4:	f8a9 2000 	strh.w	r2, [r9]
	textcolor = color;
 80028d8:	f8a8 4000 	strh.w	r4, [r8]
	textsize = (size > 0) ? size : 1;
 80028dc:	702b      	strb	r3, [r5, #0]
	textbgcolor = txtbgcolor;
 80028de:	8037      	strh	r7, [r6, #0]
	print("BoTaO 1");
 80028e0:	f7ff ffc8 	bl	8002874 <print>
	drawRect(10, 62, 185, 45, BLUE);
 80028e4:	9400      	str	r4, [sp, #0]
 80028e6:	232d      	movs	r3, #45	; 0x2d
 80028e8:	22b9      	movs	r2, #185	; 0xb9
 80028ea:	213e      	movs	r1, #62	; 0x3e
 80028ec:	200a      	movs	r0, #10
 80028ee:	f7fe fe99 	bl	8001624 <drawRect>
	drawRect(11, 63, 183, 43, BLUE);
 80028f2:	22b7      	movs	r2, #183	; 0xb7
 80028f4:	213f      	movs	r1, #63	; 0x3f
 80028f6:	9400      	str	r4, [sp, #0]
 80028f8:	232b      	movs	r3, #43	; 0x2b
 80028fa:	200b      	movs	r0, #11
 80028fc:	f7fe fe92 	bl	8001624 <drawRect>
	cursor_y = y;
 8002900:	2394      	movs	r3, #148	; 0x94
	cursor_x = x;
 8002902:	f8aa b000 	strh.w	fp, [sl]
	textsize = (size > 0) ? size : 1;
 8002906:	f04f 0b02 	mov.w	fp, #2
	print("X:");
 800290a:	482d      	ldr	r0, [pc, #180]	; (80029c0 <testDrawScreen+0x130>)
	cursor_y = y;
 800290c:	f8a9 3000 	strh.w	r3, [r9]
 8002910:	9303      	str	r3, [sp, #12]
	textcolor = color;
 8002912:	f8a8 4000 	strh.w	r4, [r8]
	textbgcolor = txtbgcolor;
 8002916:	8037      	strh	r7, [r6, #0]
	textsize = (size > 0) ? size : 1;
 8002918:	f885 b000 	strb.w	fp, [r5]
	print("X:");
 800291c:	f7ff ffaa 	bl	8002874 <print>
	cursor_x = x;
 8002920:	2282      	movs	r2, #130	; 0x82
	cursor_y = y;
 8002922:	9b03      	ldr	r3, [sp, #12]
	textcolor = color;
 8002924:	f8a8 4000 	strh.w	r4, [r8]
	if (teste >= 320) {
 8002928:	4c26      	ldr	r4, [pc, #152]	; (80029c4 <testDrawScreen+0x134>)
	print("Y:");
 800292a:	4827      	ldr	r0, [pc, #156]	; (80029c8 <testDrawScreen+0x138>)
	cursor_y = y;
 800292c:	f8a9 3000 	strh.w	r3, [r9]
	cursor_x = x;
 8002930:	f8aa 2000 	strh.w	r2, [sl]
	textbgcolor = txtbgcolor;
 8002934:	8037      	strh	r7, [r6, #0]
	textsize = (size > 0) ? size : 1;
 8002936:	f885 b000 	strb.w	fp, [r5]
	print("Y:");
 800293a:	f7ff ff9b 	bl	8002874 <print>
	if (teste >= 320) {
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
		teste = 0;
 8002944:	bfac      	ite	ge
 8002946:	2300      	movge	r3, #0
		teste += 1;
 8002948:	3301      	addlt	r3, #1
 800294a:	6023      	str	r3, [r4, #0]
	if (touchx_atual > 150 && touchx_atual < 500 && touchy_atual > 780 && touchy_atual < 1450) {
 800294c:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <testDrawScreen+0x13c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3b97      	subs	r3, #151	; 0x97
 8002952:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8002956:	d828      	bhi.n	80029aa <testDrawScreen+0x11a>
 8002958:	f46f 7243 	mvn.w	r2, #780	; 0x30c
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <testDrawScreen+0x140>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4413      	add	r3, r2
 8002962:	f5b3 7f27 	cmp.w	r3, #668	; 0x29c
 8002966:	d820      	bhi.n	80029aa <testDrawScreen+0x11a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002968:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800296a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296e:	4819      	ldr	r0, [pc, #100]	; (80029d4 <testDrawScreen+0x144>)
 8002970:	f7fe f9a2 	bl	8000cb8 <HAL_GPIO_WritePin>
	fillRect(320-teste, 100, 4, 30, RED);
 8002974:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002978:	6820      	ldr	r0, [r4, #0]
 800297a:	2204      	movs	r2, #4
 800297c:	f5c0 70a0 	rsb	r0, r0, #320	; 0x140
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2164      	movs	r1, #100	; 0x64
 8002984:	231e      	movs	r3, #30
 8002986:	b200      	sxth	r0, r0
 8002988:	f7fe ff46 	bl	8001818 <fillRect>
	fillRect(320-teste+4, 100, 4, 30, GREEN);
 800298c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002990:	6820      	ldr	r0, [r4, #0]
 8002992:	2204      	movs	r2, #4
 8002994:	f5c0 70a2 	rsb	r0, r0, #324	; 0x144
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2164      	movs	r1, #100	; 0x64
 800299c:	231e      	movs	r3, #30
 800299e:	b200      	sxth	r0, r0
 80029a0:	f7fe ff3a 	bl	8001818 <fillRect>
}
 80029a4:	b005      	add	sp, #20
 80029a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80029aa:	2201      	movs	r2, #1
 80029ac:	e7dd      	b.n	800296a <testDrawScreen+0xda>
 80029ae:	bf00      	nop
 80029b0:	20000166 	.word	0x20000166
 80029b4:	20000157 	.word	0x20000157
 80029b8:	08003ef0 	.word	0x08003ef0
 80029bc:	08003efe 	.word	0x08003efe
 80029c0:	08003f06 	.word	0x08003f06
 80029c4:	200000a4 	.word	0x200000a4
 80029c8:	08003f09 	.word	0x08003f09
 80029cc:	200000a8 	.word	0x200000a8
 80029d0:	200000ac 	.word	0x200000ac
 80029d4:	40011000 	.word	0x40011000
 80029d8:	20000154 	.word	0x20000154
 80029dc:	200000c4 	.word	0x200000c4
 80029e0:	20000168 	.word	0x20000168

080029e4 <reset>:
}

void reset() {
 80029e4:	b508      	push	{r3, lr}
    done_reset = 1;
    cs_idle();
 80029e6:	f7fe fce1 	bl	80013ac <cs_idle>
    rd_idle();
 80029ea:	f7fe fcaf 	bl	800134c <rd_idle>
    wr_idle();
 80029ee:	f7fe fcbd 	bl	800136c <wr_idle>
    reset_idle();
 80029f2:	f7fe fceb 	bl	80013cc <reset_idle>
    reset_active();
 80029f6:	f7fe fce1 	bl	80013bc <reset_active>
    reset_idle();
}
 80029fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    reset_idle();
 80029fe:	f7fe bce5 	b.w	80013cc <reset_idle>
	...

08002a04 <wr_analog_input>:
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(RD_PORT, &GPIO_InitStruct);
}

void wr_analog_input() {
 8002a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = WR_PIN;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a06:	2202      	movs	r2, #2
 8002a08:	2303      	movs	r3, #3
	  HAL_GPIO_Init(WR_PORT, &GPIO_InitStruct);
 8002a0a:	4669      	mov	r1, sp
 8002a0c:	4803      	ldr	r0, [pc, #12]	; (8002a1c <wr_analog_input+0x18>)
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0e:	e88d 000c 	stmia.w	sp, {r2, r3}
	  HAL_GPIO_Init(WR_PORT, &GPIO_InitStruct);
 8002a12:	f7fe f871 	bl	8000af8 <HAL_GPIO_Init>
}
 8002a16:	b005      	add	sp, #20
 8002a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a1c:	40010800 	.word	0x40010800

08002a20 <wr_output>:

void wr_output() {
 8002a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = WR_PIN;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a22:	2200      	movs	r2, #0
 8002a24:	2303      	movs	r3, #3
 8002a26:	2002      	movs	r0, #2
 8002a28:	2101      	movs	r1, #1
 8002a2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	  HAL_GPIO_Init(WR_PORT, &GPIO_InitStruct);
 8002a2e:	4669      	mov	r1, sp
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <wr_output+0x1c>)
 8002a32:	f7fe f861 	bl	8000af8 <HAL_GPIO_Init>
}
 8002a36:	b005      	add	sp, #20
 8002a38:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a3c:	40010800 	.word	0x40010800

08002a40 <readTouchX>:
void readTouchX() {
 8002a40:	b508      	push	{r3, lr}
	wr_analog_input(); //_yp
 8002a42:	f7ff ffdf 	bl	8002a04 <wr_analog_input>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002a46:	2201      	movs	r2, #1
 8002a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a4c:	4807      	ldr	r0, [pc, #28]	; (8002a6c <readTouchX+0x2c>)
 8002a4e:	f7fe f933 	bl	8000cb8 <HAL_GPIO_WritePin>
	rs_cmd(); //_ym LOW
 8002a52:	f7fe fc93 	bl	800137c <rs_cmd>
	flag_adc = 1;
 8002a56:	2201      	movs	r2, #1
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <readTouchX+0x30>)
	HAL_ADC_Start_IT(&hadc1);
 8002a5a:	4806      	ldr	r0, [pc, #24]	; (8002a74 <readTouchX+0x34>)
	flag_adc = 1;
 8002a5c:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8002a5e:	f7fd fd33 	bl	80004c8 <HAL_ADC_Start_IT>
}
 8002a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wr_output();
 8002a66:	f7ff bfdb 	b.w	8002a20 <wr_output>
 8002a6a:	bf00      	nop
 8002a6c:	40010c00 	.word	0x40010c00
 8002a70:	2000001c 	.word	0x2000001c
 8002a74:	200000d8 	.word	0x200000d8

08002a78 <rs_analog_input>:

void rs_analog_input() {
 8002a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = RS_PIN;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	2303      	movs	r3, #3
	  HAL_GPIO_Init(RS_PORT, &GPIO_InitStruct);
 8002a7e:	4669      	mov	r1, sp
 8002a80:	4803      	ldr	r0, [pc, #12]	; (8002a90 <rs_analog_input+0x18>)
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a82:	e88d 000c 	stmia.w	sp, {r2, r3}
	  HAL_GPIO_Init(RS_PORT, &GPIO_InitStruct);
 8002a86:	f7fe f837 	bl	8000af8 <HAL_GPIO_Init>
}
 8002a8a:	b005      	add	sp, #20
 8002a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a90:	40010800 	.word	0x40010800

08002a94 <rs_output>:

void rs_output() {
 8002a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  GPIO_InitTypeDef GPIO_InitStruct;
	  GPIO_InitStruct.Pin = RS_PIN;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a96:	2200      	movs	r2, #0
 8002a98:	2303      	movs	r3, #3
 8002a9a:	2004      	movs	r0, #4
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	  HAL_GPIO_Init(RS_PORT, &GPIO_InitStruct);
 8002aa2:	4669      	mov	r1, sp
 8002aa4:	4802      	ldr	r0, [pc, #8]	; (8002ab0 <rs_output+0x1c>)
 8002aa6:	f7fe f827 	bl	8000af8 <HAL_GPIO_Init>
}
 8002aaa:	b005      	add	sp, #20
 8002aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ab0:	40010800 	.word	0x40010800

08002ab4 <begin>:
void begin(uint16_t ID) {
 8002ab4:	b538      	push	{r3, r4, r5, lr}
    _lcd_xor = 0;
 8002ab6:	2400      	movs	r4, #0
	wr_output();
 8002ab8:	f7ff ffb2 	bl	8002a20 <wr_output>
	rs_output();
 8002abc:	f7ff ffea 	bl	8002a94 <rs_output>
    reset();
 8002ac0:	f7ff ff90 	bl	80029e4 <reset>
    _lcd_xor = 0;
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <begin+0x48>)
	_lcd_capable = 0 | XSA_XEA_16BIT | REV_SCREEN;
 8002ac6:	4d0e      	ldr	r5, [pc, #56]	; (8002b00 <begin+0x4c>)
    _lcd_xor = 0;
 8002ac8:	801c      	strh	r4, [r3, #0]
	_lcd_capable = 0 | XSA_XEA_16BIT | REV_SCREEN;
 8002aca:	f44f 5381 	mov.w	r3, #4128	; 0x1020
	init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
 8002ace:	21a4      	movs	r1, #164	; 0xa4
 8002ad0:	480c      	ldr	r0, [pc, #48]	; (8002b04 <begin+0x50>)
	_lcd_capable = 0 | XSA_XEA_16BIT | REV_SCREEN;
 8002ad2:	802b      	strh	r3, [r5, #0]
	init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
 8002ad4:	f7fe fcee 	bl	80014b4 <init_table16>
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8002ad8:	882b      	ldrh	r3, [r5, #0]
 8002ada:	4a0b      	ldr	r2, [pc, #44]	; (8002b08 <begin+0x54>)
 8002adc:	f3c3 3300 	ubfx	r3, r3, #12, #1
    invertDisplay(false);
 8002ae0:	4620      	mov	r0, r4
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8002ae2:	8013      	strh	r3, [r2, #0]
    invertDisplay(false);
 8002ae4:	f7fe fcc8 	bl	8001478 <invertDisplay>
    setRotation(3);
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f7fe fdbf 	bl	800166c <setRotation>
}
 8002aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fillScreen(GREEN);
 8002af2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002af6:	f7fe bf11 	b.w	800191c <fillScreen>
 8002afa:	bf00      	nop
 8002afc:	20000152 	.word	0x20000152
 8002b00:	200000c2 	.word	0x200000c2
 8002b04:	08003890 	.word	0x08003890
 8002b08:	200000cc 	.word	0x200000cc

08002b0c <readTouchY>:
void readTouchY() {
 8002b0c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b0e:	4c0e      	ldr	r4, [pc, #56]	; (8002b48 <readTouchY+0x3c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	4620      	mov	r0, r4
 8002b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b18:	f7fe f8ce 	bl	8000cb8 <HAL_GPIO_WritePin>
	rs_cmd();
 8002b1c:	f7fe fc2e 	bl	800137c <rs_cmd>
	rs_analog_input(); //_yp
 8002b20:	f7ff ffaa 	bl	8002a78 <rs_analog_input>
	wr_idle(); //_yp HIGH
 8002b24:	f7fe fc22 	bl	800136c <wr_idle>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002b28:	4620      	mov	r0, r4
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b30:	f7fe f8c2 	bl	8000cb8 <HAL_GPIO_WritePin>
	flag_adc = 1;
 8002b34:	2201      	movs	r2, #1
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <readTouchY+0x40>)
	HAL_ADC_Start_IT(&hadc1);
 8002b38:	4805      	ldr	r0, [pc, #20]	; (8002b50 <readTouchY+0x44>)
	flag_adc = 1;
 8002b3a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8002b3c:	f7fd fcc4 	bl	80004c8 <HAL_ADC_Start_IT>
}
 8002b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rs_output();
 8002b44:	f7ff bfa6 	b.w	8002a94 <rs_output>
 8002b48:	40010c00 	.word	0x40010c00
 8002b4c:	2000001c 	.word	0x2000001c
 8002b50:	200000d8 	.word	0x200000d8

08002b54 <readTouch>:
void readTouch(){
 8002b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (flag_adc == 0) {
 8002b58:	4d2c      	ldr	r5, [pc, #176]	; (8002c0c <readTouch+0xb8>)
void readTouch(){
 8002b5a:	2414      	movs	r4, #20
	int temp = 0;
 8002b5c:	2600      	movs	r6, #0
 8002b5e:	46a8      	mov	r8, r5
			temp += val_adc1;
 8002b60:	4f2b      	ldr	r7, [pc, #172]	; (8002c10 <readTouch+0xbc>)
void readTouch(){
 8002b62:	b09c      	sub	sp, #112	; 0x70
		readTouchX();
 8002b64:	f7ff ff6c 	bl	8002a40 <readTouchX>
		if (flag_adc == 0) {
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	b90b      	cbnz	r3, 8002b70 <readTouch+0x1c>
			temp += val_adc1;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	441e      	add	r6, r3
	for (int i = 0; i < 20; i++) {
 8002b70:	3c01      	subs	r4, #1
 8002b72:	d1f7      	bne.n	8002b64 <readTouch+0x10>
	touchx_atual = temp/samples;
 8002b74:	2514      	movs	r5, #20
 8002b76:	fb96 f2f5 	sdiv	r2, r6, r5
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <readTouch+0xc0>)
	sprintf(resultx, "%i", touchx_atual);
 8002b7c:	4926      	ldr	r1, [pc, #152]	; (8002c18 <readTouch+0xc4>)
 8002b7e:	a802      	add	r0, sp, #8
	touchx_atual = temp/samples;
 8002b80:	601a      	str	r2, [r3, #0]
	sprintf(resultx, "%i", touchx_atual);
 8002b82:	f000 fa37 	bl	8002ff4 <siprintf>
	fillRect(40, 148, 80, 18, GREEN);
 8002b86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b8a:	2250      	movs	r2, #80	; 0x50
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2194      	movs	r1, #148	; 0x94
 8002b90:	2312      	movs	r3, #18
 8002b92:	2028      	movs	r0, #40	; 0x28
 8002b94:	f7fe fe40 	bl	8001818 <fillRect>
	cursor_x = x;
 8002b98:	2328      	movs	r3, #40	; 0x28
 8002b9a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002c28 <readTouch+0xd4>
	cursor_y = y;
 8002b9e:	4f1f      	ldr	r7, [pc, #124]	; (8002c1c <readTouch+0xc8>)
	cursor_x = x;
 8002ba0:	f8a9 3000 	strh.w	r3, [r9]
	cursor_y = y;
 8002ba4:	2394      	movs	r3, #148	; 0x94
 8002ba6:	803b      	strh	r3, [r7, #0]
	textsize = (size > 0) ? size : 1;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	4e1d      	ldr	r6, [pc, #116]	; (8002c20 <readTouch+0xcc>)
	print(resultx);
 8002bac:	a802      	add	r0, sp, #8
	textsize = (size > 0) ? size : 1;
 8002bae:	7033      	strb	r3, [r6, #0]
	print(resultx);
 8002bb0:	f7ff fe60 	bl	8002874 <print>
			temp += val_adc2;
 8002bb4:	f8df a074 	ldr.w	sl, [pc, #116]	; 8002c2c <readTouch+0xd8>
		readTouchY();
 8002bb8:	f7ff ffa8 	bl	8002b0c <readTouchY>
		if (flag_adc == 0) {
 8002bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8002bc0:	b913      	cbnz	r3, 8002bc8 <readTouch+0x74>
			temp += val_adc2;
 8002bc2:	f8da 3000 	ldr.w	r3, [sl]
 8002bc6:	441c      	add	r4, r3
	for (int i = 0; i < samples; i++) {
 8002bc8:	3d01      	subs	r5, #1
 8002bca:	d1f5      	bne.n	8002bb8 <readTouch+0x64>
	touchy_atual = temp/samples;
 8002bcc:	2214      	movs	r2, #20
 8002bce:	fb94 f2f2 	sdiv	r2, r4, r2
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <readTouch+0xd0>)
	sprintf(resulty, "%i", touchy_atual);
 8002bd4:	4910      	ldr	r1, [pc, #64]	; (8002c18 <readTouch+0xc4>)
 8002bd6:	a80f      	add	r0, sp, #60	; 0x3c
	touchy_atual = temp/samples;
 8002bd8:	601a      	str	r2, [r3, #0]
	sprintf(resulty, "%i", touchy_atual);
 8002bda:	f000 fa0b 	bl	8002ff4 <siprintf>
	fillRect(154, 148, 80, 18, GREEN);
 8002bde:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002be2:	2250      	movs	r2, #80	; 0x50
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2194      	movs	r1, #148	; 0x94
 8002be8:	2312      	movs	r3, #18
 8002bea:	209a      	movs	r0, #154	; 0x9a
 8002bec:	f7fe fe14 	bl	8001818 <fillRect>
	cursor_x = x;
 8002bf0:	239a      	movs	r3, #154	; 0x9a
 8002bf2:	f8a9 3000 	strh.w	r3, [r9]
	cursor_y = y;
 8002bf6:	2394      	movs	r3, #148	; 0x94
 8002bf8:	803b      	strh	r3, [r7, #0]
	textsize = (size > 0) ? size : 1;
 8002bfa:	2302      	movs	r3, #2
	print(resulty);
 8002bfc:	a80f      	add	r0, sp, #60	; 0x3c
	textsize = (size > 0) ? size : 1;
 8002bfe:	7033      	strb	r3, [r6, #0]
	print(resulty);
 8002c00:	f7ff fe38 	bl	8002874 <print>
}
 8002c04:	b01c      	add	sp, #112	; 0x70
 8002c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000001c 	.word	0x2000001c
 8002c10:	200000c8 	.word	0x200000c8
 8002c14:	200000a8 	.word	0x200000a8
 8002c18:	08003eed 	.word	0x08003eed
 8002c1c:	200000c4 	.word	0x200000c4
 8002c20:	20000157 	.word	0x20000157
 8002c24:	200000ac 	.word	0x200000ac
 8002c28:	20000154 	.word	0x20000154
 8002c2c:	200000d0 	.word	0x200000d0

08002c30 <main>:
{
 8002c30:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c32:	4c55      	ldr	r4, [pc, #340]	; (8002d88 <main+0x158>)
{
 8002c34:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8002c36:	f7fd fab5 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8002c3a:	f7fe fb47 	bl	80012cc <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3e:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002c40:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c42:	f043 0310 	orr.w	r3, r3, #16
 8002c46:	61a3      	str	r3, [r4, #24]
 8002c48:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002c4a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c56:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002c58:	484c      	ldr	r0, [pc, #304]	; (8002d8c <main+0x15c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c5a:	f043 0320 	orr.w	r3, r3, #32
 8002c5e:	61a3      	str	r3, [r4, #24]
 8002c60:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	9303      	str	r3, [sp, #12]
 8002c6a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6c:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6e:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	61a3      	str	r3, [r4, #24]
 8002c76:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	9304      	str	r3, [sp, #16]
 8002c80:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c84:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c88:	f043 0308 	orr.w	r3, r3, #8
 8002c8c:	61a3      	str	r3, [r4, #24]
 8002c8e:	69a3      	ldr	r3, [r4, #24]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	9305      	str	r3, [sp, #20]
 8002c96:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002c98:	f7fe f80e 	bl	8000cb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2119      	movs	r1, #25
 8002ca0:	483b      	ldr	r0, [pc, #236]	; (8002d90 <main+0x160>)
 8002ca2:	f7fe f809 	bl	8000cb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5 
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8002cac:	4839      	ldr	r0, [pc, #228]	; (8002d94 <main+0x164>)
 8002cae:	f7fe f803 	bl	8000cb8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002cb2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb6:	a906      	add	r1, sp, #24
 8002cb8:	4834      	ldr	r0, [pc, #208]	; (8002d8c <main+0x15c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002cba:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cbc:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc0:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc2:	f7fd ff19 	bl	8000af8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8002cc6:	2319      	movs	r3, #25
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	a906      	add	r1, sp, #24
 8002cca:	4831      	ldr	r0, [pc, #196]	; (8002d90 <main+0x160>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8002ccc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cce:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd6:	f7fd ff0f 	bl	8000af8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002cda:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	a906      	add	r1, sp, #24
 8002cde:	482c      	ldr	r0, [pc, #176]	; (8002d90 <main+0x160>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002ce0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce2:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce6:	f7fd ff07 	bl	8000af8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5 
 8002cea:	f44f 637f 	mov.w	r3, #4080	; 0xff0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	a906      	add	r1, sp, #24
 8002cf0:	4828      	ldr	r0, [pc, #160]	; (8002d94 <main+0x164>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5 
 8002cf2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf4:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	f7fd fefc 	bl	8000af8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d00:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d02:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d04:	433b      	orrs	r3, r7
 8002d06:	6163      	str	r3, [r4, #20]
 8002d08:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d0a:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d0c:	403b      	ands	r3, r7
 8002d0e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d10:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d12:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d14:	f7fd fd82 	bl	800081c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d18:	200b      	movs	r0, #11
 8002d1a:	f7fd fdb3 	bl	8000884 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002d1e:	4c1e      	ldr	r4, [pc, #120]	; (8002d98 <main+0x168>)
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <main+0x16c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d22:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8002d24:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d2a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d2c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d30:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d32:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d34:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d36:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002d38:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d3a:	f7fd fcdb 	bl	80006f4 <HAL_ADC_Init>
 8002d3e:	b100      	cbz	r0, 8002d42 <main+0x112>
 8002d40:	e7fe      	b.n	8002d40 <main+0x110>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d42:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d44:	a906      	add	r1, sp, #24
 8002d46:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8002d48:	9706      	str	r7, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d4a:	9707      	str	r7, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d4c:	f7fd fb00 	bl	8000350 <HAL_ADC_ConfigChannel>
 8002d50:	b100      	cbz	r0, 8002d54 <main+0x124>
 8002d52:	e7fe      	b.n	8002d52 <main+0x122>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d54:	a906      	add	r1, sp, #24
 8002d56:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8002d58:	9606      	str	r6, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d5a:	9607      	str	r6, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d5c:	f7fd faf8 	bl	8000350 <HAL_ADC_ConfigChannel>
 8002d60:	b100      	cbz	r0, 8002d64 <main+0x134>
 8002d62:	e7fe      	b.n	8002d62 <main+0x132>
  begin(0x1289);
 8002d64:	f241 2089 	movw	r0, #4745	; 0x1289
 8002d68:	f7ff fea4 	bl	8002ab4 <begin>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_BUF,2);
 8002d6c:	4632      	mov	r2, r6
 8002d6e:	490c      	ldr	r1, [pc, #48]	; (8002da0 <main+0x170>)
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7fd fc0f 	bl	8000594 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7fd fba6 	bl	80004c8 <HAL_ADC_Start_IT>
	   testDrawScreen();
 8002d7c:	f7ff fd88 	bl	8002890 <testDrawScreen>
	   readTouch();
 8002d80:	f7ff fee8 	bl	8002b54 <readTouch>
 8002d84:	e7fa      	b.n	8002d7c <main+0x14c>
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40010800 	.word	0x40010800
 8002d94:	40010c00 	.word	0x40010c00
 8002d98:	200000d8 	.word	0x200000d8
 8002d9c:	40012400 	.word	0x40012400
 8002da0:	2000015c 	.word	0x2000015c

08002da4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002da4:	e7fe      	b.n	8002da4 <_Error_Handler>
	...

08002da8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_MspInit+0x98>)
{
 8002daa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002dac:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dae:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	619a      	str	r2, [r3, #24]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	f002 0201 	and.w	r2, r2, #1
 8002dbc:	9200      	str	r2, [sp, #0]
 8002dbe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002dc6:	61da      	str	r2, [r3, #28]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd2:	f7fd fd11 	bl	80007f8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f06f 000b 	mvn.w	r0, #11
 8002ddc:	4611      	mov	r1, r2
 8002dde:	f7fd fd1d 	bl	800081c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	f06f 000a 	mvn.w	r0, #10
 8002de8:	4611      	mov	r1, r2
 8002dea:	f7fd fd17 	bl	800081c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	f06f 0009 	mvn.w	r0, #9
 8002df4:	4611      	mov	r1, r2
 8002df6:	f7fd fd11 	bl	800081c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f06f 0004 	mvn.w	r0, #4
 8002e00:	4611      	mov	r1, r2
 8002e02:	f7fd fd0b 	bl	800081c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	f06f 0003 	mvn.w	r0, #3
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	f7fd fd05 	bl	800081c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	f06f 0001 	mvn.w	r0, #1
 8002e18:	4611      	mov	r1, r2
 8002e1a:	f7fd fcff 	bl	800081c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295
 8002e24:	4611      	mov	r1, r2
 8002e26:	f7fd fcf9 	bl	800081c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e2a:	4a06      	ldr	r2, [pc, #24]	; (8002e44 <HAL_MspInit+0x9c>)
 8002e2c:	6853      	ldr	r3, [r2, #4]
 8002e2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e36:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e38:	b003      	add	sp, #12
 8002e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40010000 	.word	0x40010000

08002e48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e48:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002e4a:	6802      	ldr	r2, [r0, #0]
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <HAL_ADC_MspInit+0x80>)
{
 8002e4e:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8002e50:	429a      	cmp	r2, r3
{
 8002e52:	4605      	mov	r5, r0
  if(hadc->Instance==ADC1)
 8002e54:	d135      	bne.n	8002ec2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e56:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002e5a:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	481b      	ldr	r0, [pc, #108]	; (8002ecc <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e62:	619a      	str	r2, [r3, #24]
 8002e64:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002e70:	2306      	movs	r3, #6
 8002e72:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e74:	2303      	movs	r3, #3
 8002e76:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f7fd fe3e 	bl	8000af8 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e7c:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8002e7e:	4c14      	ldr	r4, [pc, #80]	; (8002ed0 <HAL_ADC_MspInit+0x88>)
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_ADC_MspInit+0x8c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e82:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e88:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8002e8e:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e90:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e92:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e94:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e96:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e98:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e9a:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e9c:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e9e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ea0:	f7fd fd24 	bl	80008ec <HAL_DMA_Init>
 8002ea4:	b118      	cbz	r0, 8002eae <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002ea6:	2176      	movs	r1, #118	; 0x76
 8002ea8:	480b      	ldr	r0, [pc, #44]	; (8002ed8 <HAL_ADC_MspInit+0x90>)
 8002eaa:	f7ff ff7b 	bl	8002da4 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002eae:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002eb0:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002eb2:	2012      	movs	r0, #18
 8002eb4:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002eb6:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002eb8:	f7fd fcb0 	bl	800081c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ebc:	2012      	movs	r0, #18
 8002ebe:	f7fd fce1 	bl	8000884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ec2:	b007      	add	sp, #28
 8002ec4:	bd30      	pop	{r4, r5, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40012400 	.word	0x40012400
 8002ecc:	40010800 	.word	0x40010800
 8002ed0:	20000108 	.word	0x20000108
 8002ed4:	40020008 	.word	0x40020008
 8002ed8:	08003f0c 	.word	0x08003f0c

08002edc <NMI_Handler>:
 8002edc:	4770      	bx	lr

08002ede <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002ede:	e7fe      	b.n	8002ede <HardFault_Handler>

08002ee0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002ee0:	e7fe      	b.n	8002ee0 <MemManage_Handler>

08002ee2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002ee2:	e7fe      	b.n	8002ee2 <BusFault_Handler>

08002ee4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002ee4:	e7fe      	b.n	8002ee4 <UsageFault_Handler>

08002ee6 <SVC_Handler>:
 8002ee6:	4770      	bx	lr

08002ee8 <DebugMon_Handler>:
 8002ee8:	4770      	bx	lr

08002eea <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002eea:	4770      	bx	lr

08002eec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eee:	f7fd f96b 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002ef6:	f7fd bcf4 	b.w	80008e2 <HAL_SYSTICK_IRQHandler>
	...

08002efc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002efc:	4801      	ldr	r0, [pc, #4]	; (8002f04 <DMA1_Channel1_IRQHandler+0x8>)
 8002efe:	f7fd bd67 	b.w	80009d0 <HAL_DMA_IRQHandler>
 8002f02:	bf00      	nop
 8002f04:	20000108 	.word	0x20000108

08002f08 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f08:	4801      	ldr	r0, [pc, #4]	; (8002f10 <ADC1_2_IRQHandler+0x8>)
 8002f0a:	f7fd b99d 	b.w	8000248 <HAL_ADC_IRQHandler>
 8002f0e:	bf00      	nop
 8002f10:	200000d8 	.word	0x200000d8

08002f14 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <SystemInit+0x40>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <SystemInit+0x44>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f30:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f38:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f40:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f42:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f46:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <SystemInit+0x48>)
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	f8ff0000 	.word	0xf8ff0000
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f62:	e003      	b.n	8002f6c <LoopCopyDataInit>

08002f64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f6a:	3104      	adds	r1, #4

08002f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f6c:	480a      	ldr	r0, [pc, #40]	; (8002f98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f74:	d3f6      	bcc.n	8002f64 <CopyDataInit>
  ldr r2, =_sbss
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f78:	e002      	b.n	8002f80 <LoopFillZerobss>

08002f7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f7c:	f842 3b04 	str.w	r3, [r2], #4

08002f80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f84:	d3f9      	bcc.n	8002f7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f86:	f7ff ffc5 	bl	8002f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f8a:	f000 f80f 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f8e:	f7ff fe4f 	bl	8002c30 <main>
  bx lr
 8002f92:	4770      	bx	lr
  ldr r3, =_sidata
 8002f94:	08003f74 	.word	0x08003f74
  ldr r0, =_sdata
 8002f98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f9c:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8002fa0:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8002fa4:	20000170 	.word	0x20000170

08002fa8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fa8:	e7fe      	b.n	8002fa8 <CAN1_RX1_IRQHandler>
	...

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	2500      	movs	r5, #0
 8002fb0:	4e0c      	ldr	r6, [pc, #48]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb2:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb4:	1ba4      	subs	r4, r4, r6
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	42a5      	cmp	r5, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	f000 fc54 	bl	8003868 <_init>
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	4e0a      	ldr	r6, [pc, #40]	; (8002fec <__libc_init_array+0x40>)
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc6:	1ba4      	subs	r4, r4, r6
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	42a5      	cmp	r5, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd4:	4798      	blx	r3
 8002fd6:	3501      	adds	r5, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fde:	4798      	blx	r3
 8002fe0:	3501      	adds	r5, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	08003f6c 	.word	0x08003f6c
 8002fe8:	08003f6c 	.word	0x08003f6c
 8002fec:	08003f6c 	.word	0x08003f6c
 8002ff0:	08003f70 	.word	0x08003f70

08002ff4 <siprintf>:
 8002ff4:	b40e      	push	{r1, r2, r3}
 8002ff6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002ffa:	b500      	push	{lr}
 8002ffc:	b09c      	sub	sp, #112	; 0x70
 8002ffe:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003006:	9104      	str	r1, [sp, #16]
 8003008:	9107      	str	r1, [sp, #28]
 800300a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800300e:	ab1d      	add	r3, sp, #116	; 0x74
 8003010:	9002      	str	r0, [sp, #8]
 8003012:	9006      	str	r0, [sp, #24]
 8003014:	4808      	ldr	r0, [pc, #32]	; (8003038 <siprintf+0x44>)
 8003016:	f853 2b04 	ldr.w	r2, [r3], #4
 800301a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800301e:	6800      	ldr	r0, [r0, #0]
 8003020:	a902      	add	r1, sp, #8
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	f000 f866 	bl	80030f4 <_svfiprintf_r>
 8003028:	2200      	movs	r2, #0
 800302a:	9b02      	ldr	r3, [sp, #8]
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	b01c      	add	sp, #112	; 0x70
 8003030:	f85d eb04 	ldr.w	lr, [sp], #4
 8003034:	b003      	add	sp, #12
 8003036:	4770      	bx	lr
 8003038:	20000024 	.word	0x20000024

0800303c <__ssputs_r>:
 800303c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003040:	688e      	ldr	r6, [r1, #8]
 8003042:	4682      	mov	sl, r0
 8003044:	429e      	cmp	r6, r3
 8003046:	460c      	mov	r4, r1
 8003048:	4691      	mov	r9, r2
 800304a:	4698      	mov	r8, r3
 800304c:	d835      	bhi.n	80030ba <__ssputs_r+0x7e>
 800304e:	898a      	ldrh	r2, [r1, #12]
 8003050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003054:	d031      	beq.n	80030ba <__ssputs_r+0x7e>
 8003056:	2302      	movs	r3, #2
 8003058:	6825      	ldr	r5, [r4, #0]
 800305a:	6909      	ldr	r1, [r1, #16]
 800305c:	1a6f      	subs	r7, r5, r1
 800305e:	6965      	ldr	r5, [r4, #20]
 8003060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003064:	fb95 f5f3 	sdiv	r5, r5, r3
 8003068:	f108 0301 	add.w	r3, r8, #1
 800306c:	443b      	add	r3, r7
 800306e:	429d      	cmp	r5, r3
 8003070:	bf38      	it	cc
 8003072:	461d      	movcc	r5, r3
 8003074:	0553      	lsls	r3, r2, #21
 8003076:	d531      	bpl.n	80030dc <__ssputs_r+0xa0>
 8003078:	4629      	mov	r1, r5
 800307a:	f000 fb47 	bl	800370c <_malloc_r>
 800307e:	4606      	mov	r6, r0
 8003080:	b950      	cbnz	r0, 8003098 <__ssputs_r+0x5c>
 8003082:	230c      	movs	r3, #12
 8003084:	f8ca 3000 	str.w	r3, [sl]
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	f04f 30ff 	mov.w	r0, #4294967295
 800308e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003092:	81a3      	strh	r3, [r4, #12]
 8003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003098:	463a      	mov	r2, r7
 800309a:	6921      	ldr	r1, [r4, #16]
 800309c:	f000 fac4 	bl	8003628 <memcpy>
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	6126      	str	r6, [r4, #16]
 80030ae:	443e      	add	r6, r7
 80030b0:	6026      	str	r6, [r4, #0]
 80030b2:	4646      	mov	r6, r8
 80030b4:	6165      	str	r5, [r4, #20]
 80030b6:	1bed      	subs	r5, r5, r7
 80030b8:	60a5      	str	r5, [r4, #8]
 80030ba:	4546      	cmp	r6, r8
 80030bc:	bf28      	it	cs
 80030be:	4646      	movcs	r6, r8
 80030c0:	4649      	mov	r1, r9
 80030c2:	4632      	mov	r2, r6
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	f000 faba 	bl	800363e <memmove>
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	2000      	movs	r0, #0
 80030ce:	1b9b      	subs	r3, r3, r6
 80030d0:	60a3      	str	r3, [r4, #8]
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	441e      	add	r6, r3
 80030d6:	6026      	str	r6, [r4, #0]
 80030d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030dc:	462a      	mov	r2, r5
 80030de:	f000 fb73 	bl	80037c8 <_realloc_r>
 80030e2:	4606      	mov	r6, r0
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d1e1      	bne.n	80030ac <__ssputs_r+0x70>
 80030e8:	6921      	ldr	r1, [r4, #16]
 80030ea:	4650      	mov	r0, sl
 80030ec:	f000 fac2 	bl	8003674 <_free_r>
 80030f0:	e7c7      	b.n	8003082 <__ssputs_r+0x46>
	...

080030f4 <_svfiprintf_r>:
 80030f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f8:	b09d      	sub	sp, #116	; 0x74
 80030fa:	9303      	str	r3, [sp, #12]
 80030fc:	898b      	ldrh	r3, [r1, #12]
 80030fe:	4680      	mov	r8, r0
 8003100:	061c      	lsls	r4, r3, #24
 8003102:	460d      	mov	r5, r1
 8003104:	4616      	mov	r6, r2
 8003106:	d50f      	bpl.n	8003128 <_svfiprintf_r+0x34>
 8003108:	690b      	ldr	r3, [r1, #16]
 800310a:	b96b      	cbnz	r3, 8003128 <_svfiprintf_r+0x34>
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	f000 fafd 	bl	800370c <_malloc_r>
 8003112:	6028      	str	r0, [r5, #0]
 8003114:	6128      	str	r0, [r5, #16]
 8003116:	b928      	cbnz	r0, 8003124 <_svfiprintf_r+0x30>
 8003118:	230c      	movs	r3, #12
 800311a:	f8c8 3000 	str.w	r3, [r8]
 800311e:	f04f 30ff 	mov.w	r0, #4294967295
 8003122:	e0c4      	b.n	80032ae <_svfiprintf_r+0x1ba>
 8003124:	2340      	movs	r3, #64	; 0x40
 8003126:	616b      	str	r3, [r5, #20]
 8003128:	2300      	movs	r3, #0
 800312a:	9309      	str	r3, [sp, #36]	; 0x24
 800312c:	2320      	movs	r3, #32
 800312e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003132:	2330      	movs	r3, #48	; 0x30
 8003134:	f04f 0b01 	mov.w	fp, #1
 8003138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800313c:	4637      	mov	r7, r6
 800313e:	463c      	mov	r4, r7
 8003140:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d13c      	bne.n	80031c2 <_svfiprintf_r+0xce>
 8003148:	ebb7 0a06 	subs.w	sl, r7, r6
 800314c:	d00b      	beq.n	8003166 <_svfiprintf_r+0x72>
 800314e:	4653      	mov	r3, sl
 8003150:	4632      	mov	r2, r6
 8003152:	4629      	mov	r1, r5
 8003154:	4640      	mov	r0, r8
 8003156:	f7ff ff71 	bl	800303c <__ssputs_r>
 800315a:	3001      	adds	r0, #1
 800315c:	f000 80a2 	beq.w	80032a4 <_svfiprintf_r+0x1b0>
 8003160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003162:	4453      	add	r3, sl
 8003164:	9309      	str	r3, [sp, #36]	; 0x24
 8003166:	783b      	ldrb	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 809b 	beq.w	80032a4 <_svfiprintf_r+0x1b0>
 800316e:	2300      	movs	r3, #0
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	9304      	str	r3, [sp, #16]
 8003176:	9307      	str	r3, [sp, #28]
 8003178:	9205      	str	r2, [sp, #20]
 800317a:	9306      	str	r3, [sp, #24]
 800317c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003180:	931a      	str	r3, [sp, #104]	; 0x68
 8003182:	2205      	movs	r2, #5
 8003184:	7821      	ldrb	r1, [r4, #0]
 8003186:	4850      	ldr	r0, [pc, #320]	; (80032c8 <_svfiprintf_r+0x1d4>)
 8003188:	f000 fa40 	bl	800360c <memchr>
 800318c:	1c67      	adds	r7, r4, #1
 800318e:	9b04      	ldr	r3, [sp, #16]
 8003190:	b9d8      	cbnz	r0, 80031ca <_svfiprintf_r+0xd6>
 8003192:	06d9      	lsls	r1, r3, #27
 8003194:	bf44      	itt	mi
 8003196:	2220      	movmi	r2, #32
 8003198:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800319c:	071a      	lsls	r2, r3, #28
 800319e:	bf44      	itt	mi
 80031a0:	222b      	movmi	r2, #43	; 0x2b
 80031a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031a6:	7822      	ldrb	r2, [r4, #0]
 80031a8:	2a2a      	cmp	r2, #42	; 0x2a
 80031aa:	d016      	beq.n	80031da <_svfiprintf_r+0xe6>
 80031ac:	2100      	movs	r1, #0
 80031ae:	200a      	movs	r0, #10
 80031b0:	9a07      	ldr	r2, [sp, #28]
 80031b2:	4627      	mov	r7, r4
 80031b4:	783b      	ldrb	r3, [r7, #0]
 80031b6:	3401      	adds	r4, #1
 80031b8:	3b30      	subs	r3, #48	; 0x30
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d950      	bls.n	8003260 <_svfiprintf_r+0x16c>
 80031be:	b1c9      	cbz	r1, 80031f4 <_svfiprintf_r+0x100>
 80031c0:	e011      	b.n	80031e6 <_svfiprintf_r+0xf2>
 80031c2:	2b25      	cmp	r3, #37	; 0x25
 80031c4:	d0c0      	beq.n	8003148 <_svfiprintf_r+0x54>
 80031c6:	4627      	mov	r7, r4
 80031c8:	e7b9      	b.n	800313e <_svfiprintf_r+0x4a>
 80031ca:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <_svfiprintf_r+0x1d4>)
 80031cc:	463c      	mov	r4, r7
 80031ce:	1a80      	subs	r0, r0, r2
 80031d0:	fa0b f000 	lsl.w	r0, fp, r0
 80031d4:	4318      	orrs	r0, r3
 80031d6:	9004      	str	r0, [sp, #16]
 80031d8:	e7d3      	b.n	8003182 <_svfiprintf_r+0x8e>
 80031da:	9a03      	ldr	r2, [sp, #12]
 80031dc:	1d11      	adds	r1, r2, #4
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	9103      	str	r1, [sp, #12]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	db01      	blt.n	80031ea <_svfiprintf_r+0xf6>
 80031e6:	9207      	str	r2, [sp, #28]
 80031e8:	e004      	b.n	80031f4 <_svfiprintf_r+0x100>
 80031ea:	4252      	negs	r2, r2
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	9207      	str	r2, [sp, #28]
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	783b      	ldrb	r3, [r7, #0]
 80031f6:	2b2e      	cmp	r3, #46	; 0x2e
 80031f8:	d10d      	bne.n	8003216 <_svfiprintf_r+0x122>
 80031fa:	787b      	ldrb	r3, [r7, #1]
 80031fc:	1c79      	adds	r1, r7, #1
 80031fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003200:	d132      	bne.n	8003268 <_svfiprintf_r+0x174>
 8003202:	9b03      	ldr	r3, [sp, #12]
 8003204:	3702      	adds	r7, #2
 8003206:	1d1a      	adds	r2, r3, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	9203      	str	r2, [sp, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	bfb8      	it	lt
 8003210:	f04f 33ff 	movlt.w	r3, #4294967295
 8003214:	9305      	str	r3, [sp, #20]
 8003216:	4c2d      	ldr	r4, [pc, #180]	; (80032cc <_svfiprintf_r+0x1d8>)
 8003218:	2203      	movs	r2, #3
 800321a:	7839      	ldrb	r1, [r7, #0]
 800321c:	4620      	mov	r0, r4
 800321e:	f000 f9f5 	bl	800360c <memchr>
 8003222:	b138      	cbz	r0, 8003234 <_svfiprintf_r+0x140>
 8003224:	2340      	movs	r3, #64	; 0x40
 8003226:	1b00      	subs	r0, r0, r4
 8003228:	fa03 f000 	lsl.w	r0, r3, r0
 800322c:	9b04      	ldr	r3, [sp, #16]
 800322e:	3701      	adds	r7, #1
 8003230:	4303      	orrs	r3, r0
 8003232:	9304      	str	r3, [sp, #16]
 8003234:	7839      	ldrb	r1, [r7, #0]
 8003236:	2206      	movs	r2, #6
 8003238:	4825      	ldr	r0, [pc, #148]	; (80032d0 <_svfiprintf_r+0x1dc>)
 800323a:	1c7e      	adds	r6, r7, #1
 800323c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003240:	f000 f9e4 	bl	800360c <memchr>
 8003244:	2800      	cmp	r0, #0
 8003246:	d035      	beq.n	80032b4 <_svfiprintf_r+0x1c0>
 8003248:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <_svfiprintf_r+0x1e0>)
 800324a:	b9fb      	cbnz	r3, 800328c <_svfiprintf_r+0x198>
 800324c:	9b03      	ldr	r3, [sp, #12]
 800324e:	3307      	adds	r3, #7
 8003250:	f023 0307 	bic.w	r3, r3, #7
 8003254:	3308      	adds	r3, #8
 8003256:	9303      	str	r3, [sp, #12]
 8003258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800325a:	444b      	add	r3, r9
 800325c:	9309      	str	r3, [sp, #36]	; 0x24
 800325e:	e76d      	b.n	800313c <_svfiprintf_r+0x48>
 8003260:	fb00 3202 	mla	r2, r0, r2, r3
 8003264:	2101      	movs	r1, #1
 8003266:	e7a4      	b.n	80031b2 <_svfiprintf_r+0xbe>
 8003268:	2300      	movs	r3, #0
 800326a:	240a      	movs	r4, #10
 800326c:	4618      	mov	r0, r3
 800326e:	9305      	str	r3, [sp, #20]
 8003270:	460f      	mov	r7, r1
 8003272:	783a      	ldrb	r2, [r7, #0]
 8003274:	3101      	adds	r1, #1
 8003276:	3a30      	subs	r2, #48	; 0x30
 8003278:	2a09      	cmp	r2, #9
 800327a:	d903      	bls.n	8003284 <_svfiprintf_r+0x190>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ca      	beq.n	8003216 <_svfiprintf_r+0x122>
 8003280:	9005      	str	r0, [sp, #20]
 8003282:	e7c8      	b.n	8003216 <_svfiprintf_r+0x122>
 8003284:	fb04 2000 	mla	r0, r4, r0, r2
 8003288:	2301      	movs	r3, #1
 800328a:	e7f1      	b.n	8003270 <_svfiprintf_r+0x17c>
 800328c:	ab03      	add	r3, sp, #12
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	462a      	mov	r2, r5
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <_svfiprintf_r+0x1e4>)
 8003294:	a904      	add	r1, sp, #16
 8003296:	4640      	mov	r0, r8
 8003298:	f3af 8000 	nop.w
 800329c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032a0:	4681      	mov	r9, r0
 80032a2:	d1d9      	bne.n	8003258 <_svfiprintf_r+0x164>
 80032a4:	89ab      	ldrh	r3, [r5, #12]
 80032a6:	065b      	lsls	r3, r3, #25
 80032a8:	f53f af39 	bmi.w	800311e <_svfiprintf_r+0x2a>
 80032ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032ae:	b01d      	add	sp, #116	; 0x74
 80032b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b4:	ab03      	add	r3, sp, #12
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	462a      	mov	r2, r5
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <_svfiprintf_r+0x1e4>)
 80032bc:	a904      	add	r1, sp, #16
 80032be:	4640      	mov	r0, r8
 80032c0:	f000 f884 	bl	80033cc <_printf_i>
 80032c4:	e7ea      	b.n	800329c <_svfiprintf_r+0x1a8>
 80032c6:	bf00      	nop
 80032c8:	08003f37 	.word	0x08003f37
 80032cc:	08003f3d 	.word	0x08003f3d
 80032d0:	08003f41 	.word	0x08003f41
 80032d4:	00000000 	.word	0x00000000
 80032d8:	0800303d 	.word	0x0800303d

080032dc <_printf_common>:
 80032dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e0:	4691      	mov	r9, r2
 80032e2:	461f      	mov	r7, r3
 80032e4:	688a      	ldr	r2, [r1, #8]
 80032e6:	690b      	ldr	r3, [r1, #16]
 80032e8:	4606      	mov	r6, r0
 80032ea:	4293      	cmp	r3, r2
 80032ec:	bfb8      	it	lt
 80032ee:	4613      	movlt	r3, r2
 80032f0:	f8c9 3000 	str.w	r3, [r9]
 80032f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032f8:	460c      	mov	r4, r1
 80032fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032fe:	b112      	cbz	r2, 8003306 <_printf_common+0x2a>
 8003300:	3301      	adds	r3, #1
 8003302:	f8c9 3000 	str.w	r3, [r9]
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	0699      	lsls	r1, r3, #26
 800330a:	bf42      	ittt	mi
 800330c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003310:	3302      	addmi	r3, #2
 8003312:	f8c9 3000 	strmi.w	r3, [r9]
 8003316:	6825      	ldr	r5, [r4, #0]
 8003318:	f015 0506 	ands.w	r5, r5, #6
 800331c:	d107      	bne.n	800332e <_printf_common+0x52>
 800331e:	f104 0a19 	add.w	sl, r4, #25
 8003322:	68e3      	ldr	r3, [r4, #12]
 8003324:	f8d9 2000 	ldr.w	r2, [r9]
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	429d      	cmp	r5, r3
 800332c:	db2a      	blt.n	8003384 <_printf_common+0xa8>
 800332e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	3300      	adds	r3, #0
 8003336:	bf18      	it	ne
 8003338:	2301      	movne	r3, #1
 800333a:	0692      	lsls	r2, r2, #26
 800333c:	d42f      	bmi.n	800339e <_printf_common+0xc2>
 800333e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003342:	4639      	mov	r1, r7
 8003344:	4630      	mov	r0, r6
 8003346:	47c0      	blx	r8
 8003348:	3001      	adds	r0, #1
 800334a:	d022      	beq.n	8003392 <_printf_common+0xb6>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	68e5      	ldr	r5, [r4, #12]
 8003350:	f003 0306 	and.w	r3, r3, #6
 8003354:	2b04      	cmp	r3, #4
 8003356:	bf18      	it	ne
 8003358:	2500      	movne	r5, #0
 800335a:	f8d9 2000 	ldr.w	r2, [r9]
 800335e:	f04f 0900 	mov.w	r9, #0
 8003362:	bf08      	it	eq
 8003364:	1aad      	subeq	r5, r5, r2
 8003366:	68a3      	ldr	r3, [r4, #8]
 8003368:	6922      	ldr	r2, [r4, #16]
 800336a:	bf08      	it	eq
 800336c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003370:	4293      	cmp	r3, r2
 8003372:	bfc4      	itt	gt
 8003374:	1a9b      	subgt	r3, r3, r2
 8003376:	18ed      	addgt	r5, r5, r3
 8003378:	341a      	adds	r4, #26
 800337a:	454d      	cmp	r5, r9
 800337c:	d11b      	bne.n	80033b6 <_printf_common+0xda>
 800337e:	2000      	movs	r0, #0
 8003380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003384:	2301      	movs	r3, #1
 8003386:	4652      	mov	r2, sl
 8003388:	4639      	mov	r1, r7
 800338a:	4630      	mov	r0, r6
 800338c:	47c0      	blx	r8
 800338e:	3001      	adds	r0, #1
 8003390:	d103      	bne.n	800339a <_printf_common+0xbe>
 8003392:	f04f 30ff 	mov.w	r0, #4294967295
 8003396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339a:	3501      	adds	r5, #1
 800339c:	e7c1      	b.n	8003322 <_printf_common+0x46>
 800339e:	2030      	movs	r0, #48	; 0x30
 80033a0:	18e1      	adds	r1, r4, r3
 80033a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ac:	4422      	add	r2, r4
 80033ae:	3302      	adds	r3, #2
 80033b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033b4:	e7c3      	b.n	800333e <_printf_common+0x62>
 80033b6:	2301      	movs	r3, #1
 80033b8:	4622      	mov	r2, r4
 80033ba:	4639      	mov	r1, r7
 80033bc:	4630      	mov	r0, r6
 80033be:	47c0      	blx	r8
 80033c0:	3001      	adds	r0, #1
 80033c2:	d0e6      	beq.n	8003392 <_printf_common+0xb6>
 80033c4:	f109 0901 	add.w	r9, r9, #1
 80033c8:	e7d7      	b.n	800337a <_printf_common+0x9e>
	...

080033cc <_printf_i>:
 80033cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033d0:	4617      	mov	r7, r2
 80033d2:	7e0a      	ldrb	r2, [r1, #24]
 80033d4:	b085      	sub	sp, #20
 80033d6:	2a6e      	cmp	r2, #110	; 0x6e
 80033d8:	4698      	mov	r8, r3
 80033da:	4606      	mov	r6, r0
 80033dc:	460c      	mov	r4, r1
 80033de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033e0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80033e4:	f000 80bc 	beq.w	8003560 <_printf_i+0x194>
 80033e8:	d81a      	bhi.n	8003420 <_printf_i+0x54>
 80033ea:	2a63      	cmp	r2, #99	; 0x63
 80033ec:	d02e      	beq.n	800344c <_printf_i+0x80>
 80033ee:	d80a      	bhi.n	8003406 <_printf_i+0x3a>
 80033f0:	2a00      	cmp	r2, #0
 80033f2:	f000 80c8 	beq.w	8003586 <_printf_i+0x1ba>
 80033f6:	2a58      	cmp	r2, #88	; 0x58
 80033f8:	f000 808a 	beq.w	8003510 <_printf_i+0x144>
 80033fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003400:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003404:	e02a      	b.n	800345c <_printf_i+0x90>
 8003406:	2a64      	cmp	r2, #100	; 0x64
 8003408:	d001      	beq.n	800340e <_printf_i+0x42>
 800340a:	2a69      	cmp	r2, #105	; 0x69
 800340c:	d1f6      	bne.n	80033fc <_printf_i+0x30>
 800340e:	6821      	ldr	r1, [r4, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003416:	d023      	beq.n	8003460 <_printf_i+0x94>
 8003418:	1d11      	adds	r1, r2, #4
 800341a:	6019      	str	r1, [r3, #0]
 800341c:	6813      	ldr	r3, [r2, #0]
 800341e:	e027      	b.n	8003470 <_printf_i+0xa4>
 8003420:	2a73      	cmp	r2, #115	; 0x73
 8003422:	f000 80b4 	beq.w	800358e <_printf_i+0x1c2>
 8003426:	d808      	bhi.n	800343a <_printf_i+0x6e>
 8003428:	2a6f      	cmp	r2, #111	; 0x6f
 800342a:	d02a      	beq.n	8003482 <_printf_i+0xb6>
 800342c:	2a70      	cmp	r2, #112	; 0x70
 800342e:	d1e5      	bne.n	80033fc <_printf_i+0x30>
 8003430:	680a      	ldr	r2, [r1, #0]
 8003432:	f042 0220 	orr.w	r2, r2, #32
 8003436:	600a      	str	r2, [r1, #0]
 8003438:	e003      	b.n	8003442 <_printf_i+0x76>
 800343a:	2a75      	cmp	r2, #117	; 0x75
 800343c:	d021      	beq.n	8003482 <_printf_i+0xb6>
 800343e:	2a78      	cmp	r2, #120	; 0x78
 8003440:	d1dc      	bne.n	80033fc <_printf_i+0x30>
 8003442:	2278      	movs	r2, #120	; 0x78
 8003444:	496f      	ldr	r1, [pc, #444]	; (8003604 <_printf_i+0x238>)
 8003446:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800344a:	e064      	b.n	8003516 <_printf_i+0x14a>
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003452:	1d11      	adds	r1, r2, #4
 8003454:	6019      	str	r1, [r3, #0]
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800345c:	2301      	movs	r3, #1
 800345e:	e0a3      	b.n	80035a8 <_printf_i+0x1dc>
 8003460:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003464:	f102 0104 	add.w	r1, r2, #4
 8003468:	6019      	str	r1, [r3, #0]
 800346a:	d0d7      	beq.n	800341c <_printf_i+0x50>
 800346c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da03      	bge.n	800347c <_printf_i+0xb0>
 8003474:	222d      	movs	r2, #45	; 0x2d
 8003476:	425b      	negs	r3, r3
 8003478:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800347c:	4962      	ldr	r1, [pc, #392]	; (8003608 <_printf_i+0x23c>)
 800347e:	220a      	movs	r2, #10
 8003480:	e017      	b.n	80034b2 <_printf_i+0xe6>
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	f010 0f80 	tst.w	r0, #128	; 0x80
 800348a:	d003      	beq.n	8003494 <_printf_i+0xc8>
 800348c:	1d08      	adds	r0, r1, #4
 800348e:	6018      	str	r0, [r3, #0]
 8003490:	680b      	ldr	r3, [r1, #0]
 8003492:	e006      	b.n	80034a2 <_printf_i+0xd6>
 8003494:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003498:	f101 0004 	add.w	r0, r1, #4
 800349c:	6018      	str	r0, [r3, #0]
 800349e:	d0f7      	beq.n	8003490 <_printf_i+0xc4>
 80034a0:	880b      	ldrh	r3, [r1, #0]
 80034a2:	2a6f      	cmp	r2, #111	; 0x6f
 80034a4:	bf14      	ite	ne
 80034a6:	220a      	movne	r2, #10
 80034a8:	2208      	moveq	r2, #8
 80034aa:	4957      	ldr	r1, [pc, #348]	; (8003608 <_printf_i+0x23c>)
 80034ac:	2000      	movs	r0, #0
 80034ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80034b2:	6865      	ldr	r5, [r4, #4]
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	60a5      	str	r5, [r4, #8]
 80034b8:	f2c0 809c 	blt.w	80035f4 <_printf_i+0x228>
 80034bc:	6820      	ldr	r0, [r4, #0]
 80034be:	f020 0004 	bic.w	r0, r0, #4
 80034c2:	6020      	str	r0, [r4, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d13f      	bne.n	8003548 <_printf_i+0x17c>
 80034c8:	2d00      	cmp	r5, #0
 80034ca:	f040 8095 	bne.w	80035f8 <_printf_i+0x22c>
 80034ce:	4675      	mov	r5, lr
 80034d0:	2a08      	cmp	r2, #8
 80034d2:	d10b      	bne.n	80034ec <_printf_i+0x120>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	07da      	lsls	r2, r3, #31
 80034d8:	d508      	bpl.n	80034ec <_printf_i+0x120>
 80034da:	6923      	ldr	r3, [r4, #16]
 80034dc:	6862      	ldr	r2, [r4, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	bfde      	ittt	le
 80034e2:	2330      	movle	r3, #48	; 0x30
 80034e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034ec:	ebae 0305 	sub.w	r3, lr, r5
 80034f0:	6123      	str	r3, [r4, #16]
 80034f2:	f8cd 8000 	str.w	r8, [sp]
 80034f6:	463b      	mov	r3, r7
 80034f8:	aa03      	add	r2, sp, #12
 80034fa:	4621      	mov	r1, r4
 80034fc:	4630      	mov	r0, r6
 80034fe:	f7ff feed 	bl	80032dc <_printf_common>
 8003502:	3001      	adds	r0, #1
 8003504:	d155      	bne.n	80035b2 <_printf_i+0x1e6>
 8003506:	f04f 30ff 	mov.w	r0, #4294967295
 800350a:	b005      	add	sp, #20
 800350c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003510:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003514:	493c      	ldr	r1, [pc, #240]	; (8003608 <_printf_i+0x23c>)
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800351e:	f100 0504 	add.w	r5, r0, #4
 8003522:	601d      	str	r5, [r3, #0]
 8003524:	d001      	beq.n	800352a <_printf_i+0x15e>
 8003526:	6803      	ldr	r3, [r0, #0]
 8003528:	e002      	b.n	8003530 <_printf_i+0x164>
 800352a:	0655      	lsls	r5, r2, #25
 800352c:	d5fb      	bpl.n	8003526 <_printf_i+0x15a>
 800352e:	8803      	ldrh	r3, [r0, #0]
 8003530:	07d0      	lsls	r0, r2, #31
 8003532:	bf44      	itt	mi
 8003534:	f042 0220 	orrmi.w	r2, r2, #32
 8003538:	6022      	strmi	r2, [r4, #0]
 800353a:	b91b      	cbnz	r3, 8003544 <_printf_i+0x178>
 800353c:	6822      	ldr	r2, [r4, #0]
 800353e:	f022 0220 	bic.w	r2, r2, #32
 8003542:	6022      	str	r2, [r4, #0]
 8003544:	2210      	movs	r2, #16
 8003546:	e7b1      	b.n	80034ac <_printf_i+0xe0>
 8003548:	4675      	mov	r5, lr
 800354a:	fbb3 f0f2 	udiv	r0, r3, r2
 800354e:	fb02 3310 	mls	r3, r2, r0, r3
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003558:	4603      	mov	r3, r0
 800355a:	2800      	cmp	r0, #0
 800355c:	d1f5      	bne.n	800354a <_printf_i+0x17e>
 800355e:	e7b7      	b.n	80034d0 <_printf_i+0x104>
 8003560:	6808      	ldr	r0, [r1, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003568:	6949      	ldr	r1, [r1, #20]
 800356a:	d004      	beq.n	8003576 <_printf_i+0x1aa>
 800356c:	1d10      	adds	r0, r2, #4
 800356e:	6018      	str	r0, [r3, #0]
 8003570:	6813      	ldr	r3, [r2, #0]
 8003572:	6019      	str	r1, [r3, #0]
 8003574:	e007      	b.n	8003586 <_printf_i+0x1ba>
 8003576:	f010 0f40 	tst.w	r0, #64	; 0x40
 800357a:	f102 0004 	add.w	r0, r2, #4
 800357e:	6018      	str	r0, [r3, #0]
 8003580:	6813      	ldr	r3, [r2, #0]
 8003582:	d0f6      	beq.n	8003572 <_printf_i+0x1a6>
 8003584:	8019      	strh	r1, [r3, #0]
 8003586:	2300      	movs	r3, #0
 8003588:	4675      	mov	r5, lr
 800358a:	6123      	str	r3, [r4, #16]
 800358c:	e7b1      	b.n	80034f2 <_printf_i+0x126>
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	1d11      	adds	r1, r2, #4
 8003592:	6019      	str	r1, [r3, #0]
 8003594:	6815      	ldr	r5, [r2, #0]
 8003596:	2100      	movs	r1, #0
 8003598:	6862      	ldr	r2, [r4, #4]
 800359a:	4628      	mov	r0, r5
 800359c:	f000 f836 	bl	800360c <memchr>
 80035a0:	b108      	cbz	r0, 80035a6 <_printf_i+0x1da>
 80035a2:	1b40      	subs	r0, r0, r5
 80035a4:	6060      	str	r0, [r4, #4]
 80035a6:	6863      	ldr	r3, [r4, #4]
 80035a8:	6123      	str	r3, [r4, #16]
 80035aa:	2300      	movs	r3, #0
 80035ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035b0:	e79f      	b.n	80034f2 <_printf_i+0x126>
 80035b2:	6923      	ldr	r3, [r4, #16]
 80035b4:	462a      	mov	r2, r5
 80035b6:	4639      	mov	r1, r7
 80035b8:	4630      	mov	r0, r6
 80035ba:	47c0      	blx	r8
 80035bc:	3001      	adds	r0, #1
 80035be:	d0a2      	beq.n	8003506 <_printf_i+0x13a>
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	079b      	lsls	r3, r3, #30
 80035c4:	d507      	bpl.n	80035d6 <_printf_i+0x20a>
 80035c6:	2500      	movs	r5, #0
 80035c8:	f104 0919 	add.w	r9, r4, #25
 80035cc:	68e3      	ldr	r3, [r4, #12]
 80035ce:	9a03      	ldr	r2, [sp, #12]
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	429d      	cmp	r5, r3
 80035d4:	db05      	blt.n	80035e2 <_printf_i+0x216>
 80035d6:	68e0      	ldr	r0, [r4, #12]
 80035d8:	9b03      	ldr	r3, [sp, #12]
 80035da:	4298      	cmp	r0, r3
 80035dc:	bfb8      	it	lt
 80035de:	4618      	movlt	r0, r3
 80035e0:	e793      	b.n	800350a <_printf_i+0x13e>
 80035e2:	2301      	movs	r3, #1
 80035e4:	464a      	mov	r2, r9
 80035e6:	4639      	mov	r1, r7
 80035e8:	4630      	mov	r0, r6
 80035ea:	47c0      	blx	r8
 80035ec:	3001      	adds	r0, #1
 80035ee:	d08a      	beq.n	8003506 <_printf_i+0x13a>
 80035f0:	3501      	adds	r5, #1
 80035f2:	e7eb      	b.n	80035cc <_printf_i+0x200>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1a7      	bne.n	8003548 <_printf_i+0x17c>
 80035f8:	780b      	ldrb	r3, [r1, #0]
 80035fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003602:	e765      	b.n	80034d0 <_printf_i+0x104>
 8003604:	08003f59 	.word	0x08003f59
 8003608:	08003f48 	.word	0x08003f48

0800360c <memchr>:
 800360c:	b510      	push	{r4, lr}
 800360e:	b2c9      	uxtb	r1, r1
 8003610:	4402      	add	r2, r0
 8003612:	4290      	cmp	r0, r2
 8003614:	4603      	mov	r3, r0
 8003616:	d101      	bne.n	800361c <memchr+0x10>
 8003618:	2000      	movs	r0, #0
 800361a:	bd10      	pop	{r4, pc}
 800361c:	781c      	ldrb	r4, [r3, #0]
 800361e:	3001      	adds	r0, #1
 8003620:	428c      	cmp	r4, r1
 8003622:	d1f6      	bne.n	8003612 <memchr+0x6>
 8003624:	4618      	mov	r0, r3
 8003626:	bd10      	pop	{r4, pc}

08003628 <memcpy>:
 8003628:	b510      	push	{r4, lr}
 800362a:	1e43      	subs	r3, r0, #1
 800362c:	440a      	add	r2, r1
 800362e:	4291      	cmp	r1, r2
 8003630:	d100      	bne.n	8003634 <memcpy+0xc>
 8003632:	bd10      	pop	{r4, pc}
 8003634:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003638:	f803 4f01 	strb.w	r4, [r3, #1]!
 800363c:	e7f7      	b.n	800362e <memcpy+0x6>

0800363e <memmove>:
 800363e:	4288      	cmp	r0, r1
 8003640:	b510      	push	{r4, lr}
 8003642:	eb01 0302 	add.w	r3, r1, r2
 8003646:	d803      	bhi.n	8003650 <memmove+0x12>
 8003648:	1e42      	subs	r2, r0, #1
 800364a:	4299      	cmp	r1, r3
 800364c:	d10c      	bne.n	8003668 <memmove+0x2a>
 800364e:	bd10      	pop	{r4, pc}
 8003650:	4298      	cmp	r0, r3
 8003652:	d2f9      	bcs.n	8003648 <memmove+0xa>
 8003654:	1881      	adds	r1, r0, r2
 8003656:	1ad2      	subs	r2, r2, r3
 8003658:	42d3      	cmn	r3, r2
 800365a:	d100      	bne.n	800365e <memmove+0x20>
 800365c:	bd10      	pop	{r4, pc}
 800365e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003662:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003666:	e7f7      	b.n	8003658 <memmove+0x1a>
 8003668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800366c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003670:	e7eb      	b.n	800364a <memmove+0xc>
	...

08003674 <_free_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4605      	mov	r5, r0
 8003678:	2900      	cmp	r1, #0
 800367a:	d043      	beq.n	8003704 <_free_r+0x90>
 800367c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003680:	1f0c      	subs	r4, r1, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	bfb8      	it	lt
 8003686:	18e4      	addlt	r4, r4, r3
 8003688:	f000 f8d4 	bl	8003834 <__malloc_lock>
 800368c:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <_free_r+0x94>)
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	4610      	mov	r0, r2
 8003692:	b933      	cbnz	r3, 80036a2 <_free_r+0x2e>
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	6014      	str	r4, [r2, #0]
 8003698:	4628      	mov	r0, r5
 800369a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800369e:	f000 b8ca 	b.w	8003836 <__malloc_unlock>
 80036a2:	42a3      	cmp	r3, r4
 80036a4:	d90b      	bls.n	80036be <_free_r+0x4a>
 80036a6:	6821      	ldr	r1, [r4, #0]
 80036a8:	1862      	adds	r2, r4, r1
 80036aa:	4293      	cmp	r3, r2
 80036ac:	bf01      	itttt	eq
 80036ae:	681a      	ldreq	r2, [r3, #0]
 80036b0:	685b      	ldreq	r3, [r3, #4]
 80036b2:	1852      	addeq	r2, r2, r1
 80036b4:	6022      	streq	r2, [r4, #0]
 80036b6:	6063      	str	r3, [r4, #4]
 80036b8:	6004      	str	r4, [r0, #0]
 80036ba:	e7ed      	b.n	8003698 <_free_r+0x24>
 80036bc:	4613      	mov	r3, r2
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	b10a      	cbz	r2, 80036c6 <_free_r+0x52>
 80036c2:	42a2      	cmp	r2, r4
 80036c4:	d9fa      	bls.n	80036bc <_free_r+0x48>
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	1858      	adds	r0, r3, r1
 80036ca:	42a0      	cmp	r0, r4
 80036cc:	d10b      	bne.n	80036e6 <_free_r+0x72>
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	4401      	add	r1, r0
 80036d2:	1858      	adds	r0, r3, r1
 80036d4:	4282      	cmp	r2, r0
 80036d6:	6019      	str	r1, [r3, #0]
 80036d8:	d1de      	bne.n	8003698 <_free_r+0x24>
 80036da:	6810      	ldr	r0, [r2, #0]
 80036dc:	6852      	ldr	r2, [r2, #4]
 80036de:	4401      	add	r1, r0
 80036e0:	6019      	str	r1, [r3, #0]
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	e7d8      	b.n	8003698 <_free_r+0x24>
 80036e6:	d902      	bls.n	80036ee <_free_r+0x7a>
 80036e8:	230c      	movs	r3, #12
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	e7d4      	b.n	8003698 <_free_r+0x24>
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	1821      	adds	r1, r4, r0
 80036f2:	428a      	cmp	r2, r1
 80036f4:	bf01      	itttt	eq
 80036f6:	6811      	ldreq	r1, [r2, #0]
 80036f8:	6852      	ldreq	r2, [r2, #4]
 80036fa:	1809      	addeq	r1, r1, r0
 80036fc:	6021      	streq	r1, [r4, #0]
 80036fe:	6062      	str	r2, [r4, #4]
 8003700:	605c      	str	r4, [r3, #4]
 8003702:	e7c9      	b.n	8003698 <_free_r+0x24>
 8003704:	bd38      	pop	{r3, r4, r5, pc}
 8003706:	bf00      	nop
 8003708:	200000b0 	.word	0x200000b0

0800370c <_malloc_r>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	1ccd      	adds	r5, r1, #3
 8003710:	f025 0503 	bic.w	r5, r5, #3
 8003714:	3508      	adds	r5, #8
 8003716:	2d0c      	cmp	r5, #12
 8003718:	bf38      	it	cc
 800371a:	250c      	movcc	r5, #12
 800371c:	2d00      	cmp	r5, #0
 800371e:	4606      	mov	r6, r0
 8003720:	db01      	blt.n	8003726 <_malloc_r+0x1a>
 8003722:	42a9      	cmp	r1, r5
 8003724:	d903      	bls.n	800372e <_malloc_r+0x22>
 8003726:	230c      	movs	r3, #12
 8003728:	6033      	str	r3, [r6, #0]
 800372a:	2000      	movs	r0, #0
 800372c:	bd70      	pop	{r4, r5, r6, pc}
 800372e:	f000 f881 	bl	8003834 <__malloc_lock>
 8003732:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <_malloc_r+0xb4>)
 8003734:	6814      	ldr	r4, [r2, #0]
 8003736:	4621      	mov	r1, r4
 8003738:	b991      	cbnz	r1, 8003760 <_malloc_r+0x54>
 800373a:	4c22      	ldr	r4, [pc, #136]	; (80037c4 <_malloc_r+0xb8>)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	b91b      	cbnz	r3, 8003748 <_malloc_r+0x3c>
 8003740:	4630      	mov	r0, r6
 8003742:	f000 f867 	bl	8003814 <_sbrk_r>
 8003746:	6020      	str	r0, [r4, #0]
 8003748:	4629      	mov	r1, r5
 800374a:	4630      	mov	r0, r6
 800374c:	f000 f862 	bl	8003814 <_sbrk_r>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d126      	bne.n	80037a2 <_malloc_r+0x96>
 8003754:	230c      	movs	r3, #12
 8003756:	4630      	mov	r0, r6
 8003758:	6033      	str	r3, [r6, #0]
 800375a:	f000 f86c 	bl	8003836 <__malloc_unlock>
 800375e:	e7e4      	b.n	800372a <_malloc_r+0x1e>
 8003760:	680b      	ldr	r3, [r1, #0]
 8003762:	1b5b      	subs	r3, r3, r5
 8003764:	d41a      	bmi.n	800379c <_malloc_r+0x90>
 8003766:	2b0b      	cmp	r3, #11
 8003768:	d90f      	bls.n	800378a <_malloc_r+0x7e>
 800376a:	600b      	str	r3, [r1, #0]
 800376c:	18cc      	adds	r4, r1, r3
 800376e:	50cd      	str	r5, [r1, r3]
 8003770:	4630      	mov	r0, r6
 8003772:	f000 f860 	bl	8003836 <__malloc_unlock>
 8003776:	f104 000b 	add.w	r0, r4, #11
 800377a:	1d23      	adds	r3, r4, #4
 800377c:	f020 0007 	bic.w	r0, r0, #7
 8003780:	1ac3      	subs	r3, r0, r3
 8003782:	d01b      	beq.n	80037bc <_malloc_r+0xb0>
 8003784:	425a      	negs	r2, r3
 8003786:	50e2      	str	r2, [r4, r3]
 8003788:	bd70      	pop	{r4, r5, r6, pc}
 800378a:	428c      	cmp	r4, r1
 800378c:	bf0b      	itete	eq
 800378e:	6863      	ldreq	r3, [r4, #4]
 8003790:	684b      	ldrne	r3, [r1, #4]
 8003792:	6013      	streq	r3, [r2, #0]
 8003794:	6063      	strne	r3, [r4, #4]
 8003796:	bf18      	it	ne
 8003798:	460c      	movne	r4, r1
 800379a:	e7e9      	b.n	8003770 <_malloc_r+0x64>
 800379c:	460c      	mov	r4, r1
 800379e:	6849      	ldr	r1, [r1, #4]
 80037a0:	e7ca      	b.n	8003738 <_malloc_r+0x2c>
 80037a2:	1cc4      	adds	r4, r0, #3
 80037a4:	f024 0403 	bic.w	r4, r4, #3
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d005      	beq.n	80037b8 <_malloc_r+0xac>
 80037ac:	1a21      	subs	r1, r4, r0
 80037ae:	4630      	mov	r0, r6
 80037b0:	f000 f830 	bl	8003814 <_sbrk_r>
 80037b4:	3001      	adds	r0, #1
 80037b6:	d0cd      	beq.n	8003754 <_malloc_r+0x48>
 80037b8:	6025      	str	r5, [r4, #0]
 80037ba:	e7d9      	b.n	8003770 <_malloc_r+0x64>
 80037bc:	bd70      	pop	{r4, r5, r6, pc}
 80037be:	bf00      	nop
 80037c0:	200000b0 	.word	0x200000b0
 80037c4:	200000b4 	.word	0x200000b4

080037c8 <_realloc_r>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	4607      	mov	r7, r0
 80037cc:	4614      	mov	r4, r2
 80037ce:	460e      	mov	r6, r1
 80037d0:	b921      	cbnz	r1, 80037dc <_realloc_r+0x14>
 80037d2:	4611      	mov	r1, r2
 80037d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037d8:	f7ff bf98 	b.w	800370c <_malloc_r>
 80037dc:	b922      	cbnz	r2, 80037e8 <_realloc_r+0x20>
 80037de:	f7ff ff49 	bl	8003674 <_free_r>
 80037e2:	4625      	mov	r5, r4
 80037e4:	4628      	mov	r0, r5
 80037e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e8:	f000 f826 	bl	8003838 <_malloc_usable_size_r>
 80037ec:	4284      	cmp	r4, r0
 80037ee:	d90f      	bls.n	8003810 <_realloc_r+0x48>
 80037f0:	4621      	mov	r1, r4
 80037f2:	4638      	mov	r0, r7
 80037f4:	f7ff ff8a 	bl	800370c <_malloc_r>
 80037f8:	4605      	mov	r5, r0
 80037fa:	2800      	cmp	r0, #0
 80037fc:	d0f2      	beq.n	80037e4 <_realloc_r+0x1c>
 80037fe:	4631      	mov	r1, r6
 8003800:	4622      	mov	r2, r4
 8003802:	f7ff ff11 	bl	8003628 <memcpy>
 8003806:	4631      	mov	r1, r6
 8003808:	4638      	mov	r0, r7
 800380a:	f7ff ff33 	bl	8003674 <_free_r>
 800380e:	e7e9      	b.n	80037e4 <_realloc_r+0x1c>
 8003810:	4635      	mov	r5, r6
 8003812:	e7e7      	b.n	80037e4 <_realloc_r+0x1c>

08003814 <_sbrk_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	2300      	movs	r3, #0
 8003818:	4c05      	ldr	r4, [pc, #20]	; (8003830 <_sbrk_r+0x1c>)
 800381a:	4605      	mov	r5, r0
 800381c:	4608      	mov	r0, r1
 800381e:	6023      	str	r3, [r4, #0]
 8003820:	f000 f814 	bl	800384c <_sbrk>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	d102      	bne.n	800382e <_sbrk_r+0x1a>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	b103      	cbz	r3, 800382e <_sbrk_r+0x1a>
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	2000016c 	.word	0x2000016c

08003834 <__malloc_lock>:
 8003834:	4770      	bx	lr

08003836 <__malloc_unlock>:
 8003836:	4770      	bx	lr

08003838 <_malloc_usable_size_r>:
 8003838:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800383c:	2800      	cmp	r0, #0
 800383e:	f1a0 0004 	sub.w	r0, r0, #4
 8003842:	bfbc      	itt	lt
 8003844:	580b      	ldrlt	r3, [r1, r0]
 8003846:	18c0      	addlt	r0, r0, r3
 8003848:	4770      	bx	lr
	...

0800384c <_sbrk>:
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <_sbrk+0x14>)
 800384e:	4602      	mov	r2, r0
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	b909      	cbnz	r1, 8003858 <_sbrk+0xc>
 8003854:	4903      	ldr	r1, [pc, #12]	; (8003864 <_sbrk+0x18>)
 8003856:	6019      	str	r1, [r3, #0]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	4402      	add	r2, r0
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	4770      	bx	lr
 8003860:	200000b8 	.word	0x200000b8
 8003864:	20000170 	.word	0x20000170

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
